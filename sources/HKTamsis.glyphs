{
.appVersion = "3087";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = OMNI;
},
{
name = panose;
value = (
2,
14,
2,
4,
6,
4,
3,
5,
4,
4
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
29,
32
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1254",
"1257",
"1258",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
NULL,
CR,
space,
A,
Aacute,
Abreve,
uni1EAE,
uni1EB6,
uni1EB0,
uni1EB2,
uni1EB4,
uni01CD,
Acircumflex,
uni1EA4,
uni1EAC,
uni1EA6,
uni1EA8,
uni1EAA,
uni0200,
Adieresis,
uni1EA0,
Agrave,
uni1EA2,
uni0202,
Amacron,
Aogonek,
Aring,
Aringacute,
Atilde,
AE,
AEacute,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Ccircumflex,
Cdotaccent,
D,
uni01F1,
uni01C4,
Eth,
Dcaron,
Dcroat,
uni1E0C,
uni01F2,
uni01C5,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
uni1EBE,
uni1EC6,
uni1EC0,
uni1EC2,
uni1EC4,
uni0204,
Edieresis,
Edotaccent,
uni1EB8,
Egrave,
uni1EBA,
uni0206,
Emacron,
Eogonek,
uni1EBC,
F,
G,
Gbreve,
Gcaron,
Gcircumflex,
uni0122,
Gdotaccent,
H,
Hbar,
Hcircumflex,
uni1E24,
I,
IJ,
Iacute,
Ibreve,
uni01CF,
Icircumflex,
uni0208,
Idieresis,
Idotaccent,
uni1ECA,
Igrave,
uni1EC8,
uni020A,
Imacron,
Iogonek,
Itilde,
J,
uni00A40301,
Jcircumflex,
K,
uni0136,
L,
uni01C7,
Lacute,
Lcaron,
uni013B,
Ldot,
uni01C8,
Lslash,
M,
N,
uni01CA,
Nacute,
Ncaron,
uni0145,
uni1E44,
Eng,
uni019D,
uni01CB,
Ntilde,
O,
Oacute,
Obreve,
uni01D1,
Ocircumflex,
uni1ED0,
uni1ED8,
uni1ED2,
uni1ED4,
uni1ED6,
uni020C,
Odieresis,
uni022A,
uni0230,
uni1ECC,
Ograve,
uni1ECE,
Ohorn,
uni1EDA,
uni1EE2,
uni1EDC,
uni1EDE,
uni1EE0,
Ohungarumlaut,
uni020E,
Omacron,
uni01EA,
Oslash,
Oslashacute,
Otilde,
uni022C,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
uni0210,
uni1E5A,
uni0212,
S,
Sacute,
Scaron,
Scedilla,
Scircumflex,
uni0218,
uni1E62,
uni1E9E,
uni018F,
T,
Tbar,
Tcaron,
uni0162,
uni021A,
uni1E6C,
U,
Uacute,
Ubreve,
uni01D3,
Ucircumflex,
uni0214,
Udieresis,
uni01D7,
uni01D9,
uni01DB,
uni01D5,
uni1EE4,
Ugrave,
uni1EE6,
Uhorn,
uni1EE8,
uni1EF0,
uni1EEA,
uni1EEC,
uni1EEE,
Uhungarumlaut,
uni0216,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
uni1EF4,
Ygrave,
uni1EF6,
uni0232,
uni1EF8,
Z,
Zacute,
Zcaron,
Zdotaccent,
uni1E92,
Cacute.loclPLK,
Nacute.loclPLK,
Oacute.loclPLK,
Sacute.loclPLK,
Zacute.loclPLK,
a,
aacute,
abreve,
uni1EAF,
uni1EB7,
uni1EB1,
uni1EB3,
uni1EB5,
uni01CE,
acircumflex,
uni1EA5,
uni1EAD,
uni1EA7,
uni1EA9,
uni1EAB,
uni0201,
adieresis,
uni1EA1,
agrave,
uni1EA3,
uni0203,
amacron,
aogonek,
aring,
aringacute,
atilde,
ae,
aeacute,
b,
c,
cacute,
ccaron,
ccedilla,
ccircumflex,
cdotaccent,
d,
eth,
dcaron,
dcroat,
uni1E0D,
uni01F3,
uni01C6,
e,
eacute,
ebreve,
ecaron,
ecircumflex,
uni1EBF,
uni1EC7,
uni1EC1,
uni1EC3,
uni1EC5,
uni0205,
edieresis,
edotaccent,
uni1EB9,
egrave,
uni1EBB,
uni0207,
emacron,
eogonek,
uni1EBD,
uni0259,
f,
g,
gbreve,
gcaron,
gcircumflex,
uni0123,
gdotaccent,
h,
hbar,
hcircumflex,
uni1E25,
i,
dotlessi,
iacute,
ibreve,
uni01D0,
icircumflex,
uni0209,
idieresis,
i.loclTRK,
uni1ECB,
igrave,
uni1EC9,
uni020B,
ij,
imacron,
iogonek,
itilde,
j,
uni0237,
uni006A0301,
jcircumflex,
k,
uni0137,
kgreenlandic,
l,
lacute,
lcaron,
uni013C,
ldot,
uni01C9,
lslash,
m,
n,
nacute,
napostrophe,
ncaron,
uni0146,
uni1E45,
eng,
uni0272,
uni01CC,
ntilde,
o,
oacute,
obreve,
uni01D2,
ocircumflex,
uni1ED1,
uni1ED9,
uni1ED3,
uni1ED5,
uni1ED7,
uni020D,
odieresis,
uni022B,
uni0231,
uni1ECD,
ograve,
uni1ECF,
ohorn,
uni1EDB,
uni1EE3,
uni1EDD,
uni1EDF,
uni1EE1,
ohungarumlaut,
uni020F,
omacron,
uni01EB,
oslash,
oslashacute,
otilde,
uni022D,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
uni0211,
uni1E5B,
uni0213,
s,
sacute,
scaron,
scedilla,
scircumflex,
uni0219,
uni1E63,
germandbls,
longs,
t,
tbar,
tcaron,
uni0163,
uni021B,
uni1E6D,
u,
uacute,
ubreve,
uni01D4,
ucircumflex,
uni0215,
udieresis,
uni01D8,
uni01DA,
uni01DC,
uni01D6,
uni1EE5,
ugrave,
uni1EE7,
uhorn,
uni1EE9,
uni1EF1,
uni1EEB,
uni1EED,
uni1EEF,
uhungarumlaut,
uni0217,
umacron,
uogonek,
uring,
utilde,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
uni1EF5,
ygrave,
uni1EF7,
uni0233,
uni1EF9,
z,
zacute,
zcaron,
zdotaccent,
uni1E93,
germandbls.calt,
cacute.loclPLK,
nacute.loclPLK,
oacute.loclPLK,
sacute.loclPLK,
zacute.loclPLK,
c_k,
f_f,
f_f_i,
f_f_l,
f_h,
f_iacute,
fi,
fl,
s_t,
t_t,
ordfeminine,
ordmasculine,
uni0394,
uni03A9,
uni03BC,
pi,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
zero.lf,
one.lf,
two.lf,
three.lf,
four.lf,
five.lf,
six.lf,
seven.lf,
eight.lf,
nine.lf,
zero.osf,
one.osf,
two.osf,
three.osf,
four.osf,
five.osf,
six.osf,
seven.osf,
eight.osf,
nine.osf,
zero.tf,
one.tf,
two.tf,
three.tf,
four.tf,
five.tf,
six.tf,
seven.tf,
eight.tf,
nine.tf,
zero.tf.zero,
zero.tosf,
one.tosf,
two.tosf,
three.tosf,
four.tosf,
five.tosf,
six.tosf,
seven.tosf,
eight.tosf,
nine.tosf,
zero.zero,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
zero.dnom,
one.dnom,
two.dnom,
three.dnom,
four.dnom,
five.dnom,
six.dnom,
seven.dnom,
eight.dnom,
nine.dnom,
zero.numr,
one.numr,
two.numr,
three.numr,
four.numr,
five.numr,
six.numr,
seven.numr,
eight.numr,
nine.numr,
uni2070,
uni00B9,
uni00B2,
uni00B3,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
fraction,
onehalf,
uni2153,
uni2154,
onequarter,
threequarters,
oneeighth,
threeeighths,
fiveeighths,
seveneighths,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
exclamdown.case,
questiondown.case,
periodcentered.loclCAT.case,
periodcentered.loclCAT,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
hyphen,
uni00AD,
endash,
emdash,
uni2010,
uni2011,
underscore,
hyphen.case,
uni00AD.case,
endash.case,
emdash.case,
uni2011.case,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
uni27E8,
uni27E9,
uni2003,
uni2002,
uni2005,
uni00A0,
uni2009,
uni2004,
DEL,
uniFEFF,
uni20B5,
cent,
colonmonetary,
currency,
dollar,
dong,
Euro,
florin,
franc,
uni20B2,
uni20AD,
lira,
uni20BA,
uni20BC,
uni20A6,
peseta,
uni20B1,
uni20BD,
uni20B9,
sterling,
uni20A9,
yen,
uni2219,
uni2052,
uni2215,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
logicalnot,
asciicircum,
infinity,
emptyset,
integral,
uni2126,
uni2206,
product,
summation,
radical,
partialdiff,
uni00B5,
percent,
perthousand,
lozenge,
at,
ampersand,
paragraph,
section,
copyright,
registered,
uni2117,
trademark,
degree,
minute,
second,
bar,
brokenbar,
dagger,
uni2113,
daggerdbl,
uni2116,
estimated,
uni02BC,
uni02BA,
uni02C9,
uni02B9,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
caroncomb.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
hookabovecomb,
uni030F,
uni0311,
uni0312,
uni0313,
uni031B,
dotbelowcomb,
uni0324,
uni0326,
uni0327,
uni0328,
uni032E,
uni0331,
uni0335,
uni0336,
uni0337,
uni0338,
acute,
breve,
caron,
cedilla,
circumflex,
dieresis,
dotaccent,
grave,
hungarumlaut,
macron,
ogonek,
ring,
tilde,
caron.alt,
uni0308.case,
uni0307.case,
gravecomb.case,
acutecomb.case,
uni030B.case,
uni0302.case,
uni030C.case,
uni0306.case,
uni030A.case,
tildecomb.case,
uni0304.case,
hookabovecomb.case,
uni030F.case,
uni0311.case,
uni0312.case,
uni031B.case,
dotbelowcomb.case,
uni0324.case,
uni0326.case,
uni0327.case,
uni0328.case,
uni032E.case,
uni0331.case,
uni0337.case,
uni0338.case,
acute.loclPLK.case,
acute.loclPLK,
uni03060301,
uni03060300,
uni03060309,
uni03060303,
uni03020301,
uni03020300,
uni03020309,
uni03020303,
HT,
LF,
DLE,
DC1,
DC2,
DC3,
DC4,
RS,
US,
uniE0FF,
uniEFFD,
uniF000
);
}
);
date = "2021-07-07 15:43:32 +0000";
familyName = "HK Tamsis";
featurePrefixes = (
{
code = "lookup SUB_43 {
	sub periodcentered by periodcentered.loclCAT;
} SUB_43;
lookup SUB_44 {
	sub J by uni00A40301;
	sub j by uni006A0301;
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
	sub periodcentered by periodcentered.loclCAT.case;
	sub slash by fraction;
} SUB_44;
lookup SUB_45 {
	sub space by uni2009;
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub i by dotlessi;
	sub j by uni0237;
	sub o by ordmasculine;
	sub germandbls by germandbls.calt;
	sub zero by zero.dnom;
	sub one by one.dnom;
	sub two by two.dnom;
	sub three by three.dnom;
	sub four by four.dnom;
	sub five by five.dnom;
	sub six by six.dnom;
	sub seven by seven.dnom;
	sub eight by eight.dnom;
	sub nine by nine.dnom;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub hookabovecomb by hookabovecomb.case;
	sub uni030F by uni030F.case;
	sub uni0311 by uni0311.case;
	sub uni0312 by uni0312.case;
	sub uni031B by uni031B.case;
	sub dotbelowcomb by dotbelowcomb.case;
	sub uni0324 by uni0324.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
	sub uni032E by uni032E.case;
	sub uni0331 by uni0331.case;
	sub uni0337 by uni0337.case;
	sub uni0338 by uni0338.case;
	sub acute.loclPLK by acute.loclPLK.case;
} SUB_45;
";
name = Prefix;
}
);
features = (
{
automatic = 1;
code = "";
tag = aalt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	sub f f i by f_f_i;
	sub f f l by f_f_l;
	sub f f by f_f;
	sub f i by fi;
	sub f l by fl;
} SUB_2;
lookup SUB_2;
script latn;
language dflt;
lookup SUB_2;
lookup SUB_2;
language AZE;
lookup SUB_2;
lookup SUB_2;
language CAT;
lookup SUB_2;
lookup SUB_2;
language CRT;
lookup SUB_2;
lookup SUB_2;
language KAZ;
lookup SUB_2;
lookup SUB_2;
language MOL;
lookup SUB_2;
lookup SUB_2;
language NLD;
lookup SUB_2;
lookup SUB_2;
language PLK;
lookup SUB_2;
lookup SUB_2;
language ROM;
lookup SUB_2;
lookup SUB_2;
language TAT;
lookup SUB_2;
lookup SUB_2;
language TRK;
lookup SUB_2;
lookup SUB_2;
";
tag = liga;
},
{
code = "script latn;
language TAT;
lookup SUB_3 {
	sub i by i.loclTRK;
} SUB_3;
lookup SUB_3;
language TRK;
lookup SUB_4 {
	sub i by i.loclTRK;
} SUB_4;
lookup SUB_4;
language MOL;
lookup SUB_5 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub scedilla by uni0219;
	sub uni0163 by uni021B;
} SUB_5;
lookup SUB_5;
language ROM;
lookup SUB_6 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub scedilla by uni0219;
	sub uni0163 by uni021B;
} SUB_6;
lookup SUB_6;
language KAZ;
lookup SUB_7 {
	sub i by i.loclTRK;
} SUB_7;
lookup SUB_7;
language PLK;
lookup SUB_8 {
	sub Cacute by Cacute.loclPLK;
	sub Nacute by Nacute.loclPLK;
	sub Oacute by Oacute.loclPLK;
	sub Sacute by Sacute.loclPLK;
	sub Zacute by Zacute.loclPLK;
	sub cacute by cacute.loclPLK;
	sub nacute by nacute.loclPLK;
	sub oacute by oacute.loclPLK;
	sub sacute by sacute.loclPLK;
	sub zacute by zacute.loclPLK;
	sub acute by acute.loclPLK;
} SUB_8;
language AZE;
lookup SUB_9 {
	sub i by i.loclTRK;
} SUB_9;
language CAT;
lookup SUB_10 {
	sub l periodcentered' lookup SUB_43 l;
	sub L periodcentered' lookup SUB_44 L;
} SUB_10;
language CRT;
lookup SUB_11 {
	sub i by i.loclTRK;
} SUB_11;
language NLD;
lookup SUB_12 {
	sub iacute j' lookup SUB_44;
	sub Iacute J' lookup SUB_44;
} SUB_12;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_13;
script latn;
language dflt;
lookup SUB_13;
language AZE;
lookup SUB_13;
language CAT;
lookup SUB_13;
language CRT;
lookup SUB_13;
language KAZ;
lookup SUB_13;
language MOL;
lookup SUB_13;
language NLD;
lookup SUB_13;
language PLK;
lookup SUB_13;
language ROM;
lookup SUB_13;
language TAT;
lookup SUB_13;
language TRK;
lookup SUB_13;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_14 {
	@SUB_14_0_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_2 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_3 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_4 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_5 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_6 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_7 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_8 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_9 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_10 = [eight five four nine one seven six three two zero];
	@SUB_14_0_BT_11 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_0_BT_0 @SUB_14_0_BT_1 @SUB_14_0_BT_2 @SUB_14_0_BT_3 @SUB_14_0_BT_4 @SUB_14_0_BT_5 @SUB_14_0_BT_6 @SUB_14_0_BT_7 @SUB_14_0_BT_8 @SUB_14_0_BT_9 @SUB_14_0_BT_10 @SUB_14_0_BT_11 slash slash';
	@SUB_14_1_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_2 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_3 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_4 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_5 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_6 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_7 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_8 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_9 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_10 = [eight five four nine one seven six three two zero];
	@SUB_14_1_LA_11 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_1_LA_0 @SUB_14_1_LA_1 @SUB_14_1_LA_2 @SUB_14_1_LA_3 @SUB_14_1_LA_4 @SUB_14_1_LA_5 @SUB_14_1_LA_6 @SUB_14_1_LA_7 @SUB_14_1_LA_8 @SUB_14_1_LA_9 @SUB_14_1_LA_10 @SUB_14_1_LA_11 slash;
	@SUB_14_2_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_2 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_3 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_4 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_5 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_6 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_7 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_8 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_9 = [eight five four nine one seven six three two zero];
	@SUB_14_2_BT_10 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_2_BT_0 @SUB_14_2_BT_1 @SUB_14_2_BT_2 @SUB_14_2_BT_3 @SUB_14_2_BT_4 @SUB_14_2_BT_5 @SUB_14_2_BT_6 @SUB_14_2_BT_7 @SUB_14_2_BT_8 @SUB_14_2_BT_9 @SUB_14_2_BT_10 slash slash';
	@SUB_14_3_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_2 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_3 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_4 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_5 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_6 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_7 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_8 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_9 = [eight five four nine one seven six three two zero];
	@SUB_14_3_LA_10 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_3_LA_0 @SUB_14_3_LA_1 @SUB_14_3_LA_2 @SUB_14_3_LA_3 @SUB_14_3_LA_4 @SUB_14_3_LA_5 @SUB_14_3_LA_6 @SUB_14_3_LA_7 @SUB_14_3_LA_8 @SUB_14_3_LA_9 @SUB_14_3_LA_10 slash;
	@SUB_14_4_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_4_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_4_BT_2 = [eight five four nine one seven six three two zero];
	@SUB_14_4_BT_3 = [eight five four nine one seven six three two zero];
	@SUB_14_4_BT_4 = [eight five four nine one seven six three two zero];
	@SUB_14_4_BT_5 = [eight five four nine one seven six three two zero];
	@SUB_14_4_BT_6 = [eight five four nine one seven six three two zero];
	@SUB_14_4_BT_7 = [eight five four nine one seven six three two zero];
	@SUB_14_4_BT_8 = [eight five four nine one seven six three two zero];
	@SUB_14_4_BT_9 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_4_BT_0 @SUB_14_4_BT_1 @SUB_14_4_BT_2 @SUB_14_4_BT_3 @SUB_14_4_BT_4 @SUB_14_4_BT_5 @SUB_14_4_BT_6 @SUB_14_4_BT_7 @SUB_14_4_BT_8 @SUB_14_4_BT_9 slash slash';
	@SUB_14_5_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_5_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_5_LA_2 = [eight five four nine one seven six three two zero];
	@SUB_14_5_LA_3 = [eight five four nine one seven six three two zero];
	@SUB_14_5_LA_4 = [eight five four nine one seven six three two zero];
	@SUB_14_5_LA_5 = [eight five four nine one seven six three two zero];
	@SUB_14_5_LA_6 = [eight five four nine one seven six three two zero];
	@SUB_14_5_LA_7 = [eight five four nine one seven six three two zero];
	@SUB_14_5_LA_8 = [eight five four nine one seven six three two zero];
	@SUB_14_5_LA_9 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_5_LA_0 @SUB_14_5_LA_1 @SUB_14_5_LA_2 @SUB_14_5_LA_3 @SUB_14_5_LA_4 @SUB_14_5_LA_5 @SUB_14_5_LA_6 @SUB_14_5_LA_7 @SUB_14_5_LA_8 @SUB_14_5_LA_9 slash;
	@SUB_14_6_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_6_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_6_BT_2 = [eight five four nine one seven six three two zero];
	@SUB_14_6_BT_3 = [eight five four nine one seven six three two zero];
	@SUB_14_6_BT_4 = [eight five four nine one seven six three two zero];
	@SUB_14_6_BT_5 = [eight five four nine one seven six three two zero];
	@SUB_14_6_BT_6 = [eight five four nine one seven six three two zero];
	@SUB_14_6_BT_7 = [eight five four nine one seven six three two zero];
	@SUB_14_6_BT_8 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_6_BT_0 @SUB_14_6_BT_1 @SUB_14_6_BT_2 @SUB_14_6_BT_3 @SUB_14_6_BT_4 @SUB_14_6_BT_5 @SUB_14_6_BT_6 @SUB_14_6_BT_7 @SUB_14_6_BT_8 slash slash';
	@SUB_14_7_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_7_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_7_LA_2 = [eight five four nine one seven six three two zero];
	@SUB_14_7_LA_3 = [eight five four nine one seven six three two zero];
	@SUB_14_7_LA_4 = [eight five four nine one seven six three two zero];
	@SUB_14_7_LA_5 = [eight five four nine one seven six three two zero];
	@SUB_14_7_LA_6 = [eight five four nine one seven six three two zero];
	@SUB_14_7_LA_7 = [eight five four nine one seven six three two zero];
	@SUB_14_7_LA_8 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_7_LA_0 @SUB_14_7_LA_1 @SUB_14_7_LA_2 @SUB_14_7_LA_3 @SUB_14_7_LA_4 @SUB_14_7_LA_5 @SUB_14_7_LA_6 @SUB_14_7_LA_7 @SUB_14_7_LA_8 slash;
	@SUB_14_8_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_8_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_8_BT_2 = [eight five four nine one seven six three two zero];
	@SUB_14_8_BT_3 = [eight five four nine one seven six three two zero];
	@SUB_14_8_BT_4 = [eight five four nine one seven six three two zero];
	@SUB_14_8_BT_5 = [eight five four nine one seven six three two zero];
	@SUB_14_8_BT_6 = [eight five four nine one seven six three two zero];
	@SUB_14_8_BT_7 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_8_BT_0 @SUB_14_8_BT_1 @SUB_14_8_BT_2 @SUB_14_8_BT_3 @SUB_14_8_BT_4 @SUB_14_8_BT_5 @SUB_14_8_BT_6 @SUB_14_8_BT_7 slash slash';
	@SUB_14_9_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_9_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_9_LA_2 = [eight five four nine one seven six three two zero];
	@SUB_14_9_LA_3 = [eight five four nine one seven six three two zero];
	@SUB_14_9_LA_4 = [eight five four nine one seven six three two zero];
	@SUB_14_9_LA_5 = [eight five four nine one seven six three two zero];
	@SUB_14_9_LA_6 = [eight five four nine one seven six three two zero];
	@SUB_14_9_LA_7 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_9_LA_0 @SUB_14_9_LA_1 @SUB_14_9_LA_2 @SUB_14_9_LA_3 @SUB_14_9_LA_4 @SUB_14_9_LA_5 @SUB_14_9_LA_6 @SUB_14_9_LA_7 slash;
	@SUB_14_10_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_10_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_10_BT_2 = [eight five four nine one seven six three two zero];
	@SUB_14_10_BT_3 = [eight five four nine one seven six three two zero];
	@SUB_14_10_BT_4 = [eight five four nine one seven six three two zero];
	@SUB_14_10_BT_5 = [eight five four nine one seven six three two zero];
	@SUB_14_10_BT_6 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_10_BT_0 @SUB_14_10_BT_1 @SUB_14_10_BT_2 @SUB_14_10_BT_3 @SUB_14_10_BT_4 @SUB_14_10_BT_5 @SUB_14_10_BT_6 slash slash';
	@SUB_14_11_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_11_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_11_LA_2 = [eight five four nine one seven six three two zero];
	@SUB_14_11_LA_3 = [eight five four nine one seven six three two zero];
	@SUB_14_11_LA_4 = [eight five four nine one seven six three two zero];
	@SUB_14_11_LA_5 = [eight five four nine one seven six three two zero];
	@SUB_14_11_LA_6 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_11_LA_0 @SUB_14_11_LA_1 @SUB_14_11_LA_2 @SUB_14_11_LA_3 @SUB_14_11_LA_4 @SUB_14_11_LA_5 @SUB_14_11_LA_6 slash;
	@SUB_14_12_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_12_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_12_BT_2 = [eight five four nine one seven six three two zero];
	@SUB_14_12_BT_3 = [eight five four nine one seven six three two zero];
	@SUB_14_12_BT_4 = [eight five four nine one seven six three two zero];
	@SUB_14_12_BT_5 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_12_BT_0 @SUB_14_12_BT_1 @SUB_14_12_BT_2 @SUB_14_12_BT_3 @SUB_14_12_BT_4 @SUB_14_12_BT_5 slash slash';
	@SUB_14_13_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_13_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_13_LA_2 = [eight five four nine one seven six three two zero];
	@SUB_14_13_LA_3 = [eight five four nine one seven six three two zero];
	@SUB_14_13_LA_4 = [eight five four nine one seven six three two zero];
	@SUB_14_13_LA_5 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_13_LA_0 @SUB_14_13_LA_1 @SUB_14_13_LA_2 @SUB_14_13_LA_3 @SUB_14_13_LA_4 @SUB_14_13_LA_5 slash;
	@SUB_14_14_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_14_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_14_BT_2 = [eight five four nine one seven six three two zero];
	@SUB_14_14_BT_3 = [eight five four nine one seven six three two zero];
	@SUB_14_14_BT_4 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_14_BT_0 @SUB_14_14_BT_1 @SUB_14_14_BT_2 @SUB_14_14_BT_3 @SUB_14_14_BT_4 slash slash';
	@SUB_14_15_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_15_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_15_LA_2 = [eight five four nine one seven six three two zero];
	@SUB_14_15_LA_3 = [eight five four nine one seven six three two zero];
	@SUB_14_15_LA_4 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_15_LA_0 @SUB_14_15_LA_1 @SUB_14_15_LA_2 @SUB_14_15_LA_3 @SUB_14_15_LA_4 slash;
	@SUB_14_16_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_16_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_16_BT_2 = [eight five four nine one seven six three two zero];
	@SUB_14_16_BT_3 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_16_BT_0 @SUB_14_16_BT_1 @SUB_14_16_BT_2 @SUB_14_16_BT_3 slash slash';
	@SUB_14_17_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_17_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_17_LA_2 = [eight five four nine one seven six three two zero];
	@SUB_14_17_LA_3 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_17_LA_0 @SUB_14_17_LA_1 @SUB_14_17_LA_2 @SUB_14_17_LA_3 slash;
	@SUB_14_18_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_18_BT_1 = [eight five four nine one seven six three two zero];
	@SUB_14_18_BT_2 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_18_BT_0 @SUB_14_18_BT_1 @SUB_14_18_BT_2 slash slash';
	@SUB_14_19_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_19_LA_1 = [eight five four nine one seven six three two zero];
	@SUB_14_19_LA_2 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_19_LA_0 @SUB_14_19_LA_1 @SUB_14_19_LA_2 slash;
	@SUB_14_20_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_20_BT_1 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_20_BT_0 @SUB_14_20_BT_1 slash slash';
	@SUB_14_21_LA_0 = [eight five four nine one seven six three two zero];
	@SUB_14_21_LA_1 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_21_LA_0 @SUB_14_21_LA_1 slash;
	@SUB_14_22_BT_0 = [eight five four nine one seven six three two zero];
	ignore sub @SUB_14_22_BT_0 slash slash';
	@SUB_14_23_LA_0 = [eight five four nine one seven six three two zero];
	ignore sub slash' @SUB_14_23_LA_0 slash;
	@SUB_14_24_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_14_24_LA_1 = [eight five four nine one seven six three two zero];
	sub @SUB_14_24_BT_0 slash' lookup SUB_44 @SUB_14_24_LA_1;
} SUB_14;
lookup SUB_15 {
	@SUB_15_0_IN_0 = [eight five four nine one seven six three two zero];
	sub @SUB_15_0_IN_0' lookup SUB_44 fraction;
} SUB_15;
lookup SUB_16 {
	@SUB_16_0_IN_0 = [eight five four nine one seven six three two zero];
	@SUB_16_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_16_0_IN_0' lookup SUB_44 @SUB_16_0_LA_1 fraction;
} SUB_16;
lookup SUB_17 {
	@SUB_17_0_IN_0 = [eight five four nine one seven six three two zero];
	@SUB_17_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_17_0_LA_2 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_17_0_IN_0' lookup SUB_44 @SUB_17_0_LA_1 @SUB_17_0_LA_2 fraction;
} SUB_17;
lookup SUB_18 {
	@SUB_18_0_IN_0 = [eight five four nine one seven six three two zero];
	@SUB_18_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_18_0_LA_2 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_18_0_LA_3 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_18_0_IN_0' lookup SUB_44 @SUB_18_0_LA_1 @SUB_18_0_LA_2 @SUB_18_0_LA_3 fraction;
} SUB_18;
lookup SUB_19 {
	@SUB_19_0_IN_0 = [eight five four nine one seven six three two zero];
	@SUB_19_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_19_0_LA_2 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_19_0_LA_3 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_19_0_LA_4 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_19_0_IN_0' lookup SUB_44 @SUB_19_0_LA_1 @SUB_19_0_LA_2 @SUB_19_0_LA_3 @SUB_19_0_LA_4 fraction;
} SUB_19;
lookup SUB_20 {
	@SUB_20_0_IN_0 = [eight five four nine one seven six three two zero];
	@SUB_20_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_20_0_LA_2 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_20_0_LA_3 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_20_0_LA_4 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_20_0_LA_5 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_20_0_IN_0' lookup SUB_44 @SUB_20_0_LA_1 @SUB_20_0_LA_2 @SUB_20_0_LA_3 @SUB_20_0_LA_4 @SUB_20_0_LA_5 fraction;
} SUB_20;
lookup SUB_21 {
	@SUB_21_0_IN_0 = [eight five four nine one seven six three two zero];
	@SUB_21_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_21_0_LA_2 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_21_0_LA_3 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_21_0_LA_4 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_21_0_LA_5 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_21_0_LA_6 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_21_0_IN_0' lookup SUB_44 @SUB_21_0_LA_1 @SUB_21_0_LA_2 @SUB_21_0_LA_3 @SUB_21_0_LA_4 @SUB_21_0_LA_5 @SUB_21_0_LA_6 fraction;
} SUB_21;
lookup SUB_22 {
	@SUB_22_0_IN_0 = [eight five four nine one seven six three two zero];
	@SUB_22_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_22_0_LA_2 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_22_0_LA_3 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_22_0_LA_4 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_22_0_LA_5 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_22_0_LA_6 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_22_0_LA_7 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_22_0_IN_0' lookup SUB_44 @SUB_22_0_LA_1 @SUB_22_0_LA_2 @SUB_22_0_LA_3 @SUB_22_0_LA_4 @SUB_22_0_LA_5 @SUB_22_0_LA_6 @SUB_22_0_LA_7 fraction;
} SUB_22;
lookup SUB_23 {
	@SUB_23_0_IN_0 = [eight five four nine one seven six three two zero];
	@SUB_23_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_23_0_LA_2 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_23_0_LA_3 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_23_0_LA_4 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_23_0_LA_5 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_23_0_LA_6 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_23_0_LA_7 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_23_0_LA_8 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_23_0_IN_0' lookup SUB_44 @SUB_23_0_LA_1 @SUB_23_0_LA_2 @SUB_23_0_LA_3 @SUB_23_0_LA_4 @SUB_23_0_LA_5 @SUB_23_0_LA_6 @SUB_23_0_LA_7 @SUB_23_0_LA_8 fraction;
} SUB_23;
lookup SUB_24 {
	@SUB_24_0_IN_0 = [eight five four nine one seven six three two zero];
	@SUB_24_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_24_0_LA_2 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_24_0_LA_3 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_24_0_LA_4 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_24_0_LA_5 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_24_0_LA_6 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_24_0_LA_7 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_24_0_LA_8 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	@SUB_24_0_LA_9 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_24_0_IN_0' lookup SUB_44 @SUB_24_0_LA_1 @SUB_24_0_LA_2 @SUB_24_0_LA_3 @SUB_24_0_LA_4 @SUB_24_0_LA_5 @SUB_24_0_LA_6 @SUB_24_0_LA_7 @SUB_24_0_LA_8 @SUB_24_0_LA_9 fraction;
} SUB_24;
lookup SUB_25 {
	@SUB_25_0_BT_0 = [eight.dnom five.dnom four.dnom fraction nine.dnom one.dnom seven.dnom six.dnom three.dnom two.dnom zero.dnom];
	@SUB_25_0_IN_1 = [eight five four nine one seven six three two zero];
	sub @SUB_25_0_BT_0 @SUB_25_0_IN_1' lookup SUB_45;
} SUB_25;
lookup SUB_26 {
	@SUB_26_0_BT_0 = [eight five four nine one seven six three two zero];
	@SUB_26_0_LA_1 = [eight.numr five.numr four.numr nine.numr one.numr seven.numr six.numr three.numr two.numr zero.numr];
	sub @SUB_26_0_BT_0 space' lookup SUB_45 @SUB_26_0_LA_1;
} SUB_26;
script latn;
language dflt;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language AZE;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language CAT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language CRT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language KAZ;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language MOL;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language NLD;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language PLK;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language ROM;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language TAT;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
language TRK;
lookup SUB_14;
lookup SUB_15;
lookup SUB_16;
lookup SUB_17;
lookup SUB_18;
lookup SUB_19;
lookup SUB_20;
lookup SUB_21;
lookup SUB_22;
lookup SUB_23;
lookup SUB_24;
lookup SUB_25;
lookup SUB_26;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_27 {
	@SUB_27_0_BT_0 = [eight five four nine one seven six three two zero];
	sub @SUB_27_0_BT_0 [A a]' lookup SUB_45;
	@SUB_27_1_BT_0 = [eight five four nine one seven six three two zero];
	sub @SUB_27_1_BT_0 [O o]' lookup SUB_45;
} SUB_27;
lookup SUB_28 {
	sub N o period by uni2116;
} SUB_28;
script latn;
language dflt;
lookup SUB_27;
lookup SUB_28;
language AZE;
lookup SUB_27;
lookup SUB_28;
language CAT;
lookup SUB_27;
lookup SUB_28;
language CRT;
lookup SUB_27;
lookup SUB_28;
language KAZ;
lookup SUB_27;
lookup SUB_28;
language MOL;
lookup SUB_27;
lookup SUB_28;
language NLD;
lookup SUB_27;
lookup SUB_28;
language PLK;
lookup SUB_27;
lookup SUB_28;
language ROM;
lookup SUB_27;
lookup SUB_28;
language TAT;
lookup SUB_27;
lookup SUB_28;
language TRK;
lookup SUB_27;
lookup SUB_28;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_29 {
	sub zero by zero.lf;
	sub one by one.lf;
	sub two by two.lf;
	sub three by three.lf;
	sub four by four.lf;
	sub five by five.lf;
	sub six by six.lf;
	sub seven by seven.lf;
	sub eight by eight.lf;
	sub nine by nine.lf;
	sub zero.osf by zero;
	sub one.osf by one;
	sub two.osf by two;
	sub three.osf by three;
	sub four.osf by four;
	sub five.osf by five;
	sub six.osf by six;
	sub seven.osf by seven;
	sub eight.osf by eight;
	sub nine.osf by nine;
} SUB_29;
script latn;
language dflt;
lookup SUB_29;
language AZE;
lookup SUB_29;
language CAT;
lookup SUB_29;
language CRT;
lookup SUB_29;
language KAZ;
lookup SUB_29;
language MOL;
lookup SUB_29;
language NLD;
lookup SUB_29;
language PLK;
lookup SUB_29;
language ROM;
lookup SUB_29;
language TAT;
lookup SUB_29;
language TRK;
lookup SUB_29;
";
tag = lnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_30 {
	sub zero.tf by zero.lf;
	sub one.tf by one.lf;
	sub two.tf by two.lf;
	sub three.tf by three.lf;
	sub four.tf by four.lf;
	sub five.tf by five.lf;
	sub six.tf by six.lf;
	sub seven.tf by seven.lf;
	sub eight.tf by eight.lf;
	sub nine.tf by nine.lf;
	sub zero.tosf by zero;
	sub one.tosf by one;
	sub two.tosf by two;
	sub three.tosf by three;
	sub four.tosf by four;
	sub five.tosf by five;
	sub six.tosf by six;
	sub seven.tosf by seven;
	sub eight.tosf by eight;
	sub nine.tosf by nine;
} SUB_30;
script latn;
language dflt;
lookup SUB_30;
language AZE;
lookup SUB_30;
language CAT;
lookup SUB_30;
language CRT;
lookup SUB_30;
language KAZ;
lookup SUB_30;
language MOL;
lookup SUB_30;
language NLD;
lookup SUB_30;
language PLK;
lookup SUB_30;
language ROM;
lookup SUB_30;
language TAT;
lookup SUB_30;
language TRK;
lookup SUB_30;
";
tag = pnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_31 {
	sub zero by zero.tf;
	sub one by one.tf;
	sub two by two.tf;
	sub three by three.tf;
	sub four by four.tf;
	sub five by five.tf;
	sub six by six.tf;
	sub seven by seven.tf;
	sub eight by eight.tf;
	sub nine by nine.tf;
	sub zero.lf by zero.tf;
	sub one.lf by one.tf;
	sub two.lf by two.tf;
	sub three.lf by three.tf;
	sub four.lf by four.tf;
	sub five.lf by five.tf;
	sub six.lf by six.tf;
	sub seven.lf by seven.tf;
	sub eight.lf by eight.tf;
	sub nine.lf by nine.tf;
	sub zero.osf by zero.tosf;
	sub one.osf by one.tosf;
	sub two.osf by two.tosf;
	sub three.osf by three.tosf;
	sub four.osf by four.tosf;
	sub five.osf by five.tosf;
	sub six.osf by six.tosf;
	sub seven.osf by seven.tosf;
	sub eight.osf by eight.tosf;
	sub nine.osf by nine.tosf;
} SUB_31;
script latn;
language dflt;
lookup SUB_31;
language AZE;
lookup SUB_31;
language CAT;
lookup SUB_31;
language CRT;
lookup SUB_31;
language KAZ;
lookup SUB_31;
language MOL;
lookup SUB_31;
language NLD;
lookup SUB_31;
language PLK;
lookup SUB_31;
language ROM;
lookup SUB_31;
language TAT;
lookup SUB_31;
language TRK;
lookup SUB_31;
";
tag = tnum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_32 {
	@SUB_32_0_LA_0 = [acutecomb gravecomb hookabovecomb tildecomb uni0302 uni0304 uni0306 uni0307 uni0308 uni030A uni030B uni030C uni030F uni0311 uni0312 uni0313];
	sub [i j]' lookup SUB_45 @SUB_32_0_LA_0;
	@SUB_32_1_LA_0 = [dotbelowcomb uni031B uni0324 uni0327 uni0328 uni032E uni0331 uni0335 uni0336 uni0337 uni0338];
	@SUB_32_1_LA_1 = [acutecomb gravecomb hookabovecomb tildecomb uni0302 uni0304 uni0306 uni0307 uni0308 uni030A uni030B uni030C uni030F uni0311 uni0312 uni0313];
	sub [i j]' lookup SUB_45 @SUB_32_1_LA_0 @SUB_32_1_LA_1;
	@SUB_32_2_BT_0 = [acute.loclPLK acutecomb dotbelowcomb gravecomb hookabovecomb tildecomb uni0302 uni0304 uni0306 uni0307 uni0308 uni030A uni030B uni030C uni030F uni0311 uni0312 uni031B uni0324 uni0327 uni0328 uni032E uni0331 uni0337 uni0338];
	@SUB_32_2_IN_1 = [acute.loclPLK acutecomb dotbelowcomb gravecomb hookabovecomb tildecomb uni0302 uni0304 uni0306 uni0307 uni0308 uni030A uni030B uni030C uni030F uni0311 uni0312 uni031B uni0324 uni0327 uni0328 uni032E uni0331 uni0337 uni0338];
	sub @SUB_32_2_BT_0 @SUB_32_2_IN_1' lookup SUB_45;
	@SUB_32_3_BT_0 = [A AE AEacute Aacute Abreve Acircumflex Adieresis Agrave Amacron Aogonek Aring Aringacute Atilde B C Cacute Cacute.loclPLK Ccaron Ccedilla Ccircumflex Cdotaccent D Dcaron Dcroat E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eng Eogonek Eth F G Gbreve Gcaron Gcircumflex Gdotaccent H Hbar Hcircumflex I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J Jcircumflex K L Lacute Lcaron Ldot Lslash M N Nacute Nacute.loclPLK Ncaron Ntilde O OE Oacute Oacute.loclPLK Obreve Ocircumflex Odieresis Ograve Ohorn Ohungarumlaut Omacron Oslash Oslashacute Otilde P Q R Racute Rcaron S Sacute Sacute.loclPLK Scaron Scedilla Scircumflex T Tbar Tcaron Thorn U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhorn Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave Z Zacute Zacute.loclPLK Zcaron Zdotaccent uni00A40301 uni0122 uni0136 uni013B uni0145 uni0156 uni0162 uni018F uni019D uni01C4 uni01C5 uni01C7 uni01C8 uni01CA uni01CB uni01CD uni01CF uni01D1 uni01D3 uni01D5 uni01D7 uni01D9 uni01DB uni01EA uni01F1 uni01F2 uni0200 uni0202 uni0204 uni0206 uni0208 uni020A uni020C uni020E uni0210 uni0212 uni0214 uni0216 uni0218 uni021A uni022A uni022C uni0230 uni0232 uni0394 uni03A9 uni1E0C uni1E24 uni1E44 uni1E5A uni1E62 uni1E6C uni1E92 uni1E9E uni1EA0 uni1EA2 uni1EA4 uni1EA6 uni1EA8 uni1EAA uni1EAC uni1EAE uni1EB0 uni1EB2 uni1EB4 uni1EB6 uni1EB8 uni1EBA uni1EBC uni1EBE uni1EC0 uni1EC2 uni1EC4 uni1EC6 uni1EC8 uni1ECA uni1ECC uni1ECE uni1ED0 uni1ED2 uni1ED4 uni1ED6 uni1ED8 uni1EDA uni1EDC uni1EDE uni1EE0 uni1EE2 uni1EE4 uni1EE6 uni1EE8 uni1EEA uni1EEC uni1EEE uni1EF0 uni1EF4 uni1EF6 uni1EF8];
	@SUB_32_3_IN_1 = [acute.loclPLK acutecomb dotbelowcomb gravecomb hookabovecomb tildecomb uni0302 uni0304 uni0306 uni0307 uni0308 uni030A uni030B uni030C uni030F uni0311 uni0312 uni031B uni0324 uni0327 uni0328 uni032E uni0331 uni0337 uni0338];
	sub @SUB_32_3_BT_0 @SUB_32_3_IN_1' lookup SUB_45;
} SUB_32;
lookup SUB_33 {
	@SUB_33_0_IN_0 = [acute.loclPLK acutecomb dotbelowcomb gravecomb hookabovecomb tildecomb uni0302 uni0304 uni0306 uni0307 uni0308 uni030A uni030B uni030C uni030F uni0311 uni0312 uni031B uni0324 uni0327 uni0328 uni032E uni0331 uni0337 uni0338];
	@SUB_33_0_LA_1 = [acute.loclPLK.case acutecomb.case dotbelowcomb.case gravecomb.case hookabovecomb.case tildecomb.case uni0302.case uni0304.case uni0306.case uni0307.case uni0308.case uni030A.case uni030B.case uni030C.case uni030F.case uni0311.case uni0312.case uni031B.case uni0324.case uni0327.case uni0328.case uni032E.case uni0331.case uni0337.case uni0338.case];
	sub @SUB_33_0_IN_0' lookup SUB_45 @SUB_33_0_LA_1;
	@SUB_33_1_BT_0 = [acute.loclPLK.case acutecomb.case dotbelowcomb.case gravecomb.case hookabovecomb.case tildecomb.case uni0302.case uni0304.case uni0306.case uni0307.case uni0308.case uni030A.case uni030B.case uni030C.case uni030F.case uni0311.case uni0312.case uni031B.case uni0324.case uni0327.case uni0328.case uni032E.case uni0331.case uni0337.case uni0338.case];
	@SUB_33_1_IN_1 = [acute.loclPLK acutecomb dotbelowcomb gravecomb hookabovecomb tildecomb uni0302 uni0304 uni0306 uni0307 uni0308 uni030A uni030B uni030C uni030F uni0311 uni0312 uni031B uni0324 uni0327 uni0328 uni032E uni0331 uni0337 uni0338];
	sub @SUB_33_1_BT_0 @SUB_33_1_IN_1' lookup SUB_45;
} SUB_33;
lookup SUB_34 {
	sub uni0302 gravecomb by uni03020300;
	sub uni0302 acutecomb by uni03020301;
	sub uni0302 tildecomb by uni03020303;
	sub uni0302 hookabovecomb by uni03020309;
	sub uni0306 gravecomb by uni03060300;
	sub uni0306 acutecomb by uni03060301;
	sub uni0306 tildecomb by uni03060303;
	sub uni0306 hookabovecomb by uni03060309;
} SUB_34;
script latn;
language dflt;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language AZE;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language CAT;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language CRT;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language KAZ;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language MOL;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language NLD;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language PLK;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language ROM;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language TAT;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
language TRK;
lookup SUB_32;
lookup SUB_33;
lookup SUB_34;
";
tag = ccmp;
},
{
code = "script DFLT;
language dflt;
lookup SUB_35 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_35;
script latn;
language dflt;
lookup SUB_35;
language AZE;
lookup SUB_35;
language CAT;
lookup SUB_35;
language CRT;
lookup SUB_35;
language KAZ;
lookup SUB_35;
language MOL;
lookup SUB_35;
language NLD;
lookup SUB_35;
language PLK;
lookup SUB_35;
language ROM;
lookup SUB_35;
language TAT;
lookup SUB_35;
language TRK;
lookup SUB_35;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_36 {
	sub zero by zero.numr;
	sub one by one.numr;
	sub two by two.numr;
	sub three by three.numr;
	sub four by four.numr;
	sub five by five.numr;
	sub six by six.numr;
	sub seven by seven.numr;
	sub eight by eight.numr;
	sub nine by nine.numr;
} SUB_36;
script latn;
language dflt;
lookup SUB_36;
language AZE;
lookup SUB_36;
language CAT;
lookup SUB_36;
language CRT;
lookup SUB_36;
language KAZ;
lookup SUB_36;
language MOL;
lookup SUB_36;
language NLD;
lookup SUB_36;
language PLK;
lookup SUB_36;
language ROM;
lookup SUB_36;
language TAT;
lookup SUB_36;
language TRK;
lookup SUB_36;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_37 {
	sub zero by zero.dnom;
	sub one by one.dnom;
	sub two by two.dnom;
	sub three by three.dnom;
	sub four by four.dnom;
	sub five by five.dnom;
	sub six by six.dnom;
	sub seven by seven.dnom;
	sub eight by eight.dnom;
	sub nine by nine.dnom;
} SUB_37;
script latn;
language dflt;
lookup SUB_37;
language AZE;
lookup SUB_37;
language CAT;
lookup SUB_37;
language CRT;
lookup SUB_37;
language KAZ;
lookup SUB_37;
language MOL;
lookup SUB_37;
language NLD;
lookup SUB_37;
language PLK;
lookup SUB_37;
language ROM;
lookup SUB_37;
language TAT;
lookup SUB_37;
language TRK;
lookup SUB_37;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_38 {
	sub zero by zero.osf;
	sub one by one.osf;
	sub two by two.osf;
	sub three by three.osf;
	sub four by four.osf;
	sub five by five.osf;
	sub six by six.osf;
	sub seven by seven.osf;
	sub eight by eight.osf;
	sub nine by nine.osf;
	sub zero.lf by zero;
	sub one.lf by one;
	sub two.lf by two;
	sub three.lf by three;
	sub four.lf by four;
	sub five.lf by five;
	sub six.lf by six;
	sub seven.lf by seven;
	sub eight.lf by eight;
	sub nine.lf by nine;
	sub zero.tf by zero.tosf;
	sub one.tf by one.tosf;
	sub two.tf by two.tosf;
	sub three.tf by three.tosf;
	sub four.tf by four.tosf;
	sub five.tf by five.tosf;
	sub six.tf by six.tosf;
	sub seven.tf by seven.tosf;
	sub eight.tf by eight.tosf;
	sub nine.tf by nine.tosf;
} SUB_38;
script latn;
language dflt;
lookup SUB_38;
language AZE;
lookup SUB_38;
language CAT;
lookup SUB_38;
language CRT;
lookup SUB_38;
language KAZ;
lookup SUB_38;
language MOL;
lookup SUB_38;
language NLD;
lookup SUB_38;
language PLK;
lookup SUB_38;
language ROM;
lookup SUB_38;
language TAT;
lookup SUB_38;
language TRK;
lookup SUB_38;
";
tag = onum;
},
{
code = "script DFLT;
language dflt;
lookup SUB_39 {
	sub zero by zero.lf;
	sub one by one.lf;
	sub two by two.lf;
	sub three by three.lf;
	sub four by four.lf;
	sub five by five.lf;
	sub six by six.lf;
	sub seven by seven.lf;
	sub eight by eight.lf;
	sub nine by nine.lf;
	sub zero.osf by zero.lf;
	sub one.osf by one.lf;
	sub two.osf by two.lf;
	sub three.osf by three.lf;
	sub four.osf by four.lf;
	sub five.osf by five.lf;
	sub six.osf by six.lf;
	sub seven.osf by seven.lf;
	sub eight.osf by eight.lf;
	sub nine.osf by nine.lf;
	sub zero.tf by zero.lf;
	sub one.tf by one.lf;
	sub two.tf by two.lf;
	sub three.tf by three.lf;
	sub four.tf by four.lf;
	sub five.tf by five.lf;
	sub six.tf by six.lf;
	sub seven.tf by seven.lf;
	sub eight.tf by eight.lf;
	sub nine.tf by nine.lf;
	sub zero.tosf by zero.lf;
	sub one.tosf by one.lf;
	sub two.tosf by two.lf;
	sub three.tosf by three.lf;
	sub four.tosf by four.lf;
	sub five.tosf by five.lf;
	sub six.tosf by six.lf;
	sub seven.tosf by seven.lf;
	sub eight.tosf by eight.lf;
	sub nine.tosf by nine.lf;
	sub exclamdown by exclamdown.case;
	sub questiondown by questiondown.case;
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub hyphen by hyphen.case;
	sub uni00AD by uni00AD.case;
	sub endash by endash.case;
	sub emdash by emdash.case;
	sub uni2011 by uni2011.case;
	sub uni0308 by uni0308.case;
	sub uni0307 by uni0307.case;
	sub gravecomb by gravecomb.case;
	sub acutecomb by acutecomb.case;
	sub uni030B by uni030B.case;
	sub uni0302 by uni0302.case;
	sub uni030C by uni030C.case;
	sub uni0306 by uni0306.case;
	sub uni030A by uni030A.case;
	sub tildecomb by tildecomb.case;
	sub uni0304 by uni0304.case;
	sub hookabovecomb by hookabovecomb.case;
	sub uni030F by uni030F.case;
	sub uni0311 by uni0311.case;
	sub uni0312 by uni0312.case;
	sub uni031B by uni031B.case;
	sub dotbelowcomb by dotbelowcomb.case;
	sub uni0324 by uni0324.case;
	sub uni0327 by uni0327.case;
	sub uni0328 by uni0328.case;
	sub uni032E by uni032E.case;
	sub uni0331 by uni0331.case;
	sub uni0337 by uni0337.case;
	sub uni0338 by uni0338.case;
	sub acute.loclPLK by acute.loclPLK.case;
} SUB_39;
script latn;
language dflt;
lookup SUB_39;
language AZE;
lookup SUB_39;
language CAT;
lookup SUB_39;
language CRT;
lookup SUB_39;
language KAZ;
lookup SUB_39;
language MOL;
lookup SUB_39;
language NLD;
lookup SUB_39;
language PLK;
lookup SUB_39;
language ROM;
lookup SUB_39;
language TAT;
lookup SUB_39;
language TRK;
lookup SUB_39;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_40 {
	sub c k by c_k;
	sub f h by f_h;
	sub f iacute by f_iacute;
	sub s t by s_t;
	sub t t by t_t;
} SUB_40;
script latn;
language dflt;
lookup SUB_40;
language AZE;
lookup SUB_40;
language CAT;
lookup SUB_40;
language CRT;
lookup SUB_40;
language KAZ;
lookup SUB_40;
language MOL;
lookup SUB_40;
language NLD;
lookup SUB_40;
language PLK;
lookup SUB_40;
language ROM;
lookup SUB_40;
language TAT;
lookup SUB_40;
language TRK;
lookup SUB_40;
";
tag = dlig;
},
{
code = "script DFLT;
language dflt;
lookup SUB_41 {
	sub zero by zero.zero;
	sub zero.lf by zero.tf.zero;
	sub zero.osf by zero.zero;
	sub zero.tf by zero.tf.zero;
} SUB_41;
script latn;
language dflt;
lookup SUB_41;
language AZE;
lookup SUB_41;
language CAT;
lookup SUB_41;
language CRT;
lookup SUB_41;
language KAZ;
lookup SUB_41;
language MOL;
lookup SUB_41;
language NLD;
lookup SUB_41;
language PLK;
lookup SUB_41;
language ROM;
lookup SUB_41;
language TAT;
lookup SUB_41;
language TRK;
lookup SUB_41;
";
tag = zero;
},
{
code = "script DFLT;
language dflt;
lookup SUB_42 {
	@SUB_42_0_BT_0 = [A AE AEacute Aacute Abreve Acircumflex Adieresis Agrave Amacron Aogonek Aring Aringacute Atilde B C Cacute Cacute.loclPLK Ccaron Ccedilla Ccircumflex Cdotaccent D Dcaron Dcroat E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eng Eogonek Eth F G Gbreve Gcaron Gcircumflex Gdotaccent H Hbar Hcircumflex I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J Jcircumflex K L Lacute Lcaron Ldot Lslash M N Nacute Nacute.loclPLK Ncaron Ntilde O OE Oacute Oacute.loclPLK Obreve Ocircumflex Odieresis Ograve Ohorn Ohungarumlaut Omacron Oslash Oslashacute Otilde P Q R Racute Rcaron S Sacute Sacute.loclPLK Scaron Scedilla Scircumflex T Tbar Tcaron Thorn U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhorn Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave Z Zacute Zacute.loclPLK Zcaron Zdotaccent uni00A40301 uni0122 uni0136 uni013B uni0145 uni0156 uni0162 uni018F uni019D uni01C4 uni01C5 uni01C7 uni01C8 uni01CA uni01CB uni01CD uni01CF uni01D1 uni01D3 uni01D5 uni01D7 uni01D9 uni01DB uni01EA uni01F1 uni01F2 uni0200 uni0202 uni0204 uni0206 uni0208 uni020A uni020C uni020E uni0210 uni0212 uni0214 uni0216 uni0218 uni021A uni022A uni022C uni0230 uni0232 uni0394 uni03A9 uni1E0C uni1E24 uni1E44 uni1E5A uni1E62 uni1E6C uni1E92 uni1E9E uni1EA0 uni1EA2 uni1EA4 uni1EA6 uni1EA8 uni1EAA uni1EAC uni1EAE uni1EB0 uni1EB2 uni1EB4 uni1EB6 uni1EB8 uni1EBA uni1EBC uni1EBE uni1EC0 uni1EC2 uni1EC4 uni1EC6 uni1EC8 uni1ECA uni1ECC uni1ECE uni1ED0 uni1ED2 uni1ED4 uni1ED6 uni1ED8 uni1EDA uni1EDC uni1EDE uni1EE0 uni1EE2 uni1EE4 uni1EE6 uni1EE8 uni1EEA uni1EEC uni1EEE uni1EF0 uni1EF4 uni1EF6 uni1EF8];
	@SUB_42_0_LA_1 = [A AE AEacute Aacute Abreve Acircumflex Adieresis Agrave Amacron Aogonek Aring Aringacute Atilde B C Cacute Cacute.loclPLK Ccaron Ccedilla Ccircumflex Cdotaccent D Dcaron Dcroat E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eng Eogonek Eth F G Gbreve Gcaron Gcircumflex Gdotaccent H Hbar Hcircumflex I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J Jcircumflex K L Lacute Lcaron Ldot Lslash M N Nacute Nacute.loclPLK Ncaron Ntilde O OE Oacute Oacute.loclPLK Obreve Ocircumflex Odieresis Ograve Ohorn Ohungarumlaut Omacron Oslash Oslashacute Otilde P Q R Racute Rcaron S Sacute Sacute.loclPLK Scaron Scedilla Scircumflex T Tbar Tcaron Thorn U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhorn Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave Z Zacute Zacute.loclPLK Zcaron Zdotaccent uni00A40301 uni0122 uni0136 uni013B uni0145 uni0156 uni0162 uni018F uni019D uni01C4 uni01C5 uni01C7 uni01C8 uni01CA uni01CB uni01CD uni01CF uni01D1 uni01D3 uni01D5 uni01D7 uni01D9 uni01DB uni01EA uni01F1 uni01F2 uni0200 uni0202 uni0204 uni0206 uni0208 uni020A uni020C uni020E uni0210 uni0212 uni0214 uni0216 uni0218 uni021A uni022A uni022C uni0230 uni0232 uni0394 uni03A9 uni1E0C uni1E24 uni1E44 uni1E5A uni1E62 uni1E6C uni1E92 uni1E9E uni1EA0 uni1EA2 uni1EA4 uni1EA6 uni1EA8 uni1EAA uni1EAC uni1EAE uni1EB0 uni1EB2 uni1EB4 uni1EB6 uni1EB8 uni1EBA uni1EBC uni1EBE uni1EC0 uni1EC2 uni1EC4 uni1EC6 uni1EC8 uni1ECA uni1ECC uni1ECE uni1ED0 uni1ED2 uni1ED4 uni1ED6 uni1ED8 uni1EDA uni1EDC uni1EDE uni1EE0 uni1EE2 uni1EE4 uni1EE6 uni1EE8 uni1EEA uni1EEC uni1EEE uni1EF0 uni1EF4 uni1EF6 uni1EF8];
	sub @SUB_42_0_BT_0 germandbls' lookup SUB_45 @SUB_42_0_LA_1;
	@SUB_42_1_BT_0 = [A AE AEacute Aacute Abreve Acircumflex Adieresis Agrave Amacron Aogonek Aring Aringacute Atilde B C Cacute Cacute.loclPLK Ccaron Ccedilla Ccircumflex Cdotaccent D Dcaron Dcroat E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eng Eogonek Eth F G Gbreve Gcaron Gcircumflex Gdotaccent H Hbar Hcircumflex I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J Jcircumflex K L Lacute Lcaron Ldot Lslash M N Nacute Nacute.loclPLK Ncaron Ntilde O OE Oacute Oacute.loclPLK Obreve Ocircumflex Odieresis Ograve Ohorn Ohungarumlaut Omacron Oslash Oslashacute Otilde P Q R Racute Rcaron S Sacute Sacute.loclPLK Scaron Scedilla Scircumflex T Tbar Tcaron Thorn U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhorn Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave Z Zacute Zacute.loclPLK Zcaron Zdotaccent uni00A40301 uni0122 uni0136 uni013B uni0145 uni0156 uni0162 uni018F uni019D uni01C4 uni01C5 uni01C7 uni01C8 uni01CA uni01CB uni01CD uni01CF uni01D1 uni01D3 uni01D5 uni01D7 uni01D9 uni01DB uni01EA uni01F1 uni01F2 uni0200 uni0202 uni0204 uni0206 uni0208 uni020A uni020C uni020E uni0210 uni0212 uni0214 uni0216 uni0218 uni021A uni022A uni022C uni0230 uni0232 uni0394 uni03A9 uni1E0C uni1E24 uni1E44 uni1E5A uni1E62 uni1E6C uni1E92 uni1E9E uni1EA0 uni1EA2 uni1EA4 uni1EA6 uni1EA8 uni1EAA uni1EAC uni1EAE uni1EB0 uni1EB2 uni1EB4 uni1EB6 uni1EB8 uni1EBA uni1EBC uni1EBE uni1EC0 uni1EC2 uni1EC4 uni1EC6 uni1EC8 uni1ECA uni1ECC uni1ECE uni1ED0 uni1ED2 uni1ED4 uni1ED6 uni1ED8 uni1EDA uni1EDC uni1EDE uni1EE0 uni1EE2 uni1EE4 uni1EE6 uni1EE8 uni1EEA uni1EEC uni1EEE uni1EF0 uni1EF4 uni1EF6 uni1EF8];
	@SUB_42_1_BT_1 = [A AE AEacute Aacute Abreve Acircumflex Adieresis Agrave Amacron Aogonek Aring Aringacute Atilde B C Cacute Cacute.loclPLK Ccaron Ccedilla Ccircumflex Cdotaccent D Dcaron Dcroat E Eacute Ebreve Ecaron Ecircumflex Edieresis Edotaccent Egrave Emacron Eng Eogonek Eth F G Gbreve Gcaron Gcircumflex Gdotaccent H Hbar Hcircumflex I IJ Iacute Ibreve Icircumflex Idieresis Idotaccent Igrave Imacron Iogonek Itilde J Jcircumflex K L Lacute Lcaron Ldot Lslash M N Nacute Nacute.loclPLK Ncaron Ntilde O OE Oacute Oacute.loclPLK Obreve Ocircumflex Odieresis Ograve Ohorn Ohungarumlaut Omacron Oslash Oslashacute Otilde P Q R Racute Rcaron S Sacute Sacute.loclPLK Scaron Scedilla Scircumflex T Tbar Tcaron Thorn U Uacute Ubreve Ucircumflex Udieresis Ugrave Uhorn Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ygrave Z Zacute Zacute.loclPLK Zcaron Zdotaccent uni00A40301 uni0122 uni0136 uni013B uni0145 uni0156 uni0162 uni018F uni019D uni01C4 uni01C5 uni01C7 uni01C8 uni01CA uni01CB uni01CD uni01CF uni01D1 uni01D3 uni01D5 uni01D7 uni01D9 uni01DB uni01EA uni01F1 uni01F2 uni0200 uni0202 uni0204 uni0206 uni0208 uni020A uni020C uni020E uni0210 uni0212 uni0214 uni0216 uni0218 uni021A uni022A uni022C uni0230 uni0232 uni0394 uni03A9 uni1E0C uni1E24 uni1E44 uni1E5A uni1E62 uni1E6C uni1E92 uni1E9E uni1EA0 uni1EA2 uni1EA4 uni1EA6 uni1EA8 uni1EAA uni1EAC uni1EAE uni1EB0 uni1EB2 uni1EB4 uni1EB6 uni1EB8 uni1EBA uni1EBC uni1EBE uni1EC0 uni1EC2 uni1EC4 uni1EC6 uni1EC8 uni1ECA uni1ECC uni1ECE uni1ED0 uni1ED2 uni1ED4 uni1ED6 uni1ED8 uni1EDA uni1EDC uni1EDE uni1EE0 uni1EE2 uni1EE4 uni1EE6 uni1EE8 uni1EEA uni1EEC uni1EEE uni1EF0 uni1EF4 uni1EF6 uni1EF8];
	sub @SUB_42_1_BT_0 @SUB_42_1_BT_1 germandbls' lookup SUB_45;
} SUB_42;
script latn;
language dflt;
lookup SUB_42;
language AZE;
lookup SUB_42;
language CAT;
lookup SUB_42;
language CRT;
lookup SUB_42;
language KAZ;
lookup SUB_42;
language MOL;
lookup SUB_42;
language NLD;
lookup SUB_42;
language PLK;
lookup SUB_42;
language ROM;
lookup SUB_42;
language TAT;
lookup SUB_42;
language TRK;
lookup SUB_42;
";
tag = calt;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 1100;
},
{
name = typoDescender;
value = -380;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1111;
},
{
name = winDescent;
value = 380;
},
{
name = hheaAscender;
value = 1100;
},
{
name = hheaDescender;
value = -380;
},
{
name = strikeoutPosition;
value = 264;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\0120 0 52 32 4 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012NPUSHB[ ]	/* 10 values pushed */\01271 4 59 4 39 8 21 7 4 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012NPUSHB[ ]	/* 10 values pushed */\01277 2 65 2 49 6 30 5 4 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 11 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 6 values pushed */\0124608 3840 2560 1408 4 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 15 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 6 values pushed */\01264 64 64 64 4 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01273 4 61 4 41 8 23 7 4 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    24,\012    24,\012    24,\012    24,\012    600,\012    0,\012    456,\012    \"-9\",\012    \"-219\",\012    1111,\012    \"-380\",\012    600,\012    0,\012    456,\012    \"-9\",\012    \"-219\",\012    1111,\012    \"-380\",\012    29,\012    29,\012    26,\012    26,\012    591,\012    0,\012    617,\012    440,\012    0,\012    \"-175\",\012    1111,\012    \"-380\",\012    601,\012    \"-10\",\012    637,\012    450,\012    \"-10\",\012    \"-175\",\012    1111,\012    \"-380\",\012    30,\012    30,\012    26,\012    26,\012    229,\012    \"-137\",\012    1111,\012    \"-380\",\012    229,\012    \"-145\",\012    1111,\012    \"-380\",\012    30,\012    30,\012    26,\012    26,\012    729,\012    363,\012    1111,\012    \"-380\",\012    729,\012    355,\012    1111,\012    \"-380\"\012)";
}
);
id = m01;
metricValues = (
{
pos = 1100;
},
{
pos = 591;
},
{
pos = 440;
},
{
},
{
pos = -380;
},
{
}
);
name = ExtraLight;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,591,l),
(57,0,l),
(470,0,l),
(470,591,l)
);
},
{
closed = 1;
nodes = (
(100,33,l),
(100,558,l),
(427,558,l),
(427,33,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 0 2 3 1 2 103 0 3 0 0 3 87 0 3 3 0 95 0 0 3 0 79 17 17 17 16 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 527;
}
);
note = .notdef;
},
{
glyphname = NULL;
layers = (
{
layerId = m01;
width = 600;
}
);
note = NULL;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 600;
}
);
note = CR;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 188;
}
);
note = space;
unicode = 32;
},
{
glyphname = A;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,0,l),
(170,18,l),
(109,27,l),
(161,212,l),
(372,212,l),
(425,27,l),
(365,18,l),
(365,0,l),
(513,0,l),
(513,17,l),
(456,25,l),
(293,593,l),
(282,601,o),
(279,601,qs),
(243,596,l),
(79,25,l),
(22,17,l),
(22,0,l)
);
},
{
closed = 1;
nodes = (
(262,570,l),
(271,570,l),
(365,239,l),
(168,239,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
15 14 11 10 7 0 6 0 1 1 76 3 1 3 74 0 3 4 3 133 5 1 4 0 1 0 4 1 103 2 1 0 0 42 0 78 18 18 18 21 18 21 18 19 19 24 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 538;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (353,0);
ref = acutecomb.case;
}
);
width = 538;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (386,0);
ref = uni0306.case;
}
);
width = 538;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = uni1EAE;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (386,0);
ref = uni0306.case;
},
{
pos = (352,99);
ref = acutecomb.case;
}
);
width = 538;
}
);
note = uni1EAE;
unicode = 7854;
},
{
glyphname = uni1EB6;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (284,0);
ref = dotbelowcomb.case;
},
{
pos = (386,0);
ref = uni0306.case;
}
);
width = 538;
}
);
note = uni1EB6;
unicode = 7862;
},
{
glyphname = uni1EB0;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (386,0);
ref = uni0306.case;
},
{
pos = (334,99);
ref = gravecomb.case;
}
);
width = 538;
}
);
note = uni1EB0;
unicode = 7856;
},
{
glyphname = uni1EB2;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (386,0);
ref = uni0306.case;
},
{
pos = (326,99);
ref = hookabovecomb.case;
}
);
width = 538;
}
);
note = uni1EB2;
unicode = 7858;
},
{
glyphname = uni1EB4;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (386,0);
ref = uni0306.case;
},
{
pos = (396,99);
ref = tildecomb.case;
}
);
width = 538;
}
);
note = uni1EB4;
unicode = 7860;
},
{
glyphname = uni01CD;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (369,0);
ref = uni030C.case;
}
);
width = 538;
}
);
note = uni01CD;
unicode = 461;
},
{
glyphname = Acircumflex;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (368,0);
ref = uni0302.case;
}
);
width = 538;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = uni1EA4;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (368,0);
ref = uni0302.case;
},
{
pos = (352,159);
ref = acutecomb.case;
}
);
width = 538;
}
);
note = uni1EA4;
unicode = 7844;
},
{
glyphname = uni1EAC;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (284,0);
ref = dotbelowcomb.case;
},
{
pos = (368,0);
ref = uni0302.case;
}
);
width = 538;
}
);
note = uni1EAC;
unicode = 7852;
},
{
glyphname = uni1EA6;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (368,0);
ref = uni0302.case;
},
{
pos = (334,159);
ref = gravecomb.case;
}
);
width = 538;
}
);
note = uni1EA6;
unicode = 7846;
},
{
glyphname = uni1EA8;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (368,0);
ref = uni0302.case;
},
{
pos = (326,159);
ref = hookabovecomb.case;
}
);
width = 538;
}
);
note = uni1EA8;
unicode = 7848;
},
{
glyphname = uni1EAA;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (368,0);
ref = uni0302.case;
},
{
pos = (396,159);
ref = tildecomb.case;
}
);
width = 538;
}
);
note = uni1EAA;
unicode = 7850;
},
{
glyphname = uni0200;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (368,0);
ref = uni030F.case;
}
);
width = 538;
}
);
note = uni0200;
unicode = 512;
},
{
glyphname = Adieresis;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (341,0);
ref = uni0308.case;
}
);
width = 538;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = uni1EA0;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (284,0);
ref = dotbelowcomb.case;
}
);
width = 538;
}
);
note = uni1EA0;
unicode = 7840;
},
{
glyphname = Agrave;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (335,0);
ref = gravecomb.case;
}
);
width = 538;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = uni1EA2;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (327,0);
ref = hookabovecomb.case;
}
);
width = 538;
}
);
note = uni1EA2;
unicode = 7842;
},
{
glyphname = uni0202;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (387,0);
ref = uni0311.case;
}
);
width = 538;
}
);
note = uni0202;
unicode = 514;
},
{
glyphname = Amacron;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (378,0);
ref = uni0304.case;
}
);
width = 538;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,593,l),
(282,601,o),
(279,601,qs),
(243,596,l),
(79,25,l),
(22,17,l),
(22,0,l),
(170,0,l),
(170,18,l),
(109,27,l),
(161,212,l),
(372,212,l),
(425,27,l),
(365,18,l),
(365,0,l),
(431,0,l),
(352,-64,o),
(323,-90,q),
(318,-108,o),
(318,-125,qs),
(318,-159,o),
(349,-213,o),
(374,-213,qs),
(384,-213,o),
(452,-204,q),
(452,-189,l),
(378,-190,ls),
(364,-190,o),
(346,-151,o),
(346,-125,qs),
(346,-115,o),
(347,-110,qs),
(348,-103,o),
(425,-27,o),
(436,-16,qs),
(453,0,l),
(513,0,l),
(513,17,l),
(456,25,l)
);
},
{
closed = 1;
nodes = (
(262,570,l),
(271,570,l),
(365,239,l),
(168,239,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
32 29 28 25 24 0 6 0 4 13 1 2 1 2 76 35 1 6 74 0 6 7 6 133 8 1 7 0 4 0 7 4 103 0 1 0 2 1 2 101 5 3 2 0 0 42 0 78 39 39 39 42 39 42 25 19 19 22 34 40 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 538;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (353,0);
ref = uni030A.case;
}
);
width = 538;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Aringacute;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (353,0);
ref = uni030A.case;
},
{
pos = (355,209);
ref = acutecomb.case;
}
);
width = 538;
}
);
note = Aringacute;
unicode = 506;
},
{
glyphname = Atilde;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (397,0);
ref = tildecomb.case;
}
);
width = 538;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(173,0,l),
(173,17,l),
(114,27,l),
(215,212,l),
(426,212,l),
(426,25,l),
(369,17,l),
(369,0,l),
(714,0,l),
(711,122,l),
(692,122,l),
(682,27,l),
(456,27,l),
(456,292,l),
(643,292,l),
(643,319,l),
(456,319,l),
(456,564,l),
(674,564,l),
(681,469,l),
(700,469,l),
(706,591,l),
(343,591,l),
(343,571,l),
(389,564,l),
(81,25,l),
(25,17,l),
(25,0,l)
);
},
{
closed = 1;
nodes = (
(415,564,l),
(426,564,l),
(426,239,l),
(230,239,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
3 1 2 0 25 21 20 0 4 7 5 2 76 2 1 2 24 1 5 2 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 1 2 3 2 1 114 0 6 8 5 5 6 114 0 3 0 4 11 3 4 103 12 1 11 0 8 6 11 8 103 10 1 2 2 0 95 0 0 0 41 77 0 5 5 7 96 9 1 7 7 42 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 1 2 3 2 1 3 128 0 6 8 5 8 6 5 128 0 3 0 4 11 3 4 103 12 1 11 0 8 6 11 8 103 10 1 2 2 0 95 0 0 0 41 77 0 5 5 7 96 9 1 7 7 42 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
28 28 28 31 28 31 30 29 27 26 19 17 17 17 17 17 17 17 20 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = AE;
unicode = 198;
},
{
glyphname = AEacute;
kernLeft = A;
layers = (
{
layerId = m01;
shapes = (
{
ref = AE;
},
{
pos = (611,0);
ref = acutecomb.case;
}
);
width = 753;
}
);
note = AEacute;
unicode = 508;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,0,ls),
(340,0,o),
(435,69,o),
(435,164,qs),
(435,221,o),
(373,294,o),
(315,304,q),
(315,309,l),
(344,321,o),
(395,385,o),
(395,447,qs),
(395,527,o),
(325,591,o),
(251,591,qs),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
},
{
closed = 1;
nodes = (
(134,564,l),
(259,564,ls),
(319,564,o),
(365,503,o),
(365,442,qs),
(365,375,o),
(298,315,o),
(248,315,qs),
(134,315,l)
);
},
{
closed = 1;
nodes = (
(134,27,l),
(134,288,l),
(277,288,ls),
(300,288,o),
(358,269,o),
(405,214,o),
(405,165,qs),
(405,90,o),
(340,27,o),
(267,27,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
3 2 2 3 0 11 1 4 2 1 0 2 1 5 3 76 6 1 2 0 4 5 2 4 103 0 3 3 0 95 0 0 0 41 77 7 1 5 5 1 95 0 1 1 42 1 78 29 29 21 20 29 38 29 37 36 34 27 25 20 28 21 28 43 36 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,-10,o),
(377,-4,o),
(378,-4,q),
(379,132,l),
(361,132,l),
(350,15,l),
(279,15,ls),
(184,15,o),
(85,152,o),
(85,301,qs),
(85,386,o),
(126,486,o),
(160,517,qs),
(190,544,o),
(240,572,o),
(254,572,qs),
(272,572,o),
(336,566,o),
(346,564,q),
(353,461,l),
(372,461,l),
(378,587,l),
(350,592,o),
(270,601,o),
(250,601,qs),
(235,601,o),
(175,567,o),
(111,510,o),
(90,475,q),
(55,404,o),
(55,280,qs),
(55,145,o),
(165,-10,o),
(272,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
11 1 2 0 14 1 1 2 30 1 5 3 3 76 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 49 77 0 3 3 5 97 6 1 5 5 50 5 78 0 0 0 33 0 32 17 39 35 19 39 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 431;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = C;
},
{
pos = (347,0);
ref = acutecomb.case;
}
);
width = 431;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = C;
},
{
pos = (363,0);
ref = uni030C.case;
}
);
width = 431;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,-10,o),
(377,-4,o),
(378,-4,q),
(379,132,l),
(361,132,l),
(350,15,l),
(279,15,ls),
(184,15,o),
(85,152,o),
(85,301,qs),
(85,386,o),
(126,486,o),
(160,517,qs),
(190,544,o),
(240,572,o),
(254,572,qs),
(272,572,o),
(336,566,o),
(346,564,q),
(353,461,l),
(372,461,l),
(378,587,l),
(350,592,o),
(270,601,o),
(250,601,qs),
(235,601,o),
(175,567,o),
(111,510,o),
(90,475,q),
(55,404,o),
(55,280,qs),
(55,154,o),
(150,2,o),
(244,-9,q),
(230,-59,l),
(235,-73,l),
(271,-76,o),
(311,-102,o),
(311,-122,qs),
(311,-143,o),
(278,-168,o),
(234,-187,q),
(241,-204,l),
(270,-193,o),
(320,-168,o),
(328,-159,qs),
(333,-152,o),
(341,-130,o),
(341,-120,qs),
(341,-97,o),
(293,-59,o),
(260,-54,q),
(264,-10,l),
(272,-10,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
31 1 2 0 34 1 1 2 50 19 2 5 3 3 76 18 11 10 1 4 5 73 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 49 77 0 3 3 5 97 0 5 5 50 5 78 53 52 49 48 47 45 38 36 33 32 29 27 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 431;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Ccircumflex;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = C;
},
{
pos = (362,0);
ref = uni0302.case;
}
);
width = 431;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = Cdotaccent;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = C;
},
{
pos = (282,0);
ref = uni0307.case;
}
);
width = 431;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,0,ls),
(353,0,o),
(457,152,o),
(457,310,qs),
(457,411,o),
(399,537,o),
(309,591,o),
(256,591,qs),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
},
{
closed = 1;
nodes = (
(134,27,l),
(134,564,l),
(262,564,ls),
(307,564,o),
(382,509,o),
(427,394,o),
(427,308,qs),
(427,155,o),
(336,27,o),
(262,27,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
3 2 2 2 0 1 0 2 1 3 2 76 0 2 2 0 95 0 0 0 41 77 4 1 3 3 1 95 0 1 1 42 1 78 14 14 14 23 14 22 38 37 36 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = D;
unicode = 68;
},
{
glyphname = uni01F1;
layers = (
{
layerId = m01;
shapes = (
{
ref = D;
},
{
pos = (512,0);
ref = Z;
}
);
width = 957;
}
);
note = uni01F1;
unicode = 497;
},
{
glyphname = uni01C4;
layers = (
{
layerId = m01;
shapes = (
{
ref = D;
},
{
pos = (512,0);
ref = Z;
},
{
pos = (837,0);
ref = uni030C.case;
}
);
width = 957;
}
);
note = uni01C4;
unicode = 452;
},
{
glyphname = Eth;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,591,l),
(47,574,l),
(104,566,l),
(104,318,l),
(45,318,l),
(45,298,l),
(104,298,l),
(104,25,l),
(47,17,l),
(47,0,l),
(256,0,ls),
(353,0,o),
(457,152,o),
(457,310,qs),
(457,411,o),
(399,537,o),
(309,591,o),
(256,591,qs)
);
},
{
closed = 1;
nodes = (
(134,27,l),
(134,298,l),
(243,298,l),
(243,318,l),
(134,318,l),
(134,564,l),
(262,564,ls),
(307,564,o),
(382,509,o),
(427,394,o),
(427,308,qs),
(427,155,o),
(336,27,o),
(262,27,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
15 14 2 4 3 9 8 2 0 7 2 76 5 1 2 6 1 1 7 2 1 103 0 4 4 3 95 8 1 3 3 41 77 9 1 7 7 0 95 0 0 0 42 0 78 18 18 0 0 18 31 18 30 29 28 27 26 25 23 0 17 0 16 17 19 37 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Dcaron;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = D;
},
{
pos = (356,0);
ref = uni030C.case;
}
);
width = 512;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = Eth;
}
);
width = 512;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = uni1E0C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = D;
},
{
pos = (275,0);
ref = dotbelowcomb.case;
}
);
width = 512;
}
);
note = uni1E0C;
unicode = 7692;
},
{
glyphname = uni01F2;
layers = (
{
layerId = m01;
shapes = (
{
ref = D;
},
{
pos = (512,0);
ref = z;
}
);
width = 871;
}
);
note = uni01F2;
unicode = 498;
},
{
glyphname = uni01C5;
layers = (
{
layerId = m01;
shapes = (
{
ref = D;
},
{
pos = (512,0);
ref = zcaron;
}
);
width = 871;
}
);
note = uni01C5;
unicode = 453;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(392,0,l),
(389,122,l),
(370,122,l),
(360,27,l),
(134,27,l),
(134,300,l),
(297,302,l),
(297,325,l),
(134,327,l),
(134,564,l),
(352,564,l),
(359,469,l),
(378,469,l),
(384,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
3 2 2 2 0 1 0 2 7 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 3 2 1 114 0 6 4 5 5 6 114 0 3 0 4 6 3 4 103 0 2 2 0 95 0 0 0 41 77 0 5 5 7 96 0 7 7 42 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 1 2 3 2 1 3 128 0 6 4 5 4 6 5 128 0 3 0 4 6 3 4 103 0 2 2 0 95 0 0 0 41 77 0 5 5 7 96 0 7 7 42 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 20 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 437;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (318,0);
ref = acutecomb.case;
}
);
width = 437;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (351,0);
ref = uni0306.case;
}
);
width = 437;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (334,0);
ref = uni030C.case;
}
);
width = 437;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (333,0);
ref = uni0302.case;
}
);
width = 437;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = uni1EBE;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (333,0);
ref = uni0302.case;
},
{
pos = (317,159);
ref = acutecomb.case;
}
);
width = 437;
}
);
note = uni1EBE;
unicode = 7870;
},
{
glyphname = uni1EC6;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (267,0);
ref = dotbelowcomb.case;
},
{
pos = (333,0);
ref = uni0302.case;
}
);
width = 437;
}
);
note = uni1EC6;
unicode = 7878;
},
{
glyphname = uni1EC0;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (333,0);
ref = uni0302.case;
},
{
pos = (299,159);
ref = gravecomb.case;
}
);
width = 437;
}
);
note = uni1EC0;
unicode = 7872;
},
{
glyphname = uni1EC2;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (333,0);
ref = uni0302.case;
},
{
pos = (291,159);
ref = hookabovecomb.case;
}
);
width = 437;
}
);
note = uni1EC2;
unicode = 7874;
},
{
glyphname = uni1EC4;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (333,0);
ref = uni0302.case;
},
{
pos = (361,159);
ref = tildecomb.case;
}
);
width = 437;
}
);
note = uni1EC4;
unicode = 7876;
},
{
glyphname = uni0204;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (333,0);
ref = uni030F.case;
}
);
width = 437;
}
);
note = uni0204;
unicode = 516;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (306,0);
ref = uni0308.case;
}
);
width = 437;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (253,0);
ref = uni0307.case;
}
);
width = 437;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = uni1EB8;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (267,0);
ref = dotbelowcomb.case;
}
);
width = 437;
}
);
note = uni1EB8;
unicode = 7864;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (300,0);
ref = gravecomb.case;
}
);
width = 437;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = uni1EBA;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (292,0);
ref = hookabovecomb.case;
}
);
width = 437;
}
);
note = uni1EBA;
unicode = 7866;
},
{
glyphname = uni0206;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (352,0);
ref = uni0311.case;
}
);
width = 437;
}
);
note = uni0206;
unicode = 518;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (343,0);
ref = uni0304.case;
}
);
width = 437;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,-103,o),
(364,-27,o),
(375,-16,qs),
(392,0,l),
(389,122,l),
(370,122,l),
(360,27,l),
(134,27,l),
(134,300,l),
(297,302,l),
(297,325,l),
(134,327,l),
(134,564,l),
(352,564,l),
(359,469,l),
(378,469,l),
(384,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l),
(370,0,l),
(291,-64,o),
(262,-90,q),
(257,-108,o),
(257,-125,qs),
(257,-159,o),
(288,-213,o),
(313,-213,qs),
(323,-213,o),
(391,-204,q),
(391,-189,l),
(317,-190,ls),
(303,-190,o),
(285,-151,o),
(285,-125,qs),
(285,-115,o),
(286,-110,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
20 19 2 5 3 18 17 2 2 8 6 1 1 0 3 76 35 1 2 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 4 5 6 5 4 114 0 9 7 8 7 9 8 128 0 6 0 7 9 6 7 103 0 0 0 1 0 1 101 0 5 5 3 95 0 3 3 41 77 0 8 8 2 95 0 2 2 42 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 5 6 5 4 6 128 0 9 7 8 7 9 8 128 0 6 0 7 9 6 7 103 0 0 0 1 0 1 101 0 5 5 3 95 0 3 3 41 77 0 8 8 2 95 0 2 2 42 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
34 33 17 17 17 17 17 21 22 34 35 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 437;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = uni1EBC;
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (362,0);
ref = tildecomb.case;
}
);
width = 437;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = F;
kernRight = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,0,l),
(209,18,l),
(134,27,l),
(134,284,l),
(283,286,l),
(283,309,l),
(134,311,l),
(134,564,l),
(344,564,l),
(351,461,l),
(370,461,l),
(376,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
3 2 2 2 0 15 14 1 0 4 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 2 3 2 1 114 0 3 0 4 5 3 4 103 0 2 2 0 95 0 0 0 41 77 0 5 5 42 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 2 3 2 1 3 128 0 3 0 4 5 3 4 103 0 2 2 0 95 0 0 0 41 77 0 5 5 42 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 17 17 17 17 20 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,-9,o),
(390,10,o),
(402,15,q),
(402,262,l),
(459,267,l),
(459,287,l),
(281,287,l),
(281,266,l),
(372,259,l),
(372,31,l),
(270,16,l),
(183,15,o),
(85,140,o),
(85,301,qs),
(85,386,o),
(126,486,o),
(160,517,qs),
(190,544,o),
(240,572,o),
(254,572,qs),
(277,572,o),
(351,564,o),
(369,560,q),
(376,461,l),
(395,461,l),
(401,583,l),
(377,588,o),
(273,601,o),
(250,601,qs),
(235,601,o),
(175,567,o),
(111,510,o),
(90,475,q),
(55,404,o),
(55,280,qs),
(55,139,o),
(163,-14,o),
(267,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
11 1 2 0 14 1 1 2 33 32 29 28 27 5 3 4 3 76 34 1 3 1 75 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 49 77 0 3 3 5 97 6 1 5 5 50 5 78 0 0 0 37 0 36 20 23 35 19 39 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 479;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = G;
},
{
pos = (383,0);
ref = uni0306.case;
}
);
width = 479;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = Gcaron;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = G;
},
{
pos = (366,0);
ref = uni030C.case;
}
);
width = 479;
}
);
note = Gcaron;
unicode = 486;
},
{
glyphname = Gcircumflex;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = G;
},
{
pos = (365,0);
ref = uni0302.case;
}
);
width = 479;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = uni0122;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = G;
},
{
pos = (282,0);
ref = uni0326.case;
}
);
width = 479;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = G;
},
{
pos = (285,0);
ref = uni0307.case;
}
);
width = 479;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,0,l),
(195,18,l),
(134,27,l),
(134,292,l),
(411,292,l),
(411,27,l),
(350,18,l),
(350,0,l),
(498,0,l),
(498,17,l),
(441,25,l),
(441,566,l),
(498,574,l),
(498,591,l),
(350,591,l),
(350,573,l),
(411,564,l),
(411,319,l),
(134,319,l),
(134,564,l),
(195,573,l),
(195,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
15 14 11 10 7 6 3 2 8 1 0 25 24 21 20 17 16 1 0 8 3 4 2 76 0 1 0 4 3 1 4 103 2 1 0 0 41 77 5 1 3 3 42 3 78 19 19 21 19 19 20 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(498,591,l),
(350,591,l),
(350,573,l),
(411,564,l),
(411,451,l),
(134,451,l),
(134,564,l),
(195,573,l),
(195,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,451,l),
(57,451,l),
(57,431,l),
(104,431,l),
(104,25,l),
(47,17,l),
(47,0,l),
(195,0,l),
(195,18,l),
(134,27,l),
(134,292,l),
(411,292,l),
(411,27,l),
(350,18,l),
(350,0,l),
(498,0,l),
(498,17,l),
(441,25,l),
(441,431,l),
(484,431,l),
(484,451,l),
(441,451,l),
(441,566,l),
(498,574,l)
);
},
{
closed = 1;
nodes = (
(134,319,l),
(134,431,l),
(411,431,l),
(411,319,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
35 32 31 28 27 24 23 0 8 0 7 18 17 14 13 10 9 6 5 8 2 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 11 0 3 2 11 3 103 9 1 7 7 41 77 10 5 2 1 1 0 95 8 6 2 0 0 44 77 4 1 2 2 42 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
8 6 2 0 10 5 2 1 11 0 1 104 0 11 0 3 2 11 3 103 9 1 7 7 41 77 4 1 2 2 42 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
39 38 37 36 34 33 19 19 17 19 19 19 19 17 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = Hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = H;
},
{
pos = (372,0);
ref = uni0302.case;
}
);
width = 545;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = uni1E24;
layers = (
{
layerId = m01;
shapes = (
{
ref = H;
},
{
pos = (293,0);
ref = dotbelowcomb.case;
}
);
width = 545;
}
);
note = uni1E24;
unicode = 7716;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,0,l),
(195,18,l),
(134,27,l),
(134,564,l),
(195,573,l),
(195,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
9 8 7 6 3 2 1 0 8 1 0 1 76 0 0 0 41 77 0 1 1 42 1 78 21 20 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (242,0);
ref = J;
}
);
width = 474;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (206,0);
ref = acutecomb.case;
}
);
width = 242;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (239,0);
ref = uni0306.case;
}
);
width = 242;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = uni01CF;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (222,0);
ref = uni030C.case;
}
);
width = 242;
}
);
note = uni01CF;
unicode = 463;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (221,0);
ref = uni0302.case;
}
);
width = 242;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = uni0208;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (221,0);
ref = uni030F.case;
}
);
width = 242;
}
);
note = uni0208;
unicode = 520;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (194,0);
ref = uni0308.case;
}
);
width = 242;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (141,0);
ref = uni0307.case;
}
);
width = 242;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = uni1ECA;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (137,0);
ref = dotbelowcomb.case;
}
);
width = 242;
}
);
note = uni1ECA;
unicode = 7882;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (188,0);
ref = gravecomb.case;
}
);
width = 242;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = uni1EC8;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (180,0);
ref = hookabovecomb.case;
}
);
width = 242;
}
);
note = uni1EC8;
unicode = 7880;
},
{
glyphname = uni020A;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (240,0);
ref = uni0311.case;
}
);
width = 242;
}
);
note = uni020A;
unicode = 522;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (231,0);
ref = uni0304.case;
}
);
width = 242;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l),
(169,0,l),
(90,-64,o),
(61,-90,q),
(56,-108,o),
(56,-125,qs),
(56,-159,o),
(87,-213,o),
(112,-213,qs),
(123,-213,o),
(190,-204,q),
(190,-189,l),
(116,-190,ls),
(102,-190,o),
(84,-151,o),
(84,-125,qs),
(84,-115,o),
(85,-110,qs),
(86,-103,o),
(163,-27,o),
(174,-16,qs),
(191,0,l),
(195,0,l),
(195,18,l),
(134,27,l),
(134,564,l),
(195,573,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
32 29 28 27 26 2 1 0 8 2 3 15 1 1 0 2 76 3 1 2 1 75 0 0 0 1 0 1 101 0 3 3 41 77 0 2 2 42 2 78 21 22 34 44 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (250,0);
ref = tildecomb.case;
}
);
width = 242;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,-115,o),
(107,-77,o),
(135,-15,o),
(135,19,qs),
(135,564,l),
(196,573,l),
(196,591,l),
(48,591,l),
(48,574,l),
(105,566,l),
(105,17,ls),
(105,-14,o),
(82,-61,o),
(55,-87,o),
(51,-87,qs),
(-15,-87,l),
(-15,-106,l),
(39,-115,o),
(51,-115,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
13 12 9 8 4 0 1 1 1 2 0 2 76 0 0 3 1 2 0 2 101 0 1 1 41 1 78 0 0 0 18 0 17 23 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 232;
}
);
note = J;
unicode = 74;
},
{
glyphname = uni00A40301;
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (206,0);
ref = acutecomb.case;
},
{
pos = (242,0);
ref = J;
},
{
pos = (448,0);
ref = acutecomb.case;
}
);
width = 474;
}
);
note = uni00A40301;
},
{
glyphname = Jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = J;
},
{
pos = (221,0);
ref = uni0302.case;
}
);
width = 232;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = K;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,0,l),
(195,18,l),
(134,27,l),
(134,564,l),
(195,573,l),
(195,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
},
{
closed = 1;
nodes = (
(482,0,l),
(482,20,l),
(426,25,l),
(330,161,l),
(225,311,l),
(407,566,l),
(463,574,l),
(463,591,l),
(315,591,l),
(315,573,l),
(371,564,l),
(195,317,l),
(195,302,l),
(304,146,ls),
(357,73,o),
(407,0,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
25 22 20 17 16 15 14 9 8 7 6 3 2 1 0 15 1 0 1 76 2 1 0 0 41 77 3 1 1 1 42 1 78 23 23 21 20 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
layers = (
{
layerId = m01;
shapes = (
{
ref = K;
},
{
pos = (275,0);
ref = uni0326.case;
}
);
width = 512;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(372,0,l),
(369,142,l),
(350,142,l),
(340,27,l),
(134,27,l),
(134,564,l),
(205,573,l),
(205,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
7 6 3 2 4 2 0 1 0 2 3 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 0 1 1 2 114 0 0 0 41 77 0 1 1 3 96 0 3 3 42 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 1 0 2 1 128 0 0 0 41 77 0 1 1 3 96 0 3 3 42 3 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 19 20 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 402;
}
);
note = L;
unicode = 76;
},
{
glyphname = uni01C7;
layers = (
{
layerId = m01;
shapes = (
{
ref = L;
},
{
pos = (402,0);
ref = J;
}
);
width = 634;
}
);
note = uni01C7;
unicode = 455;
},
{
glyphname = Lacute;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
ref = L;
},
{
pos = (206,0);
ref = acutecomb.case;
}
);
width = 402;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
ref = L;
},
{
pos = (354,8);
ref = caroncomb.alt;
}
);
width = 402;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
ref = L;
},
{
pos = (251,0);
ref = uni0326.case;
}
);
width = 402;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Ldot;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
ref = L;
},
{
pos = (312,8);
ref = periodcentered.loclCAT.case;
}
);
width = 402;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = uni01C8;
layers = (
{
layerId = m01;
shapes = (
{
ref = L;
},
{
pos = (402,0);
ref = j;
}
);
width = 567;
}
);
note = uni01C8;
unicode = 456;
},
{
glyphname = Lslash;
kernRight = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,0,l),
(372,0,l),
(369,142,l),
(350,142,l),
(340,27,l),
(134,27,l),
(134,276,l),
(293,372,l),
(294,389,l),
(285,392,l),
(134,301,l),
(134,564,l),
(205,573,l),
(205,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,283,l),
(28,237,l),
(27,221,l),
(37,218,l),
(104,258,l),
(104,25,l),
(47,17,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
16 15 14 12 11 10 7 6 5 4 3 1 12 2 0 23 0 2 3 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 0 1 1 2 114 0 0 0 41 77 0 1 1 3 96 0 3 3 42 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 1 0 2 1 128 0 0 0 41 77 0 1 1 3 96 0 3 3 42 3 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 24 24 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 402;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
kernRight = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(192,18,l),
(131,27,l),
(148,542,l),
(154,542,l),
(206,370,o),
(227,304,qs),
(309,49,l),
(319,41,o),
(323,41,qs),
(329,41,o),
(355,46,q),
(438,304,ls),
(461,375,o),
(510,542,q),
(516,542,l),
(534,27,l),
(473,18,l),
(473,0,l),
(621,0,l),
(621,17,l),
(564,25,l),
(545,566,l),
(602,574,l),
(602,591,l),
(497,591,l),
(337,68,l),
(331,68,l),
(167,591,l),
(64,591,l),
(64,574,l),
(121,566,l),
(101,25,l),
(44,17,l),
(44,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
29 18 11 10 6 3 2 7 3 0 32 31 17 16 13 12 1 0 8 2 3 2 76 0 3 0 2 0 3 2 128 1 1 0 0 41 77 4 1 2 2 42 2 78 24 40 21 19 20 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(435,-5,l),
(435,566,l),
(492,574,l),
(492,591,l),
(344,591,l),
(344,573,l),
(405,564,l),
(405,544,l),
(408,18,l),
(402,18,l),
(377,87,o),
(360,123,qs),
(143,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l),
(195,0,l),
(195,18,l),
(134,27,l),
(134,46,l),
(131,542,l),
(137,542,l),
(162,479,o),
(176,448,qs),
(385,-2,l),
(396,-10,o),
(399,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
27 26 23 22 19 14 13 12 11 8 7 4 12 0 1 1 76 28 1 0 73 2 1 1 1 41 77 0 0 0 42 0 78 24 21 25 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = N;
unicode = 78;
},
{
glyphname = uni01CA;
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (532,0);
ref = J;
}
);
width = 764;
}
);
note = uni01CA;
unicode = 458;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (353,0);
ref = acutecomb.case;
}
);
width = 532;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (369,0);
ref = uni030C.case;
}
);
width = 532;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (292,0);
ref = uni0326.case;
}
);
width = 532;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni1E44;
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (288,0);
ref = uni0307.case;
}
);
width = 532;
}
);
note = uni1E44;
unicode = 7748;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,573,l),
(405,564,l),
(405,544,l),
(408,58,l),
(402,58,l),
(385,102,o),
(367,138,qs),
(143,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l),
(195,0,l),
(195,18,l),
(134,27,l),
(134,46,l),
(131,542,l),
(137,542,l),
(170,479,o),
(185,448,qs),
(407,-14,l),
(404,-41,o),
(382,-80,o),
(357,-101,o),
(353,-101,qs),
(285,-101,l),
(285,-120,l),
(339,-129,o),
(351,-129,qs),
(367,-129,o),
(407,-92,o),
(435,-34,o),
(435,-5,qs),
(435,566,l),
(492,574,l),
(492,591,l),
(344,591,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
37 36 33 28 27 26 25 22 21 18 2 1 12 2 3 15 1 1 2 9 1 0 1 3 76 0 1 0 0 1 0 101 5 4 2 3 3 41 77 0 2 2 42 2 78 0 0 0 38 0 38 21 28 18 38 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = uni019D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,-129,o),
(106,-91,o),
(134,-29,o),
(134,5,qs),
(131,542,l),
(137,542,l),
(151,502,o),
(176,448,qs),
(385,-2,l),
(399,-10,l),
(405,-10,o),
(425,-7,o),
(435,-5,q),
(435,566,l),
(492,574,l),
(492,591,l),
(344,591,l),
(344,573,l),
(405,564,l),
(405,544,l),
(408,22,l),
(402,22,l),
(377,87,o),
(360,123,qs),
(143,591,l),
(47,591,l),
(47,574,l),
(105,565,l),
(104,3,ls),
(104,-28,o),
(84,-73,o),
(60,-97,o),
(54,-99,qs),
(39,-102,o),
(23,-102,qs),
(-15,-101,l),
(-15,-120,l),
(39,-129,o),
(51,-129,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
32 25 24 23 20 19 16 11 10 9 0 1 1 1 3 0 2 76 0 0 1 3 1 0 3 128 4 1 3 3 132 2 1 1 1 41 1 78 0 0 0 38 0 37 24 24 34 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = uni019D;
unicode = 413;
},
{
glyphname = uni01CB;
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (532,0);
ref = j;
}
);
width = 697;
}
);
note = uni01CB;
unicode = 459;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (397,0);
ref = tildecomb.case;
}
);
width = 532;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = O;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,-10,o),
(358,23,o),
(418,75,o),
(433,101,qs),
(452,139,o),
(475,247,o),
(475,305,qs),
(475,448,o),
(367,601,o),
(250,601,qs),
(235,601,o),
(175,567,o),
(111,510,o),
(90,475,q),
(55,404,o),
(55,280,qs),
(55,152,o),
(156,-10,o),
(275,-10,qs)
);
},
{
closed = 1;
nodes = (
(218,20,o),
(137,64,o),
(85,188,o),
(85,301,qs),
(85,386,o),
(126,486,o),
(160,517,qs),
(190,544,o),
(240,572,o),
(254,572,qs),
(358,572,o),
(445,427,o),
(445,295,qs),
(445,246,o),
(420,127,o),
(408,110,qs),
(386,75,o),
(300,20,o),
(273,20,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 49 77 5 1 3 3 1 97 4 1 1 1 50 1 78 19 19 0 0 19 37 19 36 28 26 0 18 0 17 39 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (356,0);
ref = acutecomb.case;
}
);
width = 530;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (389,0);
ref = uni0306.case;
}
);
width = 530;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = uni01D1;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (372,0);
ref = uni030C.case;
}
);
width = 530;
}
);
note = uni01D1;
unicode = 465;
},
{
glyphname = Ocircumflex;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (371,0);
ref = uni0302.case;
}
);
width = 530;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = uni1ED0;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (371,0);
ref = uni0302.case;
},
{
pos = (355,159);
ref = acutecomb.case;
}
);
width = 530;
}
);
note = uni1ED0;
unicode = 7888;
},
{
glyphname = uni1ED8;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (285,0);
ref = dotbelowcomb.case;
},
{
pos = (371,0);
ref = uni0302.case;
}
);
width = 530;
}
);
note = uni1ED8;
unicode = 7896;
},
{
glyphname = uni1ED2;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (371,0);
ref = uni0302.case;
},
{
pos = (337,159);
ref = gravecomb.case;
}
);
width = 530;
}
);
note = uni1ED2;
unicode = 7890;
},
{
glyphname = uni1ED4;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (371,0);
ref = uni0302.case;
},
{
pos = (329,159);
ref = hookabovecomb.case;
}
);
width = 530;
}
);
note = uni1ED4;
unicode = 7892;
},
{
glyphname = uni1ED6;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (371,0);
ref = uni0302.case;
},
{
pos = (399,159);
ref = tildecomb.case;
}
);
width = 530;
}
);
note = uni1ED6;
unicode = 7894;
},
{
glyphname = uni020C;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (371,0);
ref = uni030F.case;
}
);
width = 530;
}
);
note = uni020C;
unicode = 524;
},
{
glyphname = Odieresis;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (344,0);
ref = uni0308.case;
}
);
width = 530;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = uni022A;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (344,0);
ref = uni0308.case;
},
{
pos = (383,124);
ref = uni0304.case;
}
);
width = 530;
}
);
note = uni022A;
unicode = 554;
},
{
glyphname = uni0230;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (291,0);
ref = uni0307.case;
},
{
pos = (383,124);
ref = uni0304.case;
}
);
width = 530;
}
);
note = uni0230;
unicode = 560;
},
{
glyphname = uni1ECC;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (285,0);
ref = dotbelowcomb.case;
}
);
width = 530;
}
);
note = uni1ECC;
unicode = 7884;
},
{
glyphname = Ograve;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (338,0);
ref = gravecomb.case;
}
);
width = 530;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = uni1ECE;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (330,0);
ref = hookabovecomb.case;
}
);
width = 530;
}
);
note = uni1ECE;
unicode = 7886;
},
{
glyphname = Ohorn;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(385,590,o),
(434,641,o),
(441,680,q),
(420,688,l),
(413,645,o),
(357,593,o),
(325,591,q),
(294,601,o),
(250,601,qs),
(235,601,o),
(175,567,o),
(111,510,o),
(90,475,q),
(55,404,o),
(55,280,qs),
(55,152,o),
(156,-10,o),
(275,-10,qs),
(294,-10,o),
(358,23,o),
(418,75,o),
(433,101,qs),
(452,139,o),
(475,247,o),
(475,305,qs),
(475,524,o),
(353,581,q)
);
},
{
closed = 1;
nodes = (
(386,75,o),
(300,20,o),
(273,20,qs),
(218,20,o),
(137,64,o),
(85,188,o),
(85,301,qs),
(85,386,o),
(126,486,o),
(160,517,qs),
(190,544,o),
(240,572,o),
(254,572,qs),
(358,572,o),
(445,427,o),
(445,295,qs),
(445,246,o),
(420,127,o),
(408,110,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
26 1 3 2 1 76 23 22 2 1 74 0 2 2 41 77 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 0 0 0 50 0 78 40 43 17 39 39 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = Ohorn;
unicode = 416;
},
{
glyphname = uni1EDA;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = Ohorn;
},
{
pos = (356,0);
ref = acutecomb.case;
}
);
width = 530;
}
);
note = uni1EDA;
unicode = 7898;
},
{
glyphname = uni1EE2;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = Ohorn;
},
{
pos = (285,0);
ref = dotbelowcomb.case;
}
);
width = 530;
}
);
note = uni1EE2;
unicode = 7906;
},
{
glyphname = uni1EDC;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = Ohorn;
},
{
pos = (338,0);
ref = gravecomb.case;
}
);
width = 530;
}
);
note = uni1EDC;
unicode = 7900;
},
{
glyphname = uni1EDE;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = Ohorn;
},
{
pos = (330,0);
ref = hookabovecomb.case;
}
);
width = 530;
}
);
note = uni1EDE;
unicode = 7902;
},
{
glyphname = uni1EE0;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = Ohorn;
},
{
pos = (400,0);
ref = tildecomb.case;
}
);
width = 530;
}
);
note = uni1EE0;
unicode = 7904;
},
{
glyphname = Ohungarumlaut;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (407,0);
ref = uni030B.case;
}
);
width = 530;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = uni020E;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (390,0);
ref = uni0311.case;
}
);
width = 530;
}
);
note = uni020E;
unicode = 526;
},
{
glyphname = Omacron;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (381,0);
ref = uni0304.case;
}
);
width = 530;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = uni01EA;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,601,o),
(175,567,o),
(111,510,o),
(90,475,q),
(55,404,o),
(55,280,qs),
(55,152,o),
(156,-10,o),
(275,-10,qs),
(278,-10,l),
(216,-59,o),
(182,-90,q),
(177,-108,o),
(177,-125,qs),
(177,-159,o),
(208,-213,o),
(233,-213,qs),
(244,-213,o),
(311,-204,q),
(311,-189,l),
(237,-190,ls),
(223,-190,o),
(205,-151,o),
(205,-125,qs),
(205,-115,o),
(206,-110,qs),
(207,-103,o),
(283,-28,o),
(294,-17,qs),
(311,-1,l),
(345,14,o),
(417,72,o),
(433,101,qs),
(452,139,o),
(475,247,o),
(475,305,qs),
(475,448,o),
(367,601,o),
(250,601,qs)
);
},
{
closed = 1;
nodes = (
(386,75,o),
(300,20,o),
(273,20,qs),
(218,20,o),
(137,64,o),
(85,188,o),
(85,301,qs),
(85,386,o),
(126,486,o),
(160,517,qs),
(190,544,o),
(240,572,o),
(254,572,qs),
(358,572,o),
(445,427,o),
(445,295,qs),
(445,246,o),
(420,127,o),
(408,110,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
19 1 1 0 1 76 0 0 0 1 0 1 101 0 4 4 3 97 6 1 3 3 49 77 0 5 5 2 97 0 2 2 50 2 78 0 0 55 53 45 43 0 38 0 37 30 28 22 20 18 16 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = uni01EA;
unicode = 490;
},
{
glyphname = Oslash;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(451,656,l),
(450,669,l),
(429,675,l),
(375,569,l),
(325,601,o),
(250,601,qs),
(235,601,o),
(175,567,o),
(111,510,o),
(90,475,q),
(55,404,o),
(55,280,qs),
(55,132,o),
(114,60,q),
(59,-48,l),
(64,-58,l),
(83,-62,l),
(134,38,l),
(188,-10,o),
(275,-10,qs),
(294,-10,o),
(358,23,o),
(418,75,o),
(433,101,qs),
(452,139,o),
(475,247,o),
(475,305,qs),
(475,480,o),
(397,551,q)
);
},
{
closed = 1;
nodes = (
(85,386,o),
(126,486,o),
(160,517,qs),
(190,544,o),
(240,572,o),
(254,572,qs),
(318,572,o),
(361,542,q),
(129,89,l),
(85,157,o),
(85,301,qs)
);
},
{
closed = 1;
nodes = (
(386,75,o),
(300,20,o),
(273,20,qs),
(192,20,o),
(148,65,q),
(383,523,l),
(445,458,o),
(445,295,qs),
(445,246,o),
(420,127,o),
(408,110,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
45 44 31 30 28 24 14 10 8 3 2 1 76 27 25 2 1 74 13 11 2 0 73 0 2 2 1 97 0 1 1 49 77 0 3 3 0 97 0 0 0 50 0 78 44 41 44 39 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Oslashacute;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = Oslash;
},
{
pos = (356,0);
ref = acutecomb.case;
}
);
width = 530;
}
);
note = Oslashacute;
unicode = 510;
},
{
glyphname = Otilde;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (400,0);
ref = tildecomb.case;
}
);
width = 530;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = uni022C;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (400,0);
ref = tildecomb.case;
},
{
pos = (385,139);
ref = uni0304.case;
}
);
width = 530;
}
);
note = uni022C;
unicode = 556;
},
{
glyphname = OE;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(655,122,l),
(645,27,l),
(419,27,l),
(419,292,l),
(606,292,l),
(606,319,l),
(419,319,l),
(419,564,l),
(637,564,l),
(644,469,l),
(663,469,l),
(669,591,l),
(250,591,ls),
(235,591,o),
(175,557,o),
(112,499,o),
(90,465,q),
(72,428,o),
(55,343,o),
(55,285,qs),
(55,149,o),
(166,0,o),
(275,0,qs),
(677,0,l),
(674,122,l)
);
},
{
closed = 1;
nodes = (
(230,25,o),
(140,69,o),
(85,193,o),
(85,307,qs),
(85,387,o),
(125,476,o),
(160,508,qs),
(190,535,o),
(239,562,o),
(254,562,qs),
(336,562,o),
(389,556,q),
(389,30,l),
(353,25,o),
(294,25,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
27 1 2 3 26 1 6 7 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 2 3 4 3 2 114 0 7 5 6 6 7 114 0 4 0 5 7 4 5 103 8 1 3 3 1 95 0 1 1 41 77 10 9 2 6 6 0 96 0 0 0 42 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 2 3 4 3 2 4 128 0 7 5 6 5 7 6 128 0 4 0 5 7 4 5 103 8 1 3 3 1 95 0 1 1 41 77 10 9 2 6 6 0 96 0 0 0 42 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
25 25 25 39 25 38 36 17 17 17 17 17 17 40 32 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 722;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
kernRight = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,0,l),
(209,18,l),
(134,27,l),
(134,236,l),
(270,236,ls),
(344,236,o),
(425,344,o),
(425,423,qs),
(425,520,o),
(344,591,o),
(273,591,qs),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
},
{
closed = 1;
nodes = (
(134,564,l),
(282,564,ls),
(342,564,o),
(395,500,o),
(395,422,qs),
(395,344,o),
(328,263,o),
(280,263,qs),
(134,263,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
3 2 2 4 0 14 13 1 0 4 2 1 2 76 5 1 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 41 77 0 2 2 42 2 78 18 17 24 22 17 25 18 25 19 36 36 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 465;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,466,l),
(134,564,l),
(195,573,l),
(195,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l),
(195,0,l),
(195,18,l),
(134,27,l),
(134,147,l),
(235,147,ls),
(310,147,o),
(390,243,o),
(390,316,qs),
(390,380,o),
(350,445,o),
(286,466,o),
(238,466,qs)
);
},
{
closed = 1;
nodes = (
(134,174,l),
(134,439,l),
(247,439,ls),
(308,439,o),
(360,387,o),
(360,315,qs),
(360,228,o),
(285,174,o),
(245,174,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
19 18 15 14 4 3 2 13 12 9 8 4 1 0 2 76 6 1 3 0 4 5 3 4 104 7 1 5 0 0 1 5 0 103 0 2 2 41 77 0 1 1 42 1 78 22 22 0 0 22 30 22 29 28 26 0 21 0 20 21 19 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 420;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,16,o),
(416,72,o),
(433,101,qs),
(452,139,o),
(475,247,o),
(475,305,qs),
(475,448,o),
(367,601,o),
(250,601,qs),
(235,601,o),
(175,567,o),
(111,510,o),
(90,475,q),
(55,404,o),
(55,280,qs),
(55,152,o),
(156,-10,o),
(275,-10,qs),
(281,-10,o),
(284,-9,q),
(283,-10,l),
(458,-101,l),
(473,-101,l),
(483,-78,l),
(315,1,l)
);
},
{
closed = 1;
nodes = (
(218,20,o),
(137,64,o),
(85,188,o),
(85,301,qs),
(85,386,o),
(126,486,o),
(160,517,qs),
(190,544,o),
(240,572,o),
(254,572,qs),
(358,572,o),
(445,427,o),
(445,295,qs),
(445,246,o),
(420,127,o),
(408,110,qs),
(386,75,o),
(300,20,o),
(273,20,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
24 1 1 4 1 76 0 0 1 0 134 0 3 3 2 97 0 2 2 49 77 5 1 4 4 1 97 0 1 1 50 1 78 25 25 25 43 25 42 34 32 39 65 17 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,0,l),
(195,18,l),
(134,27,l),
(134,260,l),
(256,260,l),
(397,0,l),
(473,0,l),
(473,20,l),
(418,25,l),
(393,67,o),
(321,199,o),
(288,262,q),
(288,265,l),
(349,275,o),
(415,367,o),
(415,429,qs),
(415,523,o),
(334,591,o),
(263,591,qs),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l)
);
},
{
closed = 1;
nodes = (
(134,564,l),
(272,564,ls),
(331,564,o),
(385,502,o),
(385,428,qs),
(385,372,o),
(343,309,o),
(290,287,o),
(270,287,qs),
(134,287,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
3 2 2 5 0 11 1 2 4 22 21 16 1 0 5 1 2 3 76 6 1 4 0 2 1 4 2 103 0 5 5 0 95 0 0 0 41 77 3 1 1 1 42 1 78 26 25 33 31 25 34 26 34 19 17 27 36 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 503;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
ref = R;
},
{
pos = (323,0);
ref = acutecomb.case;
}
);
width = 503;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = R;
},
{
pos = (339,0);
ref = uni030C.case;
}
);
width = 503;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
ref = R;
},
{
pos = (280,0);
ref = uni0326.case;
}
);
width = 503;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0210;
layers = (
{
layerId = m01;
shapes = (
{
ref = R;
},
{
pos = (338,0);
ref = uni030F.case;
}
);
width = 503;
}
);
note = uni0210;
unicode = 528;
},
{
glyphname = uni1E5A;
layers = (
{
layerId = m01;
shapes = (
{
ref = R;
},
{
pos = (278,0);
ref = dotbelowcomb.case;
}
);
width = 503;
}
);
note = uni1E5A;
unicode = 7770;
},
{
glyphname = uni0212;
layers = (
{
layerId = m01;
shapes = (
{
ref = R;
},
{
pos = (357,0);
ref = uni0311.case;
}
);
width = 503;
}
);
note = uni0212;
unicode = 530;
},
{
glyphname = S;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,-10,o),
(345,62,o),
(359,106,qs),
(363,121,o),
(363,151,qs),
(363,186,o),
(328,239,o),
(276,276,o),
(234,299,qs),
(203,317,ls),
(154,346,o),
(107,384,o),
(87,430,o),
(87,467,qs),
(87,492,o),
(125,541,o),
(173,574,o),
(183,574,qs),
(198,574,o),
(285,564,o),
(306,559,q),
(313,461,l),
(332,461,l),
(338,583,l),
(311,588,o),
(206,601,o),
(187,601,qs),
(170,601,o),
(120,572,o),
(75,525,o),
(63,500,q),
(57,476,o),
(57,454,qs),
(57,415,o),
(93,357,o),
(147,317,o),
(196,288,qs),
(214,276,o),
(227,270,q),
(268,246,o),
(309,216,o),
(333,169,o),
(333,133,qs),
(333,108,o),
(301,54,o),
(257,18,o),
(242,18,qs),
(217,18,o),
(114,26,o),
(87,30,q),
(76,128,l),
(57,128,l),
(56,6,l),
(88,1,o),
(217,-10,o),
(238,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
31 1 4 2 2 1 5 1 2 76 0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 49 77 0 1 1 5 97 6 1 5 5 50 5 78 0 0 0 55 0 54 38 36 33 32 29 27 35 19 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 405;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (303,0);
ref = acutecomb.case;
}
);
width = 405;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (319,0);
ref = uni030C.case;
}
);
width = 405;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,346,o),
(107,384,o),
(87,430,o),
(87,467,qs),
(87,492,o),
(125,541,o),
(173,574,o),
(183,574,qs),
(198,574,o),
(285,564,o),
(306,559,q),
(313,461,l),
(332,461,l),
(338,583,l),
(311,588,o),
(206,601,o),
(187,601,qs),
(170,601,o),
(120,572,o),
(75,525,o),
(63,500,q),
(57,476,o),
(57,454,qs),
(57,415,o),
(93,357,o),
(147,317,o),
(196,288,qs),
(214,276,o),
(227,270,q),
(268,246,o),
(309,216,o),
(333,169,o),
(333,133,qs),
(333,108,o),
(301,54,o),
(257,18,o),
(242,18,qs),
(217,18,o),
(114,26,o),
(87,30,q),
(76,128,l),
(57,128,l),
(56,6,l),
(105,-2,o),
(195,-8,q),
(181,-59,l),
(186,-73,l),
(222,-76,o),
(262,-102,o),
(262,-122,qs),
(262,-143,o),
(229,-168,o),
(185,-187,q),
(192,-204,l),
(221,-193,o),
(271,-168,o),
(279,-159,qs),
(284,-152,o),
(292,-130,o),
(292,-120,qs),
(292,-97,o),
(244,-59,o),
(211,-54,q),
(215,-9,l),
(225,-10,o),
(238,-10,qs),
(272,-10,o),
(345,62,o),
(359,106,qs),
(363,121,o),
(363,151,qs),
(363,186,o),
(328,239,o),
(276,276,o),
(234,299,qs),
(203,317,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
61 1 6 4 32 1 1 3 2 76 29 22 21 12 4 0 73 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
61 1 6 4 32 1 0 3 2 76 29 22 21 12 4 0 73 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
61 1 6 4 32 1 1 3 2 76 29 22 21 12 4 0 73 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 6 6 4 97 0 4 4 49 77 0 1 1 42 77 0 3 3 0 97 0 0 0 50 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 6 6 4 97 0 4 4 49 77 0 3 3 0 97 1 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 6 2 6 5 2 128 0 2 3 6 2 3 126 0 6 6 4 97 0 4 4 49 77 0 1 1 42 77 0 3 3 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
68 66 63 62 59 57 39 37 34 33 31 30 40 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 405;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = Scircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (318,0);
ref = uni0302.case;
}
);
width = 405;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (227,0);
ref = uni0326.case;
}
);
width = 405;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E62;
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (225,0);
ref = dotbelowcomb;
}
);
width = 405;
}
);
note = uni1E62;
unicode = 7778;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,326,l),
(456,575,l),
(442,591,l),
(47,591,l),
(47,574,l),
(104,566,l),
(104,25,l),
(47,17,l),
(47,0,l),
(134,0,l),
(134,564,l),
(418,571,l),
(249,316,l),
(264,298,l),
(366,298,ls),
(410,298,o),
(461,251,o),
(461,209,qs),
(461,158,o),
(405,48,o),
(366,24,qs),
(358,18,o),
(323,18,qs),
(305,18,o),
(235,23,q),
(224,144,l),
(206,144,l),
(202,8,l),
(230,3,ls),
(239,2,o),
(310,-9,o),
(326,-9,qs),
(369,-9,o),
(444,60,o),
(490,162,o),
(490,208,qs),
(490,269,o),
(413,321,o),
(335,321,qs),
(321,321,o),
(283,319,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
38 35 2 5 7 34 1 0 5 27 1 4 0 33 1 3 2 32 12 2 6 3 5 76 0 2 4 3 4 2 3 128 8 1 0 0 4 2 0 4 103 0 5 5 7 95 0 7 7 41 77 0 6 6 42 77 0 3 3 1 97 0 1 1 50 1 78 2 0 37 36 31 30 29 28 26 24 18 16 14 13 9 7 0 40 2 40 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 493;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = uni018F;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,601,o),
(126,593,o),
(77,585,q),
(86,449,l),
(105,449,l),
(110,560,l),
(208,576,o),
(245,576,qs),
(357,576,o),
(454,434,o),
(455,302,q),
(65,273,l),
(67,141,o),
(176,-10,o),
(281,-10,qs),
(319,-10,o),
(418,60,o),
(444,101,q),
(463,138,o),
(485,247,o),
(485,305,qs),
(485,445,o),
(373,601,o),
(265,601,qs)
);
},
{
closed = 1;
nodes = (
(396,74,o),
(311,20,o),
(284,20,qs),
(204,20,o),
(106,118,o),
(97,252,q),
(455,281,l),
(454,228,o),
(431,128,o),
(419,110,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
20 1 1 3 17 1 2 1 27 26 12 11 4 4 2 3 76 0 2 1 4 1 2 4 128 0 1 1 3 97 5 1 3 3 49 77 0 4 4 0 97 0 0 0 50 0 78 0 0 31 29 0 23 0 22 18 37 39 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = T;
kernRight = T;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,0,l),
(294,18,l),
(227,27,l),
(227,564,l),
(367,564,l),
(374,451,l),
(393,451,l),
(399,591,l),
(25,591,l),
(31,451,l),
(50,451,l),
(57,564,l),
(197,564,l),
(197,25,l),
(130,17,l),
(130,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
13 12 1 0 4 5 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
3 1 1 0 5 0 1 114 4 1 0 0 2 95 0 2 2 41 77 0 5 5 42 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 0 5 0 1 5 128 4 1 0 0 2 95 0 2 2 41 77 0 5 5 42 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 17 17 17 17 18 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 424;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tbar;
kernRight = T;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,451,l),
(50,451,l),
(57,564,l),
(197,564,l),
(197,318,l),
(113,318,l),
(113,298,l),
(197,298,l),
(197,25,l),
(130,17,l),
(130,0,l),
(294,0,l),
(294,18,l),
(227,27,l),
(227,298,l),
(311,298,l),
(311,318,l),
(227,318,l),
(227,564,l),
(367,564,l),
(374,451,l),
(393,451,l),
(399,591,l),
(25,591,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
14 13 10 9 4 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
8 1 0 1 2 1 0 114 6 1 2 5 1 3 4 2 3 103 7 1 1 1 9 95 10 1 9 9 41 77 0 4 4 42 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 0 1 2 1 0 2 128 6 1 2 5 1 3 4 2 3 103 7 1 1 1 9 95 10 1 9 9 41 77 0 4 4 42 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 23 0 23 17 17 17 19 19 17 17 17 17 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 424;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = Tcaron;
kernRight = T;
layers = (
{
layerId = m01;
shapes = (
{
ref = T;
},
{
pos = (314,0);
ref = uni030C.case;
}
);
width = 424;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni0162;
kernRight = T;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,451,l),
(50,451,l),
(57,564,l),
(197,564,l),
(197,25,l),
(130,17,l),
(130,0,l),
(203,0,l),
(187,-59,l),
(192,-73,l),
(228,-76,o),
(268,-102,o),
(268,-122,qs),
(268,-143,o),
(235,-168,o),
(191,-187,q),
(198,-204,l),
(227,-193,o),
(277,-168,o),
(285,-159,qs),
(290,-152,o),
(298,-130,o),
(298,-120,qs),
(298,-97,o),
(250,-59,o),
(217,-54,q),
(221,0,l),
(294,0,l),
(294,18,l),
(227,27,l),
(227,564,l),
(367,564,l),
(374,451,l),
(393,451,l),
(399,591,l),
(25,591,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
30 29 6 5 4 2 0 1 76 26 19 18 3 2 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 0 1 2 1 0 114 4 1 1 1 6 95 7 1 6 6 41 77 3 1 2 2 42 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
5 1 0 1 2 1 0 2 128 4 1 1 1 6 95 7 1 6 6 41 77 3 1 2 2 42 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 35 0 35 34 33 32 31 28 27 19 17 17 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 424;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni021A;
kernRight = T;
layers = (
{
layerId = m01;
shapes = (
{
ref = T;
},
{
pos = (233,0);
ref = uni0326.case;
}
);
width = 424;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni1E6C;
kernRight = T;
layers = (
{
layerId = m01;
shapes = (
{
ref = T;
},
{
pos = (231,0);
ref = dotbelowcomb.case;
}
);
width = 424;
}
);
note = uni1E6C;
unicode = 7788;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,-10,o),
(287,7,o),
(362,33,o),
(370,36,qs),
(394,45,l),
(402,0,l),
(481,0,l),
(481,17,l),
(424,25,l),
(424,566,l),
(481,574,l),
(481,591,l),
(333,591,l),
(333,573,l),
(394,564,l),
(394,71,l),
(326,46,o),
(237,19,o),
(206,19,qs),
(166,19,o),
(127,71,o),
(127,128,qs),
(127,564,l),
(188,573,l),
(188,591,l),
(40,591,l),
(40,574,l),
(97,566,l),
(97,136,ls),
(97,58,o),
(152,-10,o),
(213,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
26 22 21 20 17 16 15 8 7 4 3 11 1 0 23 1 3 1 2 76 2 1 0 0 41 77 0 3 3 42 77 0 1 1 4 97 5 1 4 4 50 4 78 0 0 0 31 0 30 21 21 37 21 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (343,0);
ref = acutecomb.case;
}
);
width = 528;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (376,0);
ref = uni0306.case;
}
);
width = 528;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = uni01D3;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (359,0);
ref = uni030C.case;
}
);
width = 528;
}
);
note = uni01D3;
unicode = 467;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (358,0);
ref = uni0302.case;
}
);
width = 528;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = uni0214;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (358,0);
ref = uni030F.case;
}
);
width = 528;
}
);
note = uni0214;
unicode = 532;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (331,0);
ref = uni0308.case;
}
);
width = 528;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = uni01D7;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (331,0);
ref = uni0308.case;
},
{
pos = (345,124);
ref = acutecomb.case;
}
);
width = 528;
}
);
note = uni01D7;
unicode = 471;
},
{
glyphname = uni01D9;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (331,0);
ref = uni0308.case;
},
{
pos = (361,124);
ref = uni030C.case;
}
);
width = 528;
}
);
note = uni01D9;
unicode = 473;
},
{
glyphname = uni01DB;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (331,0);
ref = uni0308.case;
},
{
pos = (327,124);
ref = gravecomb.case;
}
);
width = 528;
}
);
note = uni01DB;
unicode = 475;
},
{
glyphname = uni01D5;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (331,0);
ref = uni0308.case;
},
{
pos = (370,124);
ref = uni0304.case;
}
);
width = 528;
}
);
note = uni01D5;
unicode = 469;
},
{
glyphname = uni1EE4;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (298,0);
ref = dotbelowcomb.case;
}
);
width = 528;
}
);
note = uni1EE4;
unicode = 7908;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (325,0);
ref = gravecomb.case;
}
);
width = 528;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = uni1EE6;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (317,0);
ref = hookabovecomb.case;
}
);
width = 528;
}
);
note = uni1EE6;
unicode = 7910;
},
{
glyphname = Uhorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,688,l),
(513,644,o),
(453,591,o),
(421,591,qs),
(333,591,l),
(333,571,l),
(394,564,l),
(394,71,l),
(326,46,o),
(237,19,o),
(206,19,qs),
(166,19,o),
(127,71,o),
(127,128,qs),
(127,564,l),
(188,571,l),
(188,591,l),
(40,591,l),
(40,571,l),
(97,566,l),
(97,136,ls),
(97,58,o),
(152,-10,o),
(213,-10,qs),
(226,-10,o),
(287,7,o),
(362,33,o),
(370,36,qs),
(394,45,l),
(402,0,l),
(481,0,l),
(481,20,l),
(424,25,l),
(424,576,l),
(463,576,o),
(533,631,o),
(541,680,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
30 29 28 21 20 17 16 7 4 3 10 4 0 1 76 36 35 2 3 74 0 0 0 3 95 5 1 3 3 41 77 0 1 1 42 77 0 4 4 2 97 0 2 2 50 2 78 37 37 21 37 19 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = Uhorn;
unicode = 431;
},
{
glyphname = uni1EE8;
layers = (
{
layerId = m01;
shapes = (
{
ref = Uhorn;
},
{
pos = (343,0);
ref = acutecomb.case;
}
);
width = 528;
}
);
note = uni1EE8;
unicode = 7912;
},
{
glyphname = uni1EF0;
layers = (
{
layerId = m01;
shapes = (
{
ref = Uhorn;
},
{
pos = (287,0);
ref = dotbelowcomb.case;
}
);
width = 528;
}
);
note = uni1EF0;
unicode = 7920;
},
{
glyphname = uni1EEA;
layers = (
{
layerId = m01;
shapes = (
{
ref = Uhorn;
},
{
pos = (325,0);
ref = gravecomb.case;
}
);
width = 528;
}
);
note = uni1EEA;
unicode = 7914;
},
{
glyphname = uni1EEC;
layers = (
{
layerId = m01;
shapes = (
{
ref = Uhorn;
},
{
pos = (317,0);
ref = hookabovecomb.case;
}
);
width = 528;
}
);
note = uni1EEC;
unicode = 7916;
},
{
glyphname = uni1EEE;
layers = (
{
layerId = m01;
shapes = (
{
ref = Uhorn;
},
{
pos = (387,0);
ref = tildecomb.case;
}
);
width = 528;
}
);
note = uni1EEE;
unicode = 7918;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (394,0);
ref = uni030B.case;
}
);
width = 528;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uni0216;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (377,0);
ref = uni0311.case;
}
);
width = 528;
}
);
note = uni0216;
unicode = 534;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (368,0);
ref = uni0304.case;
}
);
width = 528;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,591,l),
(333,591,l),
(333,573,l),
(394,564,l),
(394,71,l),
(326,46,o),
(237,19,o),
(206,19,qs),
(166,19,o),
(127,71,o),
(127,128,qs),
(127,564,l),
(188,573,l),
(188,591,l),
(40,591,l),
(40,574,l),
(97,566,l),
(97,136,ls),
(97,58,o),
(152,-10,o),
(213,-10,qs),
(226,-10,o),
(287,7,o),
(362,33,o),
(370,36,qs),
(394,45,l),
(402,0,l),
(459,0,l),
(380,-64,o),
(351,-90,q),
(346,-108,o),
(346,-125,qs),
(346,-159,o),
(377,-213,o),
(402,-213,qs),
(413,-213,o),
(480,-204,q),
(480,-189,l),
(406,-190,ls),
(392,-190,o),
(374,-151,o),
(374,-125,qs),
(374,-115,o),
(375,-110,qs),
(376,-103,o),
(453,-27,o),
(464,-16,qs),
(481,0,l),
(481,17,l),
(424,25,l),
(424,566,l),
(481,574,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
51 48 47 46 39 38 35 34 25 1 0 11 5 4 2 1 2 5 14 1 1 0 3 76 3 1 2 1 75 0 0 0 1 0 1 101 6 1 4 4 41 77 0 2 2 42 77 0 5 5 3 97 0 3 3 50 3 78 21 37 21 37 22 34 43 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (343,0);
ref = uni030A.case;
}
);
width = 528;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (387,0);
ref = tildecomb.case;
}
);
width = 528;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(275,-5,l),
(424,566,l),
(481,574,l),
(481,591,l),
(333,591,l),
(333,573,l),
(395,564,l),
(325,293,ls),
(279,111,o),
(255,21,q),
(247,21,l),
(200,208,l),
(108,564,l),
(168,573,l),
(168,591,l),
(20,591,l),
(20,574,l),
(77,566,l),
(225,-2,l),
(236,-10,o),
(239,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
20 17 14 13 9 7 6 3 8 0 73 1 1 0 0 41 0 78 26 20 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 503;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,-5,l),
(366,388,l),
(372,388,l),
(467,-2,l),
(478,-10,o),
(481,-10,qs),
(517,-5,l),
(661,566,l),
(718,573,l),
(718,591,l),
(563,591,l),
(563,574,l),
(632,564,l),
(497,21,l),
(489,21,l),
(435,243,l),
(355,564,l),
(425,573,l),
(425,591,l),
(276,591,l),
(276,574,l),
(324,566,l),
(356,444,l),
(250,21,l),
(242,21,l),
(188,243,l),
(108,564,l),
(163,573,l),
(163,591,l),
(20,591,l),
(20,574,l),
(77,566,l),
(220,-2,l),
(231,-10,o),
(234,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
34 31 28 25 22 21 19 17 16 13 11 9 7 6 3 15 0 73 2 1 2 0 0 41 0 78 24 25 20 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
ref = W;
},
{
pos = (455,0);
ref = acutecomb.case;
}
);
width = 740;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
ref = W;
},
{
pos = (470,0);
ref = uni0302.case;
}
);
width = 740;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
ref = W;
},
{
pos = (443,0);
ref = uni0308.case;
}
);
width = 740;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
kernLeft = W;
kernRight = W;
layers = (
{
layerId = m01;
shapes = (
{
ref = W;
},
{
pos = (437,0);
ref = gravecomb.case;
}
);
width = 740;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,0,l),
(169,18,l),
(105,27,l),
(270,291,l),
(272,291,l),
(436,27,l),
(374,18,l),
(374,0,l),
(527,0,l),
(527,17,l),
(472,25,l),
(288,319,l),
(443,566,l),
(502,574,l),
(502,591,l),
(349,591,l),
(349,573,l),
(410,564,l),
(274,345,l),
(272,345,l),
(136,564,l),
(194,573,l),
(194,591,l),
(41,591,l),
(41,574,l),
(100,566,l),
(255,318,l),
(72,25,l),
(16,17,l),
(16,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
27 26 24 23 22 19 17 15 12 11 9 8 7 4 2 0 16 2 0 1 76 1 1 0 0 41 77 3 1 2 2 42 2 78 23 22 23 21 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,0,l),
(327,18,l),
(266,27,l),
(266,239,l),
(426,566,l),
(482,574,l),
(482,591,l),
(334,591,l),
(334,573,l),
(395,564,l),
(256,273,l),
(249,273,l),
(110,564,l),
(169,573,l),
(169,591,l),
(21,591,l),
(21,574,l),
(77,566,l),
(236,239,l),
(236,25,l),
(179,17,l),
(179,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
19 18 17 15 12 11 9 8 7 4 2 1 0 13 2 0 1 76 1 1 0 0 41 77 0 2 2 42 2 78 22 23 21 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 503;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (341,0);
ref = acutecomb.case;
}
);
width = 503;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (356,0);
ref = uni0302.case;
}
);
width = 503;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (329,0);
ref = uni0308.case;
}
);
width = 503;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = uni1EF4;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (270,0);
ref = dotbelowcomb.case;
}
);
width = 503;
}
);
note = uni1EF4;
unicode = 7924;
},
{
glyphname = Ygrave;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (323,0);
ref = gravecomb.case;
}
);
width = 503;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = uni1EF6;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (315,0);
ref = hookabovecomb.case;
}
);
width = 503;
}
);
note = uni1EF6;
unicode = 7926;
},
{
glyphname = uni0232;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (366,0);
ref = uni0304.case;
}
);
width = 503;
}
);
note = uni0232;
unicode = 562;
},
{
glyphname = uni1EF8;
kernLeft = Y;
kernRight = Y;
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (385,0);
ref = tildecomb.case;
}
);
width = 503;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,0,l),
(392,122,l),
(373,122,l),
(363,27,l),
(87,27,l),
(384,571,l),
(384,591,l),
(64,591,l),
(70,469,l),
(89,469,l),
(96,564,l),
(345,564,l),
(50,20,l),
(50,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
7 1 0 2 0 1 5 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 4 0 1 114 0 4 3 3 4 112 0 0 0 2 95 0 2 2 41 77 0 3 3 5 96 0 5 5 42 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 0 1 4 128 0 4 3 0 4 3 126 0 0 0 2 95 0 2 2 41 77 0 3 3 5 96 0 5 5 42 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 18 17 17 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 445;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = Z;
},
{
pos = (309,0);
ref = acutecomb.case;
}
);
width = 445;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = Z;
},
{
pos = (325,0);
ref = uni030C.case;
}
);
width = 445;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
ref = Z;
},
{
pos = (244,0);
ref = uni0307.case;
}
);
width = 445;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = uni1E92;
layers = (
{
layerId = m01;
shapes = (
{
ref = Z;
},
{
pos = (242,0);
ref = dotbelowcomb.case;
}
);
width = 445;
}
);
note = uni1E92;
unicode = 7826;
},
{
glyphname = Cacute.loclPLK;
kernLeft = C;
layers = (
{
layerId = m01;
shapes = (
{
ref = C;
},
{
pos = (261,0);
ref = acute.loclPLK.case;
}
);
width = 431;
}
);
note = Cacute.loclPLK;
},
{
glyphname = Nacute.loclPLK;
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (267,0);
ref = acute.loclPLK.case;
}
);
width = 532;
}
);
note = Nacute.loclPLK;
},
{
glyphname = Oacute.loclPLK;
kernLeft = C;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (270,0);
ref = acute.loclPLK.case;
}
);
width = 530;
}
);
note = Oacute.loclPLK;
},
{
glyphname = Sacute.loclPLK;
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (217,0);
ref = acute.loclPLK.case;
}
);
width = 405;
}
);
note = Sacute.loclPLK;
},
{
glyphname = Zacute.loclPLK;
layers = (
{
layerId = m01;
shapes = (
{
ref = Z;
},
{
pos = (223,0);
ref = acute.loclPLK.case;
}
);
width = 445;
}
);
note = Zacute.loclPLK;
},
{
glyphname = a;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,-10,o),
(279,37,o),
(287,44,qs),
(317,69,l),
(315,7,ls),
(315,4,o),
(333,-10,o),
(335,-10,qs),
(343,-10,o),
(402,2,q),
(402,19,l),
(344,19,l),
(344,432,l),
(228,450,o),
(209,450,qs),
(198,450,o),
(154,428,o),
(105,387,o),
(87,360,q),
(73,331,o),
(54,247,o),
(54,195,qs),
(54,106,o),
(127,-10,o),
(216,-10,qs)
);
},
{
closed = 1;
nodes = (
(83,17,o),
(83,202,qs),
(83,285,o),
(133,391,o),
(195,419,qs),
(205,424,o),
(224,424,qs),
(253,424,o),
(315,409,q),
(315,98,l),
(297,84,o),
(299,85,q),
(220,17,o),
(209,17,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
11 1 4 0 29 28 20 3 1 4 14 1 2 1 3 76 0 4 4 0 97 0 0 0 52 77 7 5 2 1 1 2 97 6 3 2 2 2 50 2 78 25 25 0 0 25 38 25 37 32 30 0 24 0 23 34 18 40 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 433;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (300,0);
ref = acutecomb;
}
);
width = 433;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (341,0);
ref = uni0306;
}
);
width = 433;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = uni1EAF;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (341,0);
ref = uni03060301;
}
);
width = 433;
}
);
note = uni1EAF;
unicode = 7855;
},
{
glyphname = uni1EB7;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (248,0);
ref = dotbelowcomb;
},
{
pos = (341,0);
ref = uni0306;
}
);
width = 433;
}
);
note = uni1EB7;
unicode = 7863;
},
{
glyphname = uni1EB1;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (341,0);
ref = uni03060300;
}
);
width = 433;
}
);
note = uni1EB1;
unicode = 7857;
},
{
glyphname = uni1EB3;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (341,0);
ref = uni03060309;
}
);
width = 433;
}
);
note = uni1EB3;
unicode = 7859;
},
{
glyphname = uni1EB5;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (349,0);
ref = uni03060303;
}
);
width = 433;
}
);
note = uni1EB5;
unicode = 7861;
},
{
glyphname = uni01CE;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (324,0);
ref = uni030C;
}
);
width = 433;
}
);
note = uni01CE;
unicode = 462;
},
{
glyphname = acircumflex;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (323,0);
ref = uni0302;
}
);
width = 433;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = uni1EA5;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (323,0);
ref = uni03020301;
}
);
width = 433;
}
);
note = uni1EA5;
unicode = 7845;
},
{
glyphname = uni1EAD;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (248,0);
ref = dotbelowcomb;
},
{
pos = (323,0);
ref = uni0302;
}
);
width = 433;
}
);
note = uni1EAD;
unicode = 7853;
},
{
glyphname = uni1EA7;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (323,0);
ref = uni03020300;
}
);
width = 433;
}
);
note = uni1EA7;
unicode = 7847;
},
{
glyphname = uni1EA9;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (323,0);
ref = uni03020309;
}
);
width = 433;
}
);
note = uni1EA9;
unicode = 7849;
},
{
glyphname = uni1EAB;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (349,0);
ref = uni03020303;
}
);
width = 433;
}
);
note = uni1EAB;
unicode = 7851;
},
{
glyphname = uni0201;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (312,0);
ref = uni030F;
}
);
width = 433;
}
);
note = uni0201;
unicode = 513;
},
{
glyphname = adieresis;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (305,0);
ref = uni0308;
}
);
width = 433;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = uni1EA1;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (248,0);
ref = dotbelowcomb;
}
);
width = 433;
}
);
note = uni1EA1;
unicode = 7841;
},
{
glyphname = agrave;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (275,0);
ref = gravecomb;
}
);
width = 433;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = uni1EA3;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (279,0);
ref = hookabovecomb;
}
);
width = 433;
}
);
note = uni1EA3;
unicode = 7843;
},
{
glyphname = uni0203;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (341,0);
ref = uni0311;
}
);
width = 433;
}
);
note = uni0203;
unicode = 515;
},
{
glyphname = amacron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (330,0);
ref = uni0304;
}
);
width = 433;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,19,l),
(344,19,l),
(344,432,l),
(228,450,o),
(209,450,qs),
(198,450,o),
(154,428,o),
(105,387,o),
(87,360,q),
(73,331,o),
(54,247,o),
(54,195,qs),
(54,106,o),
(127,-10,o),
(216,-10,qs),
(221,-10,o),
(279,37,o),
(287,44,qs),
(317,69,l),
(315,7,ls),
(315,4,o),
(333,-10,o),
(335,-10,qs),
(341,-10,o),
(373,-4,q),
(302,-60,o),
(272,-88,q),
(267,-106,o),
(267,-123,qs),
(267,-157,o),
(298,-211,o),
(323,-211,qs),
(334,-211,o),
(401,-202,q),
(401,-187,l),
(327,-188,ls),
(313,-188,o),
(295,-149,o),
(295,-123,qs),
(295,-113,o),
(296,-108,qs),
(297,-101,o),
(374,-25,o),
(385,-14,qs),
(402,2,l)
);
},
{
closed = 1;
nodes = (
(297,84,o),
(299,85,q),
(220,17,o),
(209,17,qs),
(83,17,o),
(83,202,qs),
(83,285,o),
(133,391,o),
(195,419,qs),
(205,424,o),
(224,424,qs),
(253,424,o),
(315,409,q),
(315,98,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
41 1 5 3 58 45 25 3 4 5 44 19 2 2 4 10 1 1 0 4 76 0 0 0 1 0 1 101 0 5 5 3 97 0 3 3 52 77 6 1 4 4 2 97 0 2 2 50 2 78 37 35 18 40 47 34 39 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 433;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (306,0);
ref = uni030A;
}
);
width = 433;
}
);
note = aring;
unicode = 229;
},
{
glyphname = aringacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (306,0);
ref = uni030A;
},
{
pos = (300,230);
ref = acutecomb;
}
);
width = 433;
}
);
note = aringacute;
unicode = 507;
},
{
glyphname = atilde;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (350,0);
ref = tildecomb;
}
);
width = 433;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,238,l),
(596,352,o),
(526,450,o),
(456,450,qs),
(448,450,o),
(413,434,o),
(395,421,q),
(231,450,o),
(209,450,qs),
(199,450,o),
(155,427,o),
(106,386,o),
(87,360,q),
(73,331,o),
(54,247,o),
(54,195,qs),
(54,106,o),
(127,-10,o),
(216,-10,qs),
(221,-10,o),
(291,48,qs),
(304,60,o),
(323,75,q),
(362,-10,o),
(460,-10,qs),
(486,-10,o),
(574,7,o),
(580,8,q),
(580,26,l),
(474,15,o),
(468,15,qs),
(401,15,o),
(330,105,o),
(330,213,q)
);
},
{
closed = 1;
nodes = (
(83,17,o),
(83,202,qs),
(83,285,o),
(133,392,o),
(195,420,qs),
(207,425,o),
(222,425,qs),
(240,425,o),
(317,410,o),
(367,399,q),
(349,382,o),
(333,360,q),
(318,333,o),
(301,252,o),
(301,205,qs),
(301,140,o),
(315,98,q),
(305,91,o),
(294,80,qs),
(288,75,o),
(216,17,o),
(209,17,qs)
);
},
{
closed = 1;
nodes = (
(562,425,o),
(567,260,q),
(331,238,l),
(334,298,o),
(366,368,o),
(395,392,qs),
(413,407,o),
(449,425,o),
(460,425,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
62 61 45 38 33 32 26 10 4 9 0 5 5 1 1 0 2 76 8 7 2 5 5 3 97 4 1 3 3 52 77 6 1 0 0 1 97 2 1 1 1 50 1 78 56 56 56 64 56 63 55 54 49 47 35 40 36 37 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = ae;
unicode = 230;
},
{
glyphname = aeacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = ae;
},
{
pos = (418,0);
ref = acutecomb;
}
);
width = 631;
}
);
note = aeacute;
unicode = 509;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(236,-10,o),
(280,12,o),
(329,53,o),
(347,80,q),
(361,109,o),
(380,193,o),
(380,245,qs),
(380,334,o),
(307,450,o),
(218,450,qs),
(212,450,o),
(146,396,qs),
(120,374,l),
(118,375,l),
(119,619,ls),
(119,622,o),
(101,636,o),
(99,636,qs),
(87,635,o),
(48,628,o),
(32,624,q),
(32,607,l),
(90,607,l),
(90,8,l),
(201,-10,o),
(225,-10,qs)
);
},
{
closed = 1;
nodes = (
(227,16,o),
(211,16,qs),
(182,16,o),
(119,31,q),
(119,342,l),
(136,356,o),
(135,355,qs),
(214,423,o),
(225,423,qs),
(351,423,o),
(351,238,qs),
(351,155,o),
(301,50,o),
(239,21,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
35 34 11 3 4 3 1 1 2 4 2 76 7 4 2 0 74 0 0 1 0 133 0 3 3 1 97 0 1 1 52 77 0 4 4 2 97 5 1 2 2 50 2 78 0 0 38 36 31 29 0 25 0 24 43 18 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 435;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,-10,o),
(278,-2,o),
(296,1,q),
(296,18,l),
(221,15,ls),
(154,15,o),
(83,100,o),
(83,202,qs),
(83,284,o),
(117,366,o),
(149,392,qs),
(167,407,o),
(202,425,o),
(213,425,qs),
(233,425,o),
(266,418,q),
(273,332,l),
(292,332,l),
(294,440,l),
(271,444,o),
(224,450,o),
(209,450,qs),
(198,450,o),
(153,428,o),
(104,387,o),
(86,360,q),
(54,301,o),
(54,195,qs),
(54,97,o),
(136,-10,o),
(213,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
11 1 2 0 27 1 4 3 2 76 0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 52 77 0 3 3 4 97 5 1 4 4 50 4 78 0 0 0 30 0 29 39 34 19 39 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
pos = (267,0);
ref = acutecomb;
}
);
width = 322;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
pos = (291,0);
ref = uni030C;
}
);
width = 322;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,-10,o),
(278,-2,o),
(296,1,q),
(296,18,l),
(221,15,ls),
(154,15,o),
(83,100,o),
(83,202,qs),
(83,284,o),
(117,366,o),
(149,392,qs),
(167,407,o),
(202,425,o),
(213,425,qs),
(233,425,o),
(266,418,q),
(273,332,l),
(292,332,l),
(294,440,l),
(271,444,o),
(224,450,o),
(209,450,qs),
(198,450,o),
(153,428,o),
(104,387,o),
(86,360,q),
(54,301,o),
(54,195,qs),
(54,109,o),
(117,5,o),
(177,-7,q),
(163,-59,l),
(168,-73,l),
(204,-76,o),
(244,-102,o),
(244,-122,qs),
(244,-143,o),
(211,-168,o),
(167,-187,q),
(174,-204,l),
(203,-193,o),
(253,-168,o),
(261,-159,qs),
(266,-152,o),
(274,-130,o),
(274,-120,qs),
(274,-97,o),
(226,-59,o),
(193,-54,q),
(197,-9,l),
(202,-10,o),
(213,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
32 1 2 0 48 20 2 4 3 2 76 19 12 11 2 4 4 73 0 1 2 3 2 1 3 128 0 2 2 0 97 0 0 0 52 77 0 3 3 4 97 5 1 4 4 50 4 78 0 0 0 51 0 50 47 45 38 36 34 33 30 28 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = ccircumflex;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
pos = (290,0);
ref = uni0302;
}
);
width = 322;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = cdotaccent;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
pos = (210,0);
ref = uni0307;
}
);
width = 322;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,-10,o),
(291,47,qs),
(307,61,o),
(315,67,q),
(315,7,ls),
(315,4,o),
(333,-10,o),
(335,-10,qs),
(343,-10,o),
(402,2,q),
(402,19,l),
(344,19,l),
(344,430,l),
(347,620,ls),
(347,623,o),
(329,637,o),
(327,637,qs),
(318,637,o),
(257,625,q),
(257,608,l),
(315,608,l),
(315,437,l),
(303,438,o),
(282,442,qs),
(222,450,o),
(209,450,qs),
(198,450,o),
(154,428,o),
(105,387,o),
(87,360,q),
(73,331,o),
(54,247,o),
(54,195,qs),
(54,106,o),
(127,-10,o),
(216,-10,qs)
);
},
{
closed = 1;
nodes = (
(83,17,o),
(83,202,qs),
(83,285,o),
(133,391,o),
(195,419,qs),
(205,424,o),
(224,424,qs),
(255,424,o),
(315,408,q),
(315,98,l),
(221,17,o),
(209,17,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
16 1 1 2 13 1 6 0 38 37 31 3 3 6 25 1 4 3 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 0 2 1 0 128 0 2 2 51 77 0 6 6 0 97 0 0 0 52 77 9 7 2 3 3 4 97 8 5 2 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 1 2 133 0 1 0 1 133 0 6 6 0 97 0 0 0 52 77 9 7 2 3 3 4 97 8 5 2 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
36 36 0 0 36 47 36 46 41 39 0 35 0 34 34 21 18 20 40 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = d;
unicode = 100;
},
{
glyphname = eth;
kernLeft = a;
kernRight = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,575,l),
(264,530,l),
(211,597,o),
(99,597,q),
(106,578,l),
(197,575,o),
(241,519,q),
(135,466,l),
(131,458,l),
(146,447,l),
(254,501,l),
(289,440,o),
(292,322,q),
(267,335,o),
(201,359,o),
(193,359,qs),
(128,359,o),
(53,256,o),
(53,182,qs),
(53,145,o),
(65,84,o),
(79,55,q),
(93,32,o),
(150,-9,o),
(161,-9,qs),
(245,-9,o),
(322,161,o),
(322,283,qs),
(322,438,o),
(277,513,q),
(361,555,l),
(365,562,l)
);
},
{
closed = 1;
nodes = (
(129,15,o),
(81,114,o),
(81,174,qs),
(81,240,o),
(134,335,o),
(188,335,qs),
(200,335,o),
(269,314,o),
(293,303,q),
(293,284,ls),
(293,175,o),
(236,15,o),
(168,15,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
30 29 24 22 21 20 1 7 1 2 35 18 2 5 4 2 76 0 1 0 4 5 1 4 105 0 2 2 3 97 0 3 3 49 77 6 1 5 5 0 97 0 0 0 50 0 78 32 32 32 44 32 43 41 17 26 23 37 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 393;
}
);
note = eth;
unicode = 240;
},
{
glyphname = dcaron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = d;
},
{
pos = (478,0);
ref = caroncomb.alt;
}
);
width = 478;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,430,l),
(345,515,l),
(400,515,l),
(400,535,l),
(346,535,l),
(347,620,ls),
(347,623,o),
(329,637,o),
(327,637,qs),
(318,637,o),
(257,625,q),
(257,608,l),
(315,608,l),
(315,535,l),
(202,535,l),
(202,515,l),
(315,515,l),
(315,437,l),
(303,438,o),
(282,442,qs),
(222,450,o),
(209,450,qs),
(198,450,o),
(154,428,o),
(105,387,o),
(87,360,q),
(73,331,o),
(54,247,o),
(54,195,qs),
(54,106,o),
(127,-10,o),
(216,-10,qs),
(222,-10,o),
(291,47,qs),
(307,61,o),
(315,67,q),
(315,7,ls),
(315,4,o),
(333,-10,o),
(335,-10,qs),
(343,-10,o),
(402,2,q),
(402,19,l),
(344,19,l)
);
},
{
closed = 1;
nodes = (
(221,17,o),
(209,17,qs),
(83,17,o),
(83,202,qs),
(83,285,o),
(133,391,o),
(195,419,qs),
(205,424,o),
(224,424,qs),
(255,424,o),
(315,408,q),
(315,98,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
32 1 5 6 25 1 10 2 55 44 7 3 9 10 1 1 0 9 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 6 4 6 5 4 128 7 1 4 8 1 3 2 4 3 103 0 6 6 51 77 0 10 10 2 97 0 2 2 52 77 11 12 2 9 9 0 97 1 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 6 133 0 5 4 5 133 7 1 4 8 1 3 2 4 3 103 0 10 10 2 97 0 2 2 52 77 11 12 2 9 9 0 97 1 1 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 54 52 47 45 0 43 0 43 17 20 18 17 17 20 40 38 34 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = uni1E0D;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = d;
},
{
pos = (237,0);
ref = dotbelowcomb;
}
);
width = 438;
}
);
note = uni1E0D;
unicode = 7693;
},
{
glyphname = uni01F3;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = d;
},
{
pos = (438,0);
ref = z;
}
);
width = 797;
}
);
note = uni01F3;
unicode = 499;
},
{
glyphname = uni01C6;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = d;
},
{
pos = (438,0);
ref = zcaron;
}
);
width = 797;
}
);
note = uni01C6;
unicode = 454;
},
{
glyphname = e;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,-10,o),
(327,7,o),
(333,8,q),
(333,26,l),
(227,15,o),
(221,15,qs),
(154,15,o),
(83,105,o),
(83,213,q),
(350,238,l),
(349,352,o),
(279,450,o),
(209,450,qs),
(198,450,o),
(153,428,o),
(104,387,o),
(86,360,qs),
(71,333,o),
(54,252,o),
(54,205,qs),
(54,101,o),
(132,-10,o),
(213,-10,qs)
);
},
{
closed = 1;
nodes = (
(87,298,o),
(119,367,o),
(148,391,qs),
(166,406,o),
(202,425,o),
(213,425,qs),
(315,425,o),
(320,260,q),
(84,238,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
31 23 18 13 12 5 1 3 19 1 2 1 2 76 0 3 3 0 97 0 0 0 52 77 0 1 1 2 97 4 1 2 2 50 2 78 0 0 26 24 0 22 0 21 21 40 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (284,0);
ref = acutecomb;
}
);
width = 384;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (325,0);
ref = uni0306;
}
);
width = 384;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (308,0);
ref = uni030C;
}
);
width = 384;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (307,0);
ref = uni0302;
}
);
width = 384;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = uni1EBF;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (307,0);
ref = uni03020301;
}
);
width = 384;
}
);
note = uni1EBF;
unicode = 7871;
},
{
glyphname = uni1EC7;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (240,0);
ref = dotbelowcomb;
},
{
pos = (307,0);
ref = uni0302;
}
);
width = 384;
}
);
note = uni1EC7;
unicode = 7879;
},
{
glyphname = uni1EC1;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (307,0);
ref = uni03020300;
}
);
width = 384;
}
);
note = uni1EC1;
unicode = 7873;
},
{
glyphname = uni1EC3;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (307,0);
ref = uni03020309;
}
);
width = 384;
}
);
note = uni1EC3;
unicode = 7875;
},
{
glyphname = uni1EC5;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (333,0);
ref = uni03020303;
}
);
width = 384;
}
);
note = uni1EC5;
unicode = 7877;
},
{
glyphname = uni0205;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (296,0);
ref = uni030F;
}
);
width = 384;
}
);
note = uni0205;
unicode = 517;
},
{
glyphname = edieresis;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (289,0);
ref = uni0308;
}
);
width = 384;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (227,0);
ref = uni0307;
}
);
width = 384;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = uni1EB9;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (240,0);
ref = dotbelowcomb;
}
);
width = 384;
}
);
note = uni1EB9;
unicode = 7865;
},
{
glyphname = egrave;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (259,0);
ref = gravecomb;
}
);
width = 384;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = uni1EBB;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (263,0);
ref = hookabovecomb;
}
);
width = 384;
}
);
note = uni1EBB;
unicode = 7867;
},
{
glyphname = uni0207;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (325,0);
ref = uni0311;
}
);
width = 384;
}
);
note = uni0207;
unicode = 519;
},
{
glyphname = emacron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (314,0);
ref = uni0304;
}
);
width = 384;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(350,238,l),
(349,352,o),
(279,450,o),
(209,450,qs),
(198,450,o),
(153,428,o),
(104,387,o),
(86,360,qs),
(71,333,o),
(54,252,o),
(54,205,qs),
(54,101,o),
(132,-10,o),
(213,-10,qs),
(245,-10,o),
(304,3,q),
(241,-47,o),
(203,-82,q),
(198,-100,o),
(198,-117,qs),
(198,-151,o),
(229,-205,o),
(254,-205,qs),
(264,-205,o),
(332,-196,q),
(332,-181,l),
(258,-182,ls),
(244,-182,o),
(226,-143,o),
(226,-117,qs),
(226,-107,o),
(227,-102,qs),
(228,-95,o),
(305,-19,o),
(316,-8,qs),
(333,8,l),
(333,26,l),
(227,15,o),
(221,15,qs),
(154,15,o),
(83,105,o),
(83,213,q)
);
},
{
closed = 1;
nodes = (
(166,406,o),
(202,425,o),
(213,425,qs),
(315,425,o),
(320,260,q),
(84,238,l),
(87,298,o),
(119,367,o),
(148,391,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
45 44 41 40 4 5 0 5 25 5 2 3 0 16 1 2 1 3 76 0 1 0 2 1 2 101 0 5 5 4 97 0 4 4 52 77 0 0 0 3 97 0 3 3 50 3 78 40 40 39 34 43 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 384;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = uni1EBD;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (334,0);
ref = tildecomb;
}
);
width = 384;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = uni0259;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,-10,o),
(250,13,o),
(300,54,o),
(318,80,q),
(333,107,o),
(350,188,o),
(350,235,qs),
(350,339,o),
(272,450,o),
(191,450,qs),
(165,450,o),
(77,433,o),
(71,432,q),
(71,414,l),
(177,425,o),
(183,425,qs),
(250,425,o),
(321,335,o),
(321,227,q),
(54,202,l),
(55,88,o),
(125,-10,o),
(195,-10,qs)
);
},
{
closed = 1;
nodes = (
(89,15,o),
(84,180,q),
(320,202,l),
(317,142,o),
(285,72,o),
(256,48,qs),
(238,33,o),
(202,15,o),
(191,15,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
9 1 0 1 29 28 8 3 2 5 3 0 2 76 0 0 0 1 97 0 1 1 52 77 5 1 3 3 2 97 4 1 2 2 50 2 78 23 23 0 0 23 31 23 30 0 22 0 21 37 21 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,-10,o),
(155,2,q),
(155,19,l),
(97,19,l),
(97,415,l),
(192,415,l),
(192,440,l),
(97,440,l),
(97,515,ls),
(97,547,o),
(111,590,o),
(128,611,o),
(131,611,qs),
(154,611,o),
(235,600,q),
(245,616,o),
(245,619,qs),
(245,623,o),
(235,631,q),
(168,637,o),
(137,637,qs),
(108,637,o),
(68,564,o),
(68,513,qs),
(68,442,l),
(20,435,l),
(20,415,l),
(68,415,l),
(68,7,ls),
(68,4,o),
(86,-10,o),
(88,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
16 6 2 3 2 5 1 0 3 29 1 6 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 0 6 0 5 6 128 0 2 2 1 97 0 1 1 51 77 4 1 0 0 3 95 0 3 3 44 77 0 6 6 50 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 5 0 6 0 5 6 128 0 1 0 2 3 1 2 105 4 1 0 0 3 95 0 3 3 44 77 0 6 6 50 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
18 17 17 21 22 37 19 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 190;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,-175,o),
(331,-99,o),
(331,-52,qs),
(331,434,l),
(230,450,o),
(203,450,qs),
(191,450,o),
(148,430,o),
(101,389,o),
(83,361,q),
(69,331,o),
(54,262,o),
(54,212,qs),
(54,134,o),
(118,31,o),
(191,26,q),
(47,-110,l),
(44,-139,l),
(90,-152,o),
(208,-175,o),
(262,-175,qs)
);
},
{
closed = 1;
nodes = (
(151,51,o),
(83,122,o),
(83,219,qs),
(83,316,o),
(144,401,o),
(185,418,qs),
(196,423,o),
(216,423,qs),
(240,423,o),
(302,411,q),
(302,130,l),
(218,51,o),
(209,51,qs)
);
},
{
closed = 1;
nodes = (
(216,-151,o),
(105,-131,o),
(74,-122,q),
(74,-119,l),
(117,-77,o),
(247,46,o),
(300,95,q),
(302,93,l),
(302,-46,ls),
(302,-81,o),
(286,-128,o),
(268,-151,o),
(265,-151,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
16 1 3 1 38 23 22 3 4 3 42 2 2 5 0 3 76 7 1 4 0 0 5 4 0 105 0 3 3 1 97 0 1 1 52 77 0 5 5 2 97 6 1 2 2 46 2 78 21 21 0 0 46 45 21 33 21 32 26 24 0 20 0 19 40 20 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 387;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = g;
},
{
pos = (334,0);
ref = uni0306;
}
);
width = 387;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = gcaron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = g;
},
{
pos = (317,0);
ref = uni030C;
}
);
width = 387;
}
);
note = gcaron;
unicode = 487;
},
{
glyphname = gcircumflex;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = g;
},
{
pos = (316,0);
ref = uni0302;
}
);
width = 387;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = uni0123;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = g;
},
{
pos = (241,0);
ref = uni0312;
}
);
width = 387;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = g;
},
{
pos = (236,0);
ref = uni0307;
}
);
width = 387;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,342,l),
(150,368,o),
(223,423,o),
(226,423,qs),
(262,423,o),
(309,406,o),
(339,348,o),
(339,290,qs),
(339,7,ls),
(339,4,o),
(355,-10,o),
(359,-10,qs),
(368,-10,o),
(426,2,q),
(426,19,l),
(368,19,l),
(368,276,ls),
(368,344,o),
(340,419,o),
(277,450,o),
(220,450,qs),
(214,450,o),
(118,373,q),
(116,374,l),
(118,620,ls),
(118,623,o),
(100,637,o),
(98,637,qs),
(89,637,o),
(31,625,q),
(31,608,l),
(89,608,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
5 1 0 1 34 11 2 3 5 37 21 2 4 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 0 1 2 1 0 2 128 6 1 3 5 4 5 3 4 128 0 1 1 51 77 0 5 5 2 97 0 2 2 52 77 7 1 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 1 133 0 0 2 0 133 6 1 3 5 4 5 3 4 128 0 5 5 2 97 0 2 2 52 77 7 1 4 4 50 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
18 20 23 18 20 38 18 19 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(368,276,ls),
(368,344,o),
(340,419,o),
(277,450,o),
(220,450,qs),
(214,450,o),
(118,373,q),
(116,374,l),
(117,515,l),
(229,515,l),
(229,535,l),
(117,535,l),
(118,620,ls),
(118,623,o),
(100,637,o),
(98,637,qs),
(89,637,o),
(31,625,q),
(31,608,l),
(89,608,l),
(89,535,l),
(31,535,l),
(31,515,l),
(89,515,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs),
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,342,l),
(150,368,o),
(223,423,o),
(226,423,qs),
(262,423,o),
(309,406,o),
(339,348,o),
(339,290,qs),
(339,7,ls),
(339,4,o),
(355,-10,o),
(359,-10,qs),
(368,-10,o),
(426,2,q),
(426,19,l),
(368,19,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
29 1 6 7 39 14 2 2 1 17 1 2 0 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 7 5 7 6 5 128 12 11 2 2 1 0 1 2 0 128 8 1 5 9 1 4 10 5 4 103 0 7 7 51 77 0 1 1 10 97 0 10 10 52 77 3 1 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 7 6 7 133 0 6 5 6 133 12 11 2 2 1 0 1 2 0 128 8 1 5 9 1 4 10 5 4 103 0 1 1 10 97 0 10 10 52 77 3 1 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 47 0 47 43 41 38 37 20 18 17 17 20 18 20 23 18 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = hcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = h;
},
{
pos = (194,10);
ref = uni0302.case;
}
);
width = 454;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = uni1E25;
layers = (
{
layerId = m01;
shapes = (
{
ref = h;
},
{
pos = (267,0);
ref = dotbelowcomb;
}
);
width = 454;
}
);
note = uni1E25;
unicode = 7717;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (118,0);
ref = uni0307;
}
);
width = 212;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,433,ls),
(118,436,o),
(100,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 0 1 13 1 3 2 2 76 0 0 1 2 1 0 2 128 0 2 3 1 2 3 126 0 1 1 52 77 0 3 3 50 3 78 18 20 18 19 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (175,0);
ref = acutecomb;
}
);
width = 212;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (216,0);
ref = uni0306;
}
);
width = 212;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = uni01D0;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (199,0);
ref = uni030C;
}
);
width = 212;
}
);
note = uni01D0;
unicode = 464;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (198,0);
ref = uni0302;
}
);
width = 212;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = uni0209;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (187,0);
ref = uni030F;
}
);
width = 212;
}
);
note = uni0209;
unicode = 521;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (180,0);
ref = uni0308;
}
);
width = 212;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (118,0);
ref = uni0307;
}
);
width = 212;
}
);
note = i.loclTRK;
},
{
glyphname = uni1ECB;
layers = (
{
layerId = m01;
shapes = (
{
ref = i;
},
{
pos = (127,0);
ref = dotbelowcomb;
}
);
width = 212;
}
);
note = uni1ECB;
unicode = 7883;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (150,0);
ref = gravecomb;
}
);
width = 212;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = uni1EC9;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (154,0);
ref = hookabovecomb;
}
);
width = 212;
}
);
note = uni1EC9;
unicode = 7881;
},
{
glyphname = uni020B;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (216,0);
ref = uni0311;
}
);
width = 212;
}
);
note = uni020B;
unicode = 523;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
ref = i;
},
{
pos = (212,0);
ref = j;
}
);
width = 377;
}
);
note = ij;
unicode = 307;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (205,0);
ref = uni0304;
}
);
width = 212;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,596,l),
(108,607,l),
(79,604,l),
(85,535,l),
(110,535,l)
);
},
{
closed = 1;
nodes = (
(147,-4,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,433,ls),
(118,436,o),
(100,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,7,ls),
(89,3,o),
(104,-7,q),
(32,-64,o),
(5,-90,q),
(0,-108,o),
(0,-125,qs),
(0,-159,o),
(31,-213,o),
(56,-213,qs),
(67,-213,o),
(134,-204,q),
(134,-189,l),
(60,-190,ls),
(46,-190,o),
(28,-151,o),
(28,-125,qs),
(28,-115,o),
(29,-110,qs),
(30,-102,o),
(104,-30,qs),
(127,-7,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
28 1 3 4 36 23 7 3 1 5 14 1 2 1 3 76 3 2 1 3 0 74 6 1 0 4 0 133 0 3 4 5 4 3 5 128 0 5 1 4 5 1 126 0 1 0 2 1 2 101 0 4 4 52 4 78 0 0 35 34 30 29 27 26 17 15 13 11 0 4 0 4 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (225,0);
ref = tildecomb;
}
);
width = 212;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,551,l),
(111,607,l),
(103,617,l),
(75,614,l),
(81,551,l)
);
},
{
closed = 1;
nodes = (
(56,-175,o),
(88,-141,o),
(108,-83,o),
(108,-51,qs),
(108,433,ls),
(108,436,o),
(90,450,o),
(88,450,qs),
(79,450,o),
(21,438,q),
(21,421,l),
(79,421,l),
(79,-53,ls),
(79,-82,o),
(64,-125,o),
(45,-149,o),
(41,-149,qs),
(-27,-149,l),
(-27,-166,l),
(27,-175,o),
(39,-175,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
15 1 2 3 6 1 4 1 2 76 2 1 2 0 74 0 0 3 0 133 0 2 3 1 3 2 1 128 0 3 3 52 77 0 1 1 4 97 5 1 4 4 46 4 78 5 5 5 25 5 24 18 21 19 19 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 165;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,-175,o),
(88,-141,o),
(108,-83,o),
(108,-51,qs),
(108,433,ls),
(108,436,o),
(90,450,o),
(88,450,qs),
(79,450,o),
(21,438,q),
(21,421,l),
(79,421,l),
(79,-53,ls),
(79,-82,o),
(64,-125,o),
(45,-149,o),
(41,-149,qs),
(-27,-149,l),
(-27,-166,l),
(27,-175,o),
(39,-175,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
10 1 1 2 1 1 3 0 2 76 0 1 2 0 2 1 0 128 0 2 2 52 77 0 0 0 3 97 4 1 3 3 46 3 78 0 0 0 20 0 19 18 21 18 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 162;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni006A0301;
layers = (
{
layerId = m01;
shapes = (
{
ref = dotlessi;
},
{
pos = (43,0);
ref = acute;
},
{
pos = (212,0);
ref = uni0237;
},
{
pos = (237,0);
ref = acute;
}
);
width = 374;
}
);
note = uni006A0301;
},
{
glyphname = jcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni0237;
},
{
pos = (185,0);
ref = uni0302;
}
);
width = 162;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,620,ls),
(118,623,o),
(100,637,o),
(98,637,qs),
(89,637,o),
(31,625,q),
(31,608,l),
(89,608,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs)
);
},
{
closed = 1;
nodes = (
(365,-10,o),
(416,2,q),
(416,19,l),
(356,19,l),
(190,239,l),
(388,427,l),
(387,432,o),
(379,450,o),
(376,450,qs),
(367,450,o),
(276,442,q),
(276,422,l),
(346,422,l),
(157,243,l),
(157,236,l),
(329,7,ls),
(333,1,o),
(353,-10,o),
(358,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
5 1 0 1 23 1 4 5 29 19 2 2 4 32 13 2 3 2 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 0 1 5 1 0 5 128 0 4 5 2 5 4 2 128 0 1 1 51 77 0 5 5 52 77 6 1 2 2 3 97 8 7 2 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 0 1 133 0 0 5 0 133 0 4 5 2 5 4 2 128 0 5 5 52 77 6 1 2 2 3 97 8 7 2 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
16 16 16 34 16 33 21 18 22 18 20 18 19 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 440;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
ref = k;
},
{
pos = (248,0);
ref = uni0326;
}
);
width = 440;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,433,ls),
(118,436,o),
(100,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs)
);
},
{
closed = 1;
nodes = (
(365,-10,o),
(416,2,q),
(416,19,l),
(356,19,l),
(185,212,l),
(388,427,l),
(387,432,o),
(379,450,o),
(376,450,qs),
(367,450,o),
(276,442,q),
(276,422,l),
(348,422,l),
(157,213,l),
(157,206,l),
(329,7,ls),
(334,1,o),
(353,-10,o),
(358,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
23 5 2 0 1 29 19 2 2 0 32 13 2 3 2 3 76 4 1 0 1 2 1 0 2 128 5 1 1 1 52 77 6 1 2 2 3 97 8 7 2 3 3 50 3 78 16 16 16 34 16 33 21 18 22 18 20 18 19 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 446;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,620,ls),
(118,623,o),
(100,637,o),
(98,637,qs),
(89,637,o),
(31,625,q),
(31,608,l),
(89,608,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
5 1 0 1 13 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 1 2 1 0 2 128 0 2 3 1 2 3 126 0 1 1 51 77 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 1 133 0 0 2 0 133 0 2 3 2 133 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 20 18 19 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = l;
},
{
pos = (190,0);
ref = acutecomb.case;
}
);
width = 212;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = l;
},
{
pos = (252,0);
ref = caroncomb.alt;
}
);
width = 252;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
ref = l;
},
{
pos = (130,0);
ref = uni0326;
}
);
width = 212;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
ref = l;
},
{
pos = (190,0);
ref = periodcentered.loclCAT;
}
);
width = 212;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = uni01C9;
layers = (
{
layerId = m01;
shapes = (
{
ref = l;
},
{
pos = (212,0);
ref = j;
}
);
width = 377;
}
);
note = uni01C9;
unicode = 457;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,407,l),
(185,410,l),
(118,362,l),
(118,620,ls),
(118,623,o),
(100,637,o),
(98,637,qs),
(89,637,o),
(31,625,q),
(31,608,l),
(89,608,l),
(89,341,l),
(13,286,l),
(12,269,l),
(22,266,l),
(89,314,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs),
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,335,l),
(193,389,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
16 1 2 3 25 24 22 13 12 11 9 0 8 0 2 3 1 1 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 51 77 0 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 3 2 3 133 0 2 0 2 133 0 0 1 0 133 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 25 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,-11,o),
(176,1,q),
(176,18,l),
(118,18,l),
(118,342,l),
(214,423,o),
(224,423,qs),
(257,423,o),
(300,409,o),
(327,359,o),
(327,310,qs),
(327,6,ls),
(327,3,o),
(343,-11,o),
(347,-11,qs),
(356,-11,o),
(414,1,q),
(414,18,l),
(356,18,l),
(356,342,l),
(452,423,o),
(462,423,qs),
(495,423,o),
(538,406,o),
(565,348,o),
(565,290,qs),
(565,6,ls),
(565,3,o),
(581,-11,o),
(585,-11,qs),
(594,-11,o),
(652,1,q),
(652,18,l),
(594,18,l),
(594,276,ls),
(594,344,o),
(567,419,o),
(506,450,o),
(452,450,qs),
(449,450,o),
(377,392,o),
(352,371,q),
(340,412,o),
(275,450,o),
(218,450,qs),
(214,450,o),
(135,388,o),
(116,371,q),
(118,433,ls),
(118,436,o),
(100,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,6,ls),
(89,3,o),
(107,-11,o),
(109,-11,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
5 1 0 1 54 39 17 11 4 4 0 57 42 27 3 5 4 3 76 10 7 2 4 0 5 0 4 5 128 9 6 2 0 0 1 97 3 2 2 1 1 52 77 11 8 2 5 5 50 5 78 59 58 56 55 53 51 18 18 39 18 20 36 38 18 19 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,342,l),
(152,371,o),
(220,423,o),
(226,423,qs),
(262,423,o),
(309,406,o),
(339,348,o),
(339,290,qs),
(339,7,ls),
(339,4,o),
(355,-10,o),
(359,-10,qs),
(368,-10,o),
(426,2,q),
(426,19,l),
(368,19,l),
(368,276,ls),
(368,344,o),
(340,419,o),
(277,450,o),
(220,450,qs),
(215,450,o),
(146,395,o),
(136,387,qs),
(122,375,o),
(116,371,q),
(118,433,ls),
(118,436,o),
(100,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
5 1 0 1 36 11 2 3 0 39 23 2 4 3 3 76 6 1 3 0 4 0 3 4 128 5 1 0 0 1 97 2 1 1 1 52 77 7 1 4 4 50 4 78 18 20 23 18 20 40 18 19 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (303,0);
ref = acutecomb;
}
);
width = 454;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = napostrophe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,572,o),
(32,622,qs),
(32,667,ls),
(32,671,o),
(20,681,o),
(17,681,qs),
(9,681,o),
(-7,675,q),
(-8,606,ls),
(-8,602,o),
(4,592,q),
(-2,557,o),
(-19,512,q),
(-5,503,l)
);
},
{
closed = 1;
nodes = (
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,342,l),
(152,371,o),
(220,423,o),
(226,423,qs),
(262,423,o),
(309,406,o),
(339,348,o),
(339,290,qs),
(339,7,ls),
(339,4,o),
(355,-10,o),
(359,-10,qs),
(368,-10,o),
(426,2,q),
(426,19,l),
(368,19,l),
(368,276,ls),
(368,344,o),
(340,419,o),
(277,450,o),
(220,450,qs),
(215,450,o),
(146,395,o),
(136,387,qs),
(122,375,o),
(116,371,q),
(118,433,ls),
(118,436,o),
(100,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
13 5 2 3 2 0 19 1 1 2 50 25 2 4 1 53 37 2 5 4 4 76 0 0 2 0 133 7 1 4 1 5 1 4 5 128 6 1 1 1 2 97 3 1 2 2 52 77 8 1 5 5 50 5 78 18 20 23 18 20 40 18 25 38 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = napostrophe;
unicode = 329;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (327,0);
ref = uni030C;
}
);
width = 454;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (266,0);
ref = uni0326;
}
);
width = 454;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = uni1E45;
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (246,0);
ref = uni0307;
}
);
width = 454;
}
);
note = uni1E45;
unicode = 7749;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,-175,o),
(346,-139,o),
(368,-83,o),
(368,-53,qs),
(368,276,ls),
(368,344,o),
(340,419,o),
(277,450,o),
(220,450,qs),
(216,450,o),
(135,388,o),
(116,371,q),
(118,433,ls),
(118,436,o),
(100,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs),
(118,-10,o),
(176,2,q),
(176,19,l),
(118,19,l),
(118,342,l),
(216,423,o),
(226,423,qs),
(262,423,o),
(309,406,o),
(339,348,o),
(339,290,qs),
(339,-53,ls),
(339,-82,o),
(325,-124,o),
(308,-146,o),
(303,-147,qs),
(285,-149,o),
(240,-149,o),
(233,-149,q),
(233,-166,l),
(287,-175,o),
(299,-175,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
27 1 1 5 33 16 2 2 1 19 1 3 2 1 1 7 0 4 76 0 2 1 3 1 2 3 128 0 0 3 7 3 0 7 128 4 1 1 1 5 97 6 1 5 5 52 77 0 3 3 50 77 8 1 7 7 46 7 78 0 0 0 45 0 44 38 18 20 18 18 41 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 422;
}
);
note = eng;
unicode = 331;
},
{
glyphname = uni0272;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,-175,o),
(85,-141,o),
(108,-88,o),
(108,-61,qs),
(108,342,l),
(206,423,o),
(216,423,qs),
(252,423,o),
(299,406,o),
(329,348,o),
(329,290,qs),
(329,7,ls),
(329,4,o),
(345,-10,o),
(349,-10,qs),
(358,-10,o),
(416,2,q),
(416,19,l),
(358,19,l),
(358,276,ls),
(358,344,o),
(330,419,o),
(267,450,o),
(210,450,qs),
(206,450,o),
(125,388,o),
(106,371,q),
(108,433,ls),
(108,436,o),
(90,450,o),
(88,450,qs),
(79,450,o),
(21,438,q),
(21,421,l),
(79,421,l),
(79,-53,ls),
(79,-82,o),
(65,-124,o),
(48,-146,o),
(43,-147,qs),
(25,-149,o),
(-20,-149,o),
(-27,-149,q),
(-27,-166,l),
(27,-175,o),
(39,-175,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
12 1 1 2 40 18 2 4 1 28 1 5 4 1 1 7 0 4 76 0 4 1 5 1 4 5 128 0 0 5 7 5 0 7 128 6 1 1 1 2 97 3 1 2 2 52 77 0 5 5 50 77 8 1 7 7 46 7 78 0 0 0 45 0 44 39 18 20 38 18 22 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 444;
}
);
note = uni0272;
unicode = 626;
},
{
glyphname = uni01CC;
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (454,0);
ref = j;
}
);
width = 619;
}
);
note = uni01CC;
unicode = 460;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (353,0);
ref = tildecomb;
}
);
width = 454;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = o;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(242,-10,o),
(325,42,o),
(345,67,qs),
(363,91,o),
(385,184,o),
(385,235,qs),
(385,342,o),
(294,450,o),
(209,450,qs),
(198,450,o),
(153,428,o),
(104,387,o),
(86,360,qs),
(71,333,o),
(54,252,o),
(54,205,qs),
(54,97,o),
(144,-10,o),
(225,-10,qs)
);
},
{
closed = 1;
nodes = (
(149,18,o),
(83,121,o),
(83,205,qs),
(83,277,o),
(113,362,o),
(148,391,qs),
(166,406,o),
(202,425,o),
(213,425,qs),
(281,425,o),
(356,325,o),
(356,235,qs),
(356,179,o),
(334,94,o),
(318,76,qs),
(301,57,o),
(239,16,o),
(221,16,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 0 97 0 0 0 52 77 5 1 3 3 1 97 4 1 1 1 50 1 78 19 19 0 0 19 36 19 35 28 26 0 18 0 17 40 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 439;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (302,0);
ref = acutecomb;
}
);
width = 439;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (343,0);
ref = uni0306;
}
);
width = 439;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = uni01D2;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (326,0);
ref = uni030C;
}
);
width = 439;
}
);
note = uni01D2;
unicode = 466;
},
{
glyphname = ocircumflex;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (325,0);
ref = uni0302;
}
);
width = 439;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = uni1ED1;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (325,0);
ref = uni03020301;
}
);
width = 439;
}
);
note = uni1ED1;
unicode = 7889;
},
{
glyphname = uni1ED9;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (233,0);
ref = dotbelowcomb;
},
{
pos = (325,0);
ref = uni0302;
}
);
width = 439;
}
);
note = uni1ED9;
unicode = 7897;
},
{
glyphname = uni1ED3;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (325,0);
ref = uni03020300;
}
);
width = 439;
}
);
note = uni1ED3;
unicode = 7891;
},
{
glyphname = uni1ED5;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (325,0);
ref = uni03020309;
}
);
width = 439;
}
);
note = uni1ED5;
unicode = 7893;
},
{
glyphname = uni1ED7;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (351,0);
ref = uni03020303;
}
);
width = 439;
}
);
note = uni1ED7;
unicode = 7895;
},
{
glyphname = uni020D;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (314,0);
ref = uni030F;
}
);
width = 439;
}
);
note = uni020D;
unicode = 525;
},
{
glyphname = odieresis;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (307,0);
ref = uni0308;
}
);
width = 439;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = uni022B;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (307,0);
ref = uni0308;
},
{
pos = (333,135);
ref = uni0304;
}
);
width = 439;
}
);
note = uni022B;
unicode = 555;
},
{
glyphname = uni0231;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (245,0);
ref = uni0307;
},
{
pos = (334,135);
ref = uni0304;
}
);
width = 439;
}
);
note = uni0231;
unicode = 561;
},
{
glyphname = uni1ECD;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (233,0);
ref = dotbelowcomb;
}
);
width = 439;
}
);
note = uni1ECD;
unicode = 7885;
},
{
glyphname = ograve;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (277,0);
ref = gravecomb;
}
);
width = 439;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = uni1ECF;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (281,0);
ref = hookabovecomb;
}
);
width = 439;
}
);
note = uni1ECF;
unicode = 7887;
},
{
glyphname = ohorn;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,436,o),
(387,489,o),
(394,529,q),
(373,537,l),
(366,493,o),
(307,440,o),
(275,440,q),
(246,450,o),
(209,450,qs),
(198,450,o),
(153,428,o),
(104,387,o),
(86,360,qs),
(71,333,o),
(54,252,o),
(54,205,qs),
(54,97,o),
(144,-10,o),
(225,-10,qs),
(242,-10,o),
(325,42,o),
(345,67,qs),
(363,91,o),
(385,184,o),
(385,235,qs),
(385,380,o),
(301,428,q)
);
},
{
closed = 1;
nodes = (
(301,57,o),
(239,16,o),
(221,16,qs),
(149,18,o),
(83,121,o),
(83,205,qs),
(83,277,o),
(113,362,o),
(148,391,qs),
(166,406,o),
(202,425,o),
(213,425,qs),
(281,425,o),
(356,325,o),
(356,235,qs),
(356,179,o),
(334,94,o),
(318,76,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
26 1 3 2 1 76 23 22 2 1 74 0 2 2 44 77 0 3 3 1 97 0 1 1 52 77 0 4 4 0 97 0 0 0 50 0 78 39 43 17 40 38 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 439;
}
);
note = ohorn;
unicode = 417;
},
{
glyphname = uni1EDB;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = ohorn;
},
{
pos = (302,0);
ref = acutecomb;
}
);
width = 439;
}
);
note = uni1EDB;
unicode = 7899;
},
{
glyphname = uni1EE3;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = ohorn;
},
{
pos = (233,0);
ref = dotbelowcomb;
}
);
width = 439;
}
);
note = uni1EE3;
unicode = 7907;
},
{
glyphname = uni1EDD;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = ohorn;
},
{
pos = (277,0);
ref = gravecomb;
}
);
width = 439;
}
);
note = uni1EDD;
unicode = 7901;
},
{
glyphname = uni1EDF;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = ohorn;
},
{
pos = (281,0);
ref = hookabovecomb;
}
);
width = 439;
}
);
note = uni1EDF;
unicode = 7903;
},
{
glyphname = uni1EE1;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = ohorn;
},
{
pos = (352,0);
ref = tildecomb;
}
);
width = 439;
}
);
note = uni1EE1;
unicode = 7905;
},
{
glyphname = ohungarumlaut;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (356,0);
ref = uni030B;
}
);
width = 439;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = uni020F;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (343,0);
ref = uni0311;
}
);
width = 439;
}
);
note = uni020F;
unicode = 527;
},
{
glyphname = omacron;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (332,0);
ref = uni0304;
}
);
width = 439;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = uni01EB;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,450,o),
(153,428,o),
(104,387,o),
(86,360,qs),
(71,333,o),
(54,252,o),
(54,205,qs),
(54,98,o),
(142,-8,o),
(221,-10,q),
(159,-59,o),
(125,-90,q),
(120,-108,o),
(120,-125,qs),
(120,-159,o),
(151,-213,o),
(176,-213,qs),
(187,-213,o),
(254,-204,q),
(254,-189,l),
(180,-190,ls),
(166,-190,o),
(148,-151,o),
(148,-125,qs),
(148,-115,o),
(149,-110,qs),
(150,-103,o),
(227,-27,o),
(238,-16,qs),
(255,0,l),
(279,12,o),
(332,50,o),
(345,67,qs),
(363,91,o),
(385,184,o),
(385,235,qs),
(385,342,o),
(294,450,o),
(209,450,qs)
);
},
{
closed = 1;
nodes = (
(301,57,o),
(239,16,o),
(221,16,qs),
(149,18,o),
(83,121,o),
(83,205,qs),
(83,277,o),
(113,362,o),
(148,391,qs),
(166,406,o),
(202,425,o),
(213,425,qs),
(281,425,o),
(356,325,o),
(356,235,qs),
(356,179,o),
(334,94,o),
(318,76,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
19 1 1 0 1 76 0 0 0 1 0 1 101 0 4 4 3 97 6 1 3 3 52 77 0 5 5 2 97 0 2 2 50 2 78 0 0 54 52 45 43 0 38 0 37 29 28 22 20 18 16 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 439;
}
);
note = uni01EB;
unicode = 491;
},
{
glyphname = oslash;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,500,l),
(368,511,l),
(353,517,l),
(309,423,l),
(269,450,o),
(209,450,qs),
(198,450,o),
(153,428,o),
(104,387,o),
(86,360,qs),
(71,333,o),
(54,252,o),
(54,205,qs),
(54,73,o),
(121,22,q),
(79,-67,l),
(82,-78,l),
(96,-84,l),
(140,10,l),
(174,-10,o),
(225,-10,qs),
(242,-10,o),
(325,42,o),
(345,67,qs),
(363,91,o),
(385,184,o),
(385,235,qs),
(385,356,o),
(327,409,q)
);
},
{
closed = 1;
nodes = (
(83,277,o),
(113,362,o),
(148,391,qs),
(166,406,o),
(202,425,o),
(213,425,qs),
(264,425,o),
(297,398,q),
(133,49,l),
(83,96,o),
(83,205,qs)
);
},
{
closed = 1;
nodes = (
(301,57,o),
(239,16,o),
(221,16,qs),
(178,18,o),
(152,35,q),
(314,381,l),
(356,330,o),
(356,235,qs),
(356,179,o),
(334,94,o),
(318,76,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
45 44 31 30 28 24 13 7 3 2 9 1 0 3 2 76 27 25 2 1 74 12 10 2 0 73 0 2 2 1 97 0 1 1 52 77 0 3 3 0 97 0 0 0 50 0 78 44 41 45 38 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 439;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = oslashacute;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = oslash;
},
{
pos = (302,0);
ref = acutecomb;
}
);
width = 439;
}
);
note = oslashacute;
unicode = 511;
},
{
glyphname = otilde;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (352,0);
ref = tildecomb;
}
);
width = 439;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = uni022D;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (352,0);
ref = tildecomb;
},
{
pos = (339,179);
ref = uni0304;
}
);
width = 439;
}
);
note = uni022D;
unicode = 557;
},
{
glyphname = oe;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(652,238,l),
(651,352,o),
(581,450,o),
(511,450,qs),
(500,450,o),
(455,428,o),
(406,387,o),
(388,360,q),
(379,342,o),
(374,327,q),
(357,388,o),
(273,450,o),
(209,450,qs),
(198,450,o),
(153,428,o),
(104,387,o),
(86,360,qs),
(71,333,o),
(54,252,o),
(54,205,qs),
(54,97,o),
(144,-10,o),
(225,-10,qs),
(242,-10,o),
(325,42,o),
(345,67,qs),
(356,83,o),
(366,110,q),
(397,-10,o),
(515,-10,qs),
(541,-10,o),
(629,7,o),
(635,8,q),
(635,26,l),
(529,15,o),
(523,15,qs),
(456,15,o),
(385,105,o),
(385,213,q)
);
},
{
closed = 1;
nodes = (
(301,57,o),
(239,16,o),
(221,16,qs),
(149,18,o),
(83,121,o),
(83,205,qs),
(83,277,o),
(113,362,o),
(148,391,qs),
(166,406,o),
(202,425,o),
(213,425,qs),
(281,425,o),
(356,325,o),
(356,235,qs),
(356,179,o),
(334,94,o),
(318,76,qs)
);
},
{
closed = 1;
nodes = (
(468,406,o),
(504,425,o),
(515,425,qs),
(617,425,o),
(622,260,q),
(386,238,l),
(389,298,o),
(421,367,o),
(450,391,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
60 59 38 37 28 10 4 7 0 5 5 1 1 0 2 76 7 1 5 5 3 97 4 1 3 3 52 77 6 1 0 0 1 97 2 1 1 1 50 1 78 39 39 40 39 40 37 37 17 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,-175,o),
(160,-168,o),
(176,-164,q),
(176,-147,l),
(118,-147,l),
(118,3,l),
(207,-10,o),
(224,-10,qs),
(235,-10,o),
(279,12,o),
(328,53,o),
(346,80,q),
(360,109,o),
(379,193,o),
(379,245,qs),
(379,334,o),
(306,450,o),
(217,450,qs),
(211,450,o),
(146,395,o),
(136,387,qs),
(116,370,l),
(118,433,ls),
(118,436,o),
(100,450,o),
(98,450,qs),
(87,449,o),
(47,442,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,11,l),
(86,-159,ls),
(86,-162,o),
(104,-176,o),
(106,-176,qs)
);
},
{
closed = 1;
nodes = (
(226,16,o),
(210,16,qs),
(181,16,o),
(118,31,q),
(116,340,l),
(145,364,ls),
(170,385,o),
(219,423,o),
(224,423,qs),
(350,423,o),
(350,238,qs),
(350,155,o),
(300,50,o),
(238,21,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
6 1 0 1 45 44 13 3 5 0 29 1 2 5 3 76 9 1 1 74 35 32 2 3 73 0 3 2 3 134 4 1 0 0 1 97 0 1 1 52 77 0 5 5 2 97 0 2 2 50 2 78 38 24 18 40 43 20 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 433;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,-175,o),
(161,-168,o),
(177,-164,q),
(177,-147,l),
(119,-147,l),
(119,3,l),
(208,-10,o),
(225,-10,qs),
(235,-10,o),
(279,13,o),
(328,54,o),
(347,80,q),
(361,109,o),
(380,193,o),
(380,245,qs),
(380,334,o),
(307,450,o),
(218,450,qs),
(211,450,o),
(136,386,qs),
(118,371,l),
(118,620,ls),
(118,623,o),
(100,637,o),
(98,637,qs),
(89,637,o),
(31,625,q),
(31,608,l),
(89,608,l),
(90,11,l),
(87,-159,ls),
(87,-162,o),
(105,-176,o),
(107,-176,qs)
);
},
{
closed = 1;
nodes = (
(230,16,o),
(212,16,qs),
(184,16,o),
(119,31,q),
(118,341,l),
(155,371,ls),
(178,390,o),
(220,423,o),
(225,423,qs),
(351,423,o),
(351,238,qs),
(351,155,o),
(301,49,o),
(239,20,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
6 1 0 1 43 42 12 3 6 5 27 1 3 6 3 76 33 30 2 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 0 1 2 1 0 2 128 0 4 3 4 134 0 1 1 51 77 0 5 5 2 97 0 2 2 52 77 0 6 6 3 97 0 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 1 133 0 0 2 0 133 0 4 3 4 134 0 5 5 2 97 0 2 2 52 77 0 6 6 3 97 0 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
38 24 18 40 38 18 20 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 434;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,-175,o),
(402,-163,q),
(402,-146,l),
(344,-146,l),
(344,432,l),
(228,450,o),
(209,450,qs),
(198,450,o),
(154,428,o),
(105,387,o),
(87,360,q),
(73,331,o),
(54,247,o),
(54,195,qs),
(54,106,o),
(127,-10,o),
(216,-10,qs),
(223,-10,o),
(287,44,qs),
(315,67,l),
(317,66,l),
(315,-158,ls),
(315,-161,o),
(333,-175,o),
(335,-175,qs)
);
},
{
closed = 1;
nodes = (
(83,17,o),
(83,202,qs),
(83,285,o),
(133,391,o),
(195,419,qs),
(205,424,o),
(224,424,qs),
(253,424,o),
(315,409,q),
(317,100,l),
(317,100,o),
(299,85,qs),
(220,17,o),
(209,17,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
19 1 4 1 29 3 2 5 4 22 1 3 2 3 76 0 2 0 3 0 2 3 128 0 4 4 1 97 0 1 1 52 77 6 1 5 5 0 97 0 0 0 50 77 0 3 3 46 3 78 25 25 25 38 25 37 38 18 18 40 38 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,-10,o),
(186,2,q),
(186,19,l),
(118,19,l),
(118,342,l),
(203,426,o),
(213,426,qs),
(231,426,o),
(260,417,q),
(263,421,o),
(270,431,o),
(270,433,qs),
(270,437,o),
(266,445,q),
(260,448,o),
(221,454,o),
(205,454,qs),
(202,454,o),
(137,393,o),
(116,371,q),
(118,433,ls),
(118,436,o),
(100,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,7,ls),
(89,4,o),
(107,-10,o),
(109,-10,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 1 3 1 26 11 2 4 0 29 1 5 4 3 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 1 0 1 26 11 2 4 0 29 1 5 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 1 3 1 26 11 2 4 0 29 1 5 4 3 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 3 4 3 0 4 128 0 4 5 3 4 5 126 0 3 3 1 97 2 1 1 1 52 77 0 5 5 50 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 5 0 4 5 128 3 1 0 0 1 97 2 1 1 1 52 77 0 5 5 50 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 3 4 3 0 4 128 0 4 5 3 4 5 126 0 3 3 1 97 2 1 1 1 52 77 0 5 5 50 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 18 40 38 18 19 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 284;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
layers = (
{
layerId = m01;
shapes = (
{
ref = r;
},
{
pos = (232,0);
ref = acutecomb;
}
);
width = 284;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = r;
},
{
pos = (256,0);
ref = uni030C;
}
);
width = 284;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
layers = (
{
layerId = m01;
shapes = (
{
ref = r;
},
{
pos = (208,0);
ref = uni0326;
}
);
width = 284;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = uni0211;
layers = (
{
layerId = m01;
shapes = (
{
ref = r;
},
{
pos = (244,0);
ref = uni030F;
}
);
width = 284;
}
);
note = uni0211;
unicode = 529;
},
{
glyphname = uni1E5B;
layers = (
{
layerId = m01;
shapes = (
{
ref = r;
},
{
pos = (206,0);
ref = dotbelowcomb;
}
);
width = 284;
}
);
note = uni1E5B;
unicode = 7771;
},
{
glyphname = uni0213;
layers = (
{
layerId = m01;
shapes = (
{
ref = r;
},
{
pos = (273,0);
ref = uni0311;
}
);
width = 284;
}
);
note = uni0213;
unicode = 531;
},
{
glyphname = s;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,-10,o),
(290,48,o),
(299,77,qs),
(303,92,o),
(303,108,qs),
(303,140,o),
(265,194,o),
(191,240,o),
(183,245,qs),
(171,253,o),
(165,256,qs),
(121,282,o),
(85,322,o),
(85,357,qs),
(85,374,o),
(109,405,o),
(139,425,o),
(146,425,qs),
(167,425,o),
(242,419,o),
(262,416,q),
(269,342,l),
(287,342,l),
(289,439,l),
(268,442,o),
(165,450,o),
(146,450,qs),
(130,450,o),
(73,404,o),
(63,383,qs),
(57,369,o),
(57,349,qs),
(57,319,o),
(86,276,o),
(126,247,o),
(169,220,qs),
(189,208,ls),
(233,182,o),
(274,140,o),
(274,104,qs),
(274,85,o),
(250,44,o),
(217,16,o),
(205,16,qs),
(193,16,o),
(140,20,o),
(126,21,qs),
(78,25,l),
(68,106,l),
(51,106,l),
(50,2,l),
(79,-2,o),
(188,-10,o),
(206,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
29 1 4 2 2 1 5 1 2 76 0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 4 4 2 97 0 2 2 52 77 0 1 1 5 97 6 1 5 5 50 5 78 0 0 0 53 0 52 19 19 47 36 19 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 338;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (258,0);
ref = acutecomb;
}
);
width = 338;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (282,0);
ref = uni030C;
}
);
width = 338;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,-10,o),
(290,48,o),
(299,77,qs),
(303,92,o),
(303,108,qs),
(303,140,o),
(265,194,o),
(191,240,o),
(183,245,qs),
(171,253,o),
(165,256,qs),
(121,282,o),
(85,322,o),
(85,357,qs),
(85,374,o),
(109,405,o),
(139,425,o),
(146,425,qs),
(167,425,o),
(242,419,o),
(262,416,q),
(269,342,l),
(287,342,l),
(289,439,l),
(268,442,o),
(165,450,o),
(146,450,qs),
(130,450,o),
(73,404,o),
(63,383,qs),
(57,369,o),
(57,349,qs),
(57,319,o),
(86,276,o),
(126,247,o),
(169,220,qs),
(189,208,ls),
(233,182,o),
(274,140,o),
(274,104,qs),
(274,85,o),
(250,44,o),
(217,16,o),
(205,16,qs),
(193,16,o),
(140,20,o),
(126,21,qs),
(78,25,l),
(68,106,l),
(51,106,l),
(50,2,l),
(112,-5,o),
(166,-8,q),
(152,-59,l),
(157,-73,l),
(193,-76,o),
(233,-102,o),
(233,-122,qs),
(233,-143,o),
(200,-168,o),
(156,-187,q),
(163,-204,l),
(192,-193,o),
(242,-168,o),
(250,-159,qs),
(255,-152,o),
(263,-130,o),
(263,-120,qs),
(263,-97,o),
(215,-59,o),
(182,-54,q),
(186,-9,l),
(194,-10,o),
(206,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
49 1 5 3 22 1 0 2 2 76 19 12 11 2 4 0 73 0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 52 77 0 2 2 0 97 7 6 2 0 0 50 0 78 0 0 0 73 0 72 55 54 51 50 47 45 30 28 24 23 21 20 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 338;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = scircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (281,0);
ref = uni0302;
}
);
width = 338;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = uni0219;
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (198,0);
ref = uni0326;
}
);
width = 338;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni1E63;
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (196,0);
ref = dotbelowcomb;
}
);
width = 338;
}
);
note = uni1E63;
unicode = 7779;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(242,372,o),
(262,418,o),
(280,449,qs),
(297,479,o),
(315,520,o),
(315,540,qs),
(315,591,o),
(222,637,o),
(160,637,qs),
(143,637,o),
(108,603,o),
(86,557,o),
(86,542,qs),
(86,-45,ls),
(86,-80,o),
(67,-144,o),
(56,-147,qs),
(47,-149,o),
(-25,-149,q),
(-25,-164,l),
(-3,-168,o),
(40,-174,o),
(51,-175,qs),
(65,-175,o),
(94,-142,o),
(114,-89,o),
(114,-59,qs),
(114,3,l),
(152,-1,ls),
(165,-2,o),
(237,-9,o),
(259,-9,qs),
(280,-9,o),
(356,65,o),
(369,95,q),
(370,100,o),
(376,119,o),
(376,129,qs),
(376,155,o),
(344,201,o),
(311,235,qs),
(276,271,o),
(242,319,o),
(242,348,qs)
);
},
{
closed = 1;
nodes = (
(239,14,o),
(158,22,o),
(114,29,q),
(114,547,ls),
(114,559,o),
(129,588,o),
(147,609,o),
(150,610,qs),
(160,612,o),
(168,612,qs),
(187,612,o),
(219,606,qs),
(249,599,o),
(290,565,o),
(290,537,qs),
(290,520,o),
(274,487,o),
(257,458,qs),
(236,424,o),
(215,375,o),
(215,347,qs),
(215,313,o),
(253,257,o),
(292,216,qs),
(321,187,o),
(349,150,o),
(349,131,qs),
(349,108,o),
(313,53,o),
(266,14,o),
(255,14,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
71 1 5 4 15 1 0 5 23 1 1 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 0 1 0 2 1 128 0 4 4 3 97 0 3 3 51 77 6 1 5 5 0 97 0 0 0 50 77 0 1 1 46 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 0 1 0 2 1 128 0 3 0 4 5 3 4 105 6 1 5 5 0 97 0 0 0 50 77 0 1 1 46 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
44 44 44 74 44 73 64 63 40 20 23 42 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = longs;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,-10,o),
(169,2,q),
(169,19,l),
(111,19,l),
(111,515,ls),
(111,547,o),
(125,590,o),
(142,611,o),
(145,611,qs),
(168,611,o),
(249,600,q),
(259,616,o),
(259,619,qs),
(259,623,o),
(249,631,q),
(182,637,o),
(151,637,qs),
(122,637,o),
(82,564,o),
(82,513,qs),
(82,442,l),
(35,433,l),
(35,415,l),
(82,415,l),
(82,7,ls),
(82,4,o),
(100,-10,o),
(102,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
16 6 5 3 0 2 25 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 2 3 2 0 3 128 0 3 4 2 3 4 126 0 2 2 1 97 0 1 1 51 77 0 4 4 50 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 2 3 2 0 3 128 0 3 4 2 3 4 126 0 1 0 2 0 1 2 105 0 4 4 50 4 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
18 21 22 37 19 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 209;
}
);
note = longs;
unicode = 383;
},
{
glyphname = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,-9,o),
(207,-4,o),
(231,-1,q),
(231,16,l),
(146,18,ls),
(134,18,o),
(124,30,o),
(124,46,qs),
(124,415,l),
(227,415,l),
(227,440,l),
(124,440,l),
(124,510,l),
(115,517,o),
(108,517,q),
(93,443,l),
(29,434,l),
(29,415,l),
(95,415,l),
(95,31,ls),
(95,23,o),
(124,-10,o),
(132,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
5 1 0 1 19 1 4 3 2 76 9 7 2 1 74 2 1 0 0 1 95 0 1 1 44 77 0 3 3 4 97 0 4 4 50 4 78 19 35 17 22 19 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = t;
unicode = 116;
},
{
glyphname = tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,18,o),
(124,30,o),
(124,46,qs),
(124,228,l),
(229,228,l),
(229,248,l),
(124,248,l),
(124,415,l),
(227,415,l),
(227,440,l),
(124,440,l),
(124,510,l),
(115,517,o),
(108,517,q),
(93,443,l),
(29,434,l),
(29,415,l),
(95,415,l),
(95,248,l),
(31,248,l),
(31,228,l),
(95,228,l),
(95,31,ls),
(95,23,o),
(124,-10,o),
(132,-10,qs),
(149,-9,o),
(207,-4,o),
(231,-1,q),
(231,16,l),
(146,18,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
14 1 3 4 1 1 0 8 2 76 18 16 2 4 74 6 1 2 7 1 1 8 2 1 103 5 1 3 3 4 95 0 4 4 44 77 9 1 8 8 0 97 0 0 0 50 0 78 0 0 0 30 0 29 17 17 17 22 17 17 20 19 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = t;
},
{
pos = (213,0);
ref = caroncomb.alt;
}
);
width = 264;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0163;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,-7,l),
(231,-1,l),
(231,16,l),
(146,18,ls),
(134,18,o),
(124,30,o),
(124,46,qs),
(124,415,l),
(227,415,l),
(227,440,l),
(124,440,l),
(124,510,l),
(115,517,o),
(108,517,q),
(93,443,l),
(29,434,l),
(29,415,l),
(95,415,l),
(95,31,ls),
(95,23,o),
(124,-10,o),
(132,-10,qs),
(158,-8,l),
(144,-59,l),
(149,-73,l),
(185,-76,o),
(225,-102,o),
(225,-122,qs),
(225,-143,o),
(192,-168,o),
(148,-187,q),
(155,-204,l),
(184,-193,o),
(234,-168,o),
(242,-159,qs),
(247,-152,o),
(255,-130,o),
(255,-120,qs),
(255,-97,o),
(207,-59,o),
(174,-54,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
24 1 0 1 1 76 28 26 2 1 74 40 38 17 16 9 8 6 3 73 0 3 0 3 134 2 1 0 0 1 95 0 1 1 44 0 78 37 35 32 31 30 29 23 22 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = uni021B;
layers = (
{
layerId = m01;
shapes = (
{
ref = t;
},
{
pos = (190,0);
ref = uni0326;
}
);
width = 264;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = uni1E6D;
layers = (
{
layerId = m01;
shapes = (
{
ref = t;
},
{
pos = (188,0);
ref = dotbelowcomb;
}
);
width = 264;
}
);
note = uni1E6D;
unicode = 7789;
},
{
glyphname = u;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,-10,o),
(320,52,o),
(339,69,q),
(337,7,ls),
(337,4,o),
(355,-10,o),
(357,-10,qs),
(366,-10,o),
(424,2,q),
(424,19,l),
(366,19,l),
(366,433,ls),
(366,436,o),
(348,450,o),
(346,450,qs),
(337,450,o),
(279,438,q),
(279,421,l),
(337,421,l),
(337,98,l),
(241,17,o),
(231,17,qs),
(195,17,o),
(148,34,o),
(118,92,o),
(118,150,qs),
(118,433,ls),
(118,436,o),
(102,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,164,ls),
(89,96,o),
(117,21,o),
(180,-10,o),
(237,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
21 6 2 0 1 35 18 2 2 0 29 1 6 2 3 76 3 1 0 1 2 1 0 2 128 4 1 1 1 52 77 5 1 2 2 6 97 8 7 2 6 6 50 6 78 0 0 0 38 0 37 18 20 18 18 39 18 20 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (294,0);
ref = acutecomb;
}
);
width = 453;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (335,0);
ref = uni0306;
}
);
width = 453;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = uni01D4;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (318,0);
ref = uni030C;
}
);
width = 453;
}
);
note = uni01D4;
unicode = 468;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (317,0);
ref = uni0302;
}
);
width = 453;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = uni0215;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (306,0);
ref = uni030F;
}
);
width = 453;
}
);
note = uni0215;
unicode = 533;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (299,0);
ref = uni0308;
}
);
width = 453;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = uni01D8;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (299,0);
ref = uni0308;
},
{
pos = (295,135);
ref = acutecomb;
}
);
width = 453;
}
);
note = uni01D8;
unicode = 472;
},
{
glyphname = uni01DA;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (299,0);
ref = uni0308;
},
{
pos = (319,135);
ref = uni030C;
}
);
width = 453;
}
);
note = uni01DA;
unicode = 474;
},
{
glyphname = uni01DC;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (299,0);
ref = uni0308;
},
{
pos = (270,135);
ref = gravecomb;
}
);
width = 453;
}
);
note = uni01DC;
unicode = 476;
},
{
glyphname = uni01D6;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (299,0);
ref = uni0308;
},
{
pos = (325,135);
ref = uni0304;
}
);
width = 453;
}
);
note = uni01D6;
unicode = 470;
},
{
glyphname = uni1EE5;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (243,0);
ref = dotbelowcomb;
}
);
width = 453;
}
);
note = uni1EE5;
unicode = 7909;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (269,0);
ref = gravecomb;
}
);
width = 453;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uni1EE7;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (273,0);
ref = hookabovecomb;
}
);
width = 453;
}
);
note = uni1EE7;
unicode = 7911;
},
{
glyphname = uhorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(366,433,ls),
(366,435,o),
(361,440,q),
(384,453,o),
(418,498,o),
(423,529,q),
(402,537,l),
(397,506,o),
(363,461,o),
(341,450,q),
(279,438,l),
(279,421,l),
(337,421,l),
(337,98,l),
(241,17,o),
(231,17,qs),
(195,17,o),
(148,34,o),
(118,92,o),
(118,150,qs),
(118,433,ls),
(118,436,o),
(102,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,164,ls),
(89,96,o),
(117,21,o),
(180,-10,o),
(237,-10,qs),
(241,-10,o),
(320,52,o),
(339,69,q),
(337,7,ls),
(337,4,o),
(355,-10,o),
(357,-10,qs),
(366,-10,o),
(424,2,q),
(424,19,l),
(366,19,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
40 32 17 3 2 3 29 7 2 4 2 1 1 0 4 3 76 37 36 2 3 74 5 1 2 3 4 3 2 4 128 0 3 3 52 77 7 6 2 4 4 0 97 1 1 0 0 50 0 78 0 0 0 43 0 43 18 39 18 20 38 18 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uhorn;
unicode = 432;
},
{
glyphname = uni1EE9;
layers = (
{
layerId = m01;
shapes = (
{
ref = uhorn;
},
{
pos = (294,0);
ref = acutecomb;
}
);
width = 453;
}
);
note = uni1EE9;
unicode = 7913;
},
{
glyphname = uni1EF1;
layers = (
{
layerId = m01;
shapes = (
{
ref = uhorn;
},
{
pos = (243,0);
ref = dotbelowcomb;
}
);
width = 453;
}
);
note = uni1EF1;
unicode = 7921;
},
{
glyphname = uni1EEB;
layers = (
{
layerId = m01;
shapes = (
{
ref = uhorn;
},
{
pos = (269,0);
ref = gravecomb;
}
);
width = 453;
}
);
note = uni1EEB;
unicode = 7915;
},
{
glyphname = uni1EED;
layers = (
{
layerId = m01;
shapes = (
{
ref = uhorn;
},
{
pos = (273,0);
ref = hookabovecomb;
}
);
width = 453;
}
);
note = uni1EED;
unicode = 7917;
},
{
glyphname = uni1EEF;
layers = (
{
layerId = m01;
shapes = (
{
ref = uhorn;
},
{
pos = (344,0);
ref = tildecomb;
}
);
width = 453;
}
);
note = uni1EEF;
unicode = 7919;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (348,0);
ref = uni030B;
}
);
width = 453;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = uni0217;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (335,0);
ref = uni0311;
}
);
width = 453;
}
);
note = uni0217;
unicode = 535;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (324,0);
ref = uni0304;
}
);
width = 453;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(424,19,l),
(366,19,l),
(366,433,ls),
(366,436,o),
(348,450,o),
(346,450,qs),
(337,450,o),
(279,438,q),
(279,421,l),
(337,421,l),
(337,98,l),
(241,17,o),
(231,17,qs),
(195,17,o),
(148,34,o),
(118,92,o),
(118,150,qs),
(118,433,ls),
(118,436,o),
(102,450,o),
(98,450,qs),
(89,450,o),
(31,438,q),
(31,421,l),
(89,421,l),
(89,164,ls),
(89,96,o),
(117,21,o),
(180,-10,o),
(237,-10,qs),
(241,-10,o),
(320,52,o),
(339,69,q),
(337,7,ls),
(337,4,o),
(355,-10,o),
(357,-10,qs),
(363,-10,o),
(395,-4,q),
(324,-60,o),
(294,-88,q),
(289,-106,o),
(289,-123,qs),
(289,-157,o),
(320,-211,o),
(345,-211,qs),
(355,-211,o),
(423,-202,q),
(423,-187,l),
(349,-188,ls),
(335,-188,o),
(317,-149,o),
(317,-123,qs),
(317,-113,o),
(318,-108,qs),
(319,-101,o),
(396,-25,o),
(407,-14,qs),
(424,2,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
50 35 2 3 4 47 25 2 5 3 58 19 2 2 5 10 1 1 0 4 76 6 1 3 4 5 4 3 5 128 0 0 0 1 0 1 101 7 1 4 4 52 77 8 1 5 5 2 97 0 2 2 50 2 78 20 18 18 39 18 20 46 34 39 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (300,0);
ref = uni030A;
}
);
width = 453;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (344,0);
ref = tildecomb;
}
);
width = 453;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
kernRight = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,-6,l),
(366,430,l),
(366,433,o),
(355,450,o),
(352,450,qs),
(343,450,o),
(254,441,q),
(254,421,l),
(334,421,l),
(210,28,l),
(208,28,l),
(185,118,l),
(94,433,ls),
(93,436,o),
(79,450,o),
(75,450,qs),
(66,450,o),
(9,438,q),
(9,421,l),
(68,421,l),
(192,-4,l),
(196,-11,o),
(199,-11,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
15 4 2 0 1 1 76 22 11 2 0 73 2 1 0 1 0 134 3 1 1 1 52 1 78 18 23 18 18 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 398;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernRight = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,-6,l),
(309,278,l),
(312,278,l),
(387,-4,l),
(391,-11,o),
(394,-11,q),
(419,-6,l),
(553,430,l),
(553,433,o),
(542,450,o),
(539,450,qs),
(530,450,o),
(438,441,q),
(438,421,l),
(521,421,l),
(405,28,l),
(403,28,l),
(383,118,l),
(299,433,ls),
(298,436,o),
(284,450,o),
(280,450,qs),
(272,450,o),
(219,438,q),
(219,421,l),
(273,421,l),
(299,324,l),
(205,28,l),
(203,28,l),
(182,118,l),
(94,433,ls),
(93,436,o),
(79,450,o),
(75,450,qs),
(66,450,o),
(9,438,q),
(9,421,l),
(68,421,l),
(187,-4,l),
(191,-11,o),
(194,-11,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
27 16 4 3 0 1 1 76 40 37 34 23 13 11 6 0 73 4 2 2 0 1 0 134 5 3 2 1 1 52 1 78 18 22 34 24 18 18 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 585;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
kernRight = w;
layers = (
{
layerId = m01;
shapes = (
{
ref = w;
},
{
pos = (372,0);
ref = acutecomb;
}
);
width = 585;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
kernRight = w;
layers = (
{
layerId = m01;
shapes = (
{
ref = w;
},
{
pos = (395,0);
ref = uni0302;
}
);
width = 585;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
kernRight = w;
layers = (
{
layerId = m01;
shapes = (
{
ref = w;
},
{
pos = (377,0);
ref = uni0308;
}
);
width = 585;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
kernRight = w;
layers = (
{
layerId = m01;
shapes = (
{
ref = w;
},
{
pos = (347,0);
ref = gravecomb;
}
);
width = 585;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,-10,o),
(122,-1,q),
(122,19,l),
(48,19,l),
(196,208,l),
(324,7,ls),
(326,3,o),
(340,-10,o),
(344,-10,qs),
(350,-10,o),
(392,2,q),
(392,19,l),
(350,19,l),
(215,229,l),
(369,426,l),
(368,431,o),
(358,451,o),
(355,451,qs),
(346,451,o),
(261,442,q),
(261,422,l),
(333,422,l),
(201,252,l),
(84,434,ls),
(81,439,o),
(69,451,o),
(66,451,qs),
(60,451,o),
(15,439,q),
(15,422,l),
(57,422,l),
(181,230,l),
(14,18,l),
(15,12,o),
(25,-10,o),
(28,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
15 6 2 0 1 30 21 12 3 4 4 0 33 24 2 5 4 3 76 2 1 0 1 4 1 0 4 128 6 1 4 5 1 4 5 126 3 1 1 1 52 77 7 1 5 5 50 5 78 18 20 34 21 18 20 34 20 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernRight = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,-176,o),
(238,-164,q),
(239,-147,l),
(181,-147,l),
(225,-6,l),
(367,430,l),
(367,433,o),
(355,450,o),
(352,450,qs),
(343,450,o),
(254,441,q),
(254,421,l),
(334,421,l),
(210,25,l),
(205,25,l),
(183,110,l),
(95,433,ls),
(94,436,o),
(79,450,o),
(75,450,qs),
(66,450,o),
(9,438,q),
(9,421,l),
(68,421,l),
(186,-8,l),
(190,-11,l),
(197,-10,l),
(151,-151,ls),
(150,-154,o),
(169,-176,o),
(171,-176,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
19 8 2 0 1 15 3 2 4 0 28 1 5 4 3 76 2 1 0 1 4 1 0 4 128 0 4 5 1 4 5 126 3 1 1 1 52 77 0 5 5 46 5 78 18 21 18 23 18 22 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 397;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernRight = y;
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (281,0);
ref = acutecomb;
}
);
width = 397;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernRight = y;
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (304,0);
ref = uni0302;
}
);
width = 397;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernRight = y;
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (286,0);
ref = uni0308;
}
);
width = 397;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = uni1EF5;
kernRight = y;
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (357,0);
ref = dotbelowcomb;
}
);
width = 397;
}
);
note = uni1EF5;
unicode = 7925;
},
{
glyphname = ygrave;
kernRight = y;
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (256,0);
ref = gravecomb;
}
);
width = 397;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF7;
kernRight = y;
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (260,0);
ref = hookabovecomb;
}
);
width = 397;
}
);
note = uni1EF7;
unicode = 7927;
},
{
glyphname = uni0233;
kernRight = y;
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (311,0);
ref = uni0304;
}
);
width = 397;
}
);
note = uni0233;
unicode = 563;
},
{
glyphname = uni1EF9;
kernRight = y;
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (331,0);
ref = tildecomb;
}
);
width = 397;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,0,l),
(316,107,l),
(299,107,l),
(290,26,l),
(77,26,l),
(77,30,l),
(78,32,o),
(167,181,qs),
(268,347,o),
(306,416,q),
(305,419,o),
(292,440,q),
(49,440,l),
(55,342,l),
(72,342,l),
(78,414,l),
(271,414,l),
(273,412,l),
(156,216,l),
(42,25,l),
(42,20,o),
(55,0,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 4 0 1 114 0 4 3 3 4 112 0 0 0 2 95 0 2 2 44 77 0 3 3 5 96 0 5 5 42 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 0 1 4 128 0 4 3 0 4 3 126 0 0 0 2 95 0 2 2 44 77 0 3 3 5 96 0 5 5 42 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 53 17 17 35 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
ref = z;
},
{
pos = (256,0);
ref = acutecomb;
}
);
width = 359;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
ref = z;
},
{
pos = (280,0);
ref = uni030C;
}
);
width = 359;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
ref = z;
},
{
pos = (199,0);
ref = uni0307;
}
);
width = 359;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = uni1E93;
layers = (
{
layerId = m01;
shapes = (
{
ref = z;
},
{
pos = (209,0);
ref = dotbelowcomb;
}
);
width = 359;
}
);
note = uni1E93;
unicode = 7827;
},
{
glyphname = germandbls.calt;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni1E9E;
}
);
width = 493;
}
);
note = germandbls.calt;
},
{
glyphname = cacute.loclPLK;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
pos = (153,0);
ref = acute.loclPLK;
}
);
width = 322;
}
);
note = cacute.loclPLK;
},
{
glyphname = nacute.loclPLK;
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (189,0);
ref = acute.loclPLK;
}
);
width = 454;
}
);
note = nacute.loclPLK;
},
{
glyphname = oacute.loclPLK;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (188,0);
ref = acute.loclPLK;
}
);
width = 439;
}
);
note = oacute.loclPLK;
},
{
glyphname = sacute.loclPLK;
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (144,0);
ref = acute.loclPLK;
}
);
width = 338;
}
);
note = sacute.loclPLK;
},
{
glyphname = zacute.loclPLK;
layers = (
{
layerId = m01;
shapes = (
{
ref = z;
},
{
pos = (142,0);
ref = acute.loclPLK;
}
);
width = 359;
}
);
note = zacute.loclPLK;
},
{
glyphname = c_k;
kernLeft = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(372,634,o),
(344,634,qs),
(337,634,o),
(306,611,o),
(279,578,o),
(275,563,qs),
(269,533,o),
(269,444,q),
(221,450,o),
(209,450,qs),
(198,450,o),
(154,427,o),
(104,386,o),
(86,360,q),
(54,301,o),
(54,195,qs),
(54,97,o),
(136,-10,o),
(213,-10,qs),
(221,-10,o),
(278,-2,o),
(296,1,q),
(296,18,l),
(221,15,ls),
(154,15,o),
(83,100,o),
(83,202,qs),
(83,285,o),
(117,366,o),
(148,392,qs),
(166,407,o),
(202,425,o),
(213,425,qs),
(236,425,o),
(270,417,q),
(270,391,o),
(274,317,q),
(293,317,l),
(293,338,o),
(292,348,q),
(291,452,ls),
(291,523,o),
(309,586,o),
(338,606,q),
(350,608,o),
(358,608,qs),
(373,608,o),
(405,602,q),
(405,7,ls),
(405,4,o),
(423,-10,o),
(425,-10,qs),
(434,-10,o),
(492,2,q),
(492,19,l),
(434,19,l),
(434,620,l)
);
},
{
closed = 1;
nodes = (
(506,239,l),
(704,427,l),
(703,432,o),
(695,450,o),
(692,450,qs),
(683,450,o),
(592,442,q),
(592,422,l),
(662,422,l),
(473,243,l),
(473,236,l),
(645,7,ls),
(649,1,o),
(669,-10,o),
(674,-10,qs),
(681,-10,o),
(732,2,q),
(732,19,l),
(672,19,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
56 1 2 8 8 1 7 2 68 48 2 4 7 21 16 2 3 4 74 64 2 0 3 58 34 2 3 1 0 6 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 4 0 4 3 0 128 0 2 2 8 97 0 8 8 51 77 10 1 4 4 7 97 11 1 7 7 52 77 13 12 5 3 0 0 1 97 9 6 2 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 3 4 0 4 3 0 128 0 8 0 2 7 8 2 105 10 1 4 4 7 97 11 1 7 7 52 77 13 12 5 3 0 0 1 97 9 6 2 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
57 57 57 75 57 75 70 69 67 66 61 59 38 39 35 39 35 24 21 18 16 14 8 31 
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = c_k;
},
{
glyphname = f_f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,-10,o),
(154,2,q),
(154,19,l),
(96,19,l),
(96,415,l),
(264,415,l),
(264,7,ls),
(264,4,o),
(282,-10,o),
(284,-10,qs),
(293,-10,o),
(351,2,q),
(351,19,l),
(293,19,l),
(293,415,l),
(388,415,l),
(388,440,l),
(293,440,l),
(293,515,ls),
(293,547,o),
(307,590,o),
(324,611,o),
(327,611,qs),
(350,611,o),
(431,600,q),
(441,616,o),
(441,619,qs),
(441,623,o),
(431,631,q),
(364,637,o),
(333,637,qs),
(304,637,o),
(264,564,o),
(264,513,qs),
(264,440,l),
(96,440,l),
(96,515,ls),
(96,547,o),
(110,590,o),
(127,611,o),
(130,611,qs),
(153,611,o),
(234,600,q),
(244,616,o),
(244,619,qs),
(244,623,o),
(234,631,q),
(167,637,o),
(136,637,qs),
(107,637,o),
(67,564,o),
(67,513,qs),
(67,442,l),
(20,433,l),
(20,415,l),
(67,415,l),
(67,7,ls),
(67,4,o),
(85,-10,o),
(87,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
34 16 6 3 3 2 5 1 0 3 57 47 2 9 8 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
11 1 8 0 9 0 8 9 128 5 1 2 2 1 97 4 1 1 1 51 77 10 7 2 0 0 3 95 6 1 3 3 44 77 12 1 9 9 50 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
11 1 8 0 9 0 8 9 128 4 1 1 5 1 2 3 1 2 105 10 7 2 0 0 3 95 6 1 3 3 44 77 12 1 9 9 50 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
59 58 56 55 54 53 49 48 17 17 21 22 35 21 22 37 19 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 386;
}
);
note = f_f;
},
{
glyphname = f_f_i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,-10,o),
(154,2,q),
(154,19,l),
(96,19,l),
(96,425,l),
(264,425,l),
(264,7,ls),
(264,4,o),
(282,-10,o),
(284,-10,qs),
(293,-10,o),
(351,2,q),
(351,19,l),
(293,19,l),
(293,425,l),
(477,425,l),
(477,7,ls),
(477,4,o),
(495,-10,o),
(497,-10,qs),
(506,-10,o),
(564,2,q),
(564,19,l),
(506,19,l),
(506,433,ls),
(506,436,o),
(488,450,o),
(486,450,qs),
(293,450,l),
(293,515,ls),
(293,547,o),
(316,590,o),
(343,611,o),
(347,611,qs),
(362,611,o),
(454,601,o),
(481,597,q),
(491,613,o),
(491,616,qs),
(491,620,o),
(481,628,q),
(456,631,o),
(376,637,o),
(353,637,qs),
(333,637,o),
(292,602,o),
(264,545,o),
(264,513,qs),
(264,450,l),
(96,450,l),
(96,515,ls),
(96,547,o),
(110,590,o),
(127,611,o),
(130,611,qs),
(153,611,o),
(234,600,q),
(244,616,o),
(244,619,qs),
(244,623,o),
(234,631,q),
(167,637,o),
(136,637,qs),
(107,637,o),
(67,564,o),
(67,513,qs),
(67,452,l),
(20,443,l),
(20,425,l),
(67,425,l),
(67,7,ls),
(67,4,o),
(85,-10,o),
(87,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
36 16 6 3 3 2 5 1 0 3 71 61 51 3 8 7 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
13 10 2 7 0 8 0 7 8 128 5 1 2 2 1 97 4 1 1 1 51 77 12 9 2 0 0 3 95 6 1 3 3 44 77 14 11 2 8 8 50 8 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
13 10 2 7 0 8 0 7 8 128 4 1 1 5 1 2 3 1 2 105 12 9 2 0 0 3 95 6 1 3 3 44 77 14 11 2 8 8 50 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
13 10 2 7 0 8 0 7 8 128 4 1 1 5 1 2 3 1 2 105 6 1 3 12 9 2 0 7 3 0 103 14 11 2 8 8 50 8 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
73 72 70 69 68 67 63 62 60 59 58 57 18 20 21 24 36 21 22 37 19 15 8 31 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = f_f_i;
},
{
glyphname = f_f_l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,-10,o),
(154,2,q),
(154,19,l),
(96,19,l),
(96,415,l),
(264,415,l),
(264,7,ls),
(264,4,o),
(282,-10,o),
(284,-10,qs),
(293,-10,o),
(351,2,q),
(351,19,l),
(293,19,l),
(293,415,l),
(388,415,l),
(388,440,l),
(293,440,l),
(293,515,ls),
(293,547,o),
(316,590,o),
(343,611,o),
(347,611,qs),
(397,611,o),
(477,593,q),
(477,7,ls),
(477,4,o),
(495,-10,o),
(497,-10,qs),
(506,-10,o),
(564,2,q),
(564,19,l),
(506,19,l),
(506,617,l),
(406,637,o),
(353,637,qs),
(333,637,o),
(292,602,o),
(264,545,o),
(264,513,qs),
(264,440,l),
(96,440,l),
(96,515,ls),
(96,547,o),
(110,590,o),
(127,611,o),
(130,611,qs),
(153,611,o),
(234,600,q),
(244,616,o),
(244,619,qs),
(244,623,o),
(236,631,o),
(234,631,qs),
(192,637,o),
(136,637,qs),
(107,637,o),
(67,564,o),
(67,513,qs),
(67,442,l),
(20,433,l),
(20,415,l),
(67,415,l),
(67,7,ls),
(67,4,o),
(85,-10,o),
(87,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
32 1 2 1 41 17 6 3 3 2 5 1 0 3 64 54 35 3 6 5 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
13 10 2 5 0 6 0 5 6 128 7 1 2 2 1 97 4 1 1 1 51 77 12 9 2 0 0 3 95 8 1 3 3 44 77 14 11 2 6 6 50 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
13 10 2 5 0 6 0 5 6 128 4 1 1 7 1 2 3 1 2 105 12 9 2 0 0 3 95 8 1 3 3 44 77 14 11 2 6 6 50 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
66 65 63 62 61 60 56 55 53 52 51 50 21 21 18 18 36 21 23 37 19 15 8 31 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = f_f_l;
},
{
glyphname = f_h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(569,276,ls),
(569,344,o),
(541,419,o),
(478,450,o),
(421,450,qs),
(415,450,o),
(319,373,q),
(317,374,l),
(319,616,l),
(281,623,o),
(171,637,o),
(151,637,qs),
(132,637,o),
(92,603,o),
(67,545,o),
(67,513,qs),
(67,442,l),
(20,433,l),
(20,415,l),
(67,415,l),
(67,7,ls),
(67,4,o),
(85,-10,o),
(87,-10,qs),
(96,-10,o),
(154,2,q),
(154,19,l),
(96,19,l),
(96,415,l),
(191,415,l),
(191,440,l),
(96,440,l),
(96,515,ls),
(96,547,o),
(117,590,o),
(141,611,o),
(145,611,qs),
(162,611,o),
(251,598,o),
(290,591,q),
(290,7,ls),
(290,4,o),
(308,-10,o),
(310,-10,qs),
(319,-10,o),
(377,2,q),
(377,19,l),
(319,19,l),
(319,342,l),
(351,368,o),
(424,423,o),
(427,423,qs),
(463,423,o),
(510,406,o),
(540,348,o),
(540,290,qs),
(540,7,ls),
(540,4,o),
(556,-10,o),
(560,-10,qs),
(569,-10,o),
(627,2,q),
(627,19,l),
(569,19,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
54 1 4 10 23 1 11 4 46 1 5 11 45 1 1 5 55 14 2 2 6 37 17 1 3 0 2 6 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
13 12 7 3 2 6 0 6 2 0 128 0 4 4 10 97 0 10 10 51 77 0 1 1 11 97 0 11 11 52 77 9 1 6 6 5 95 0 5 5 44 77 8 3 2 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
13 12 7 3 2 6 0 6 2 0 128 0 10 0 4 11 10 4 105 0 1 1 11 97 0 11 11 52 77 9 1 6 6 5 95 0 5 5 44 77 8 3 2 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 63 0 63 59 57 52 50 44 43 18 17 17 21 22 18 20 23 18 14 8 31 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = f_h;
},
{
glyphname = f_iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,620,l),
(377,634,l),
(361,648,l),
(241,549,l),
(251,537,l)
);
},
{
closed = 1;
nodes = (
(96,-10,o),
(154,2,q),
(154,19,l),
(96,19,l),
(96,415,l),
(280,415,l),
(280,7,ls),
(280,4,o),
(298,-10,o),
(300,-10,qs),
(309,-10,o),
(367,2,q),
(367,19,l),
(309,19,l),
(309,423,ls),
(309,426,o),
(291,440,o),
(289,440,qs),
(96,440,l),
(96,515,ls),
(96,547,o),
(119,590,o),
(146,611,o),
(150,611,qs),
(164,611,o),
(230,602,q),
(240,618,o),
(240,621,qs),
(240,625,o),
(230,633,q),
(184,637,o),
(156,637,qs),
(136,637,o),
(95,602,o),
(67,545,o),
(67,513,qs),
(67,442,l),
(20,433,l),
(20,415,l),
(67,415,l),
(67,7,ls),
(67,4,o),
(85,-10,o),
(87,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
3 1 2 1 22 11 4 3 3 2 10 1 0 3 46 36 2 5 4 4 76 1 1 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 4 0 5 0 4 5 128 0 2 2 1 97 0 1 1 51 77 6 1 0 0 3 95 0 3 3 44 77 8 1 5 5 50 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
7 1 4 0 5 0 4 5 128 0 1 0 2 3 1 2 105 6 1 0 0 3 95 0 3 3 44 77 8 1 5 5 50 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
18 17 20 18 20 21 22 38 24 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
note = f_iacute;
},
{
glyphname = fi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,-10,o),
(154,2,q),
(154,19,l),
(96,19,l),
(96,415,l),
(280,415,l),
(280,7,ls),
(280,4,o),
(298,-10,o),
(300,-10,qs),
(309,-10,o),
(367,2,q),
(367,19,l),
(309,19,l),
(309,423,ls),
(309,426,o),
(291,440,o),
(289,440,qs),
(96,440,l),
(96,515,ls),
(96,547,o),
(119,590,o),
(146,611,o),
(150,611,qs),
(165,611,o),
(257,601,o),
(284,597,q),
(294,613,o),
(294,616,qs),
(294,620,o),
(284,628,q),
(259,631,o),
(179,637,o),
(156,637,qs),
(136,637,o),
(95,602,o),
(67,545,o),
(67,513,qs),
(67,442,l),
(20,433,l),
(20,415,l),
(67,415,l),
(67,7,ls),
(67,4,o),
(85,-10,o),
(87,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
18 6 2 3 2 5 1 0 3 43 33 2 5 4 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 4 0 5 0 4 5 128 0 2 2 1 97 0 1 1 51 77 6 1 0 0 3 95 0 3 3 44 77 8 1 5 5 50 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
7 1 4 0 5 0 4 5 128 0 1 0 2 3 1 2 105 6 1 0 0 3 95 0 3 3 44 77 8 1 5 5 50 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
18 17 20 18 20 21 24 38 19 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,-10,o),
(154,2,q),
(154,19,l),
(96,19,l),
(96,415,l),
(191,415,l),
(191,440,l),
(96,440,l),
(96,515,ls),
(96,547,o),
(119,590,o),
(146,611,o),
(150,611,qs),
(200,611,o),
(280,593,q),
(280,7,ls),
(280,4,o),
(298,-10,o),
(300,-10,qs),
(309,-10,o),
(367,2,q),
(367,19,l),
(309,19,l),
(309,604,ls),
(309,607,o),
(291,621,o),
(289,621,q),
(202,637,o),
(156,637,qs),
(136,637,o),
(95,602,o),
(67,545,o),
(67,513,qs),
(67,442,l),
(20,433,l),
(20,415,l),
(67,415,l),
(67,7,ls),
(67,4,o),
(85,-10,o),
(87,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 6 2 5 4 5 1 0 5 38 19 2 3 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
7 1 2 0 3 0 2 3 128 0 4 4 1 97 0 1 1 51 77 6 1 0 0 5 95 0 5 5 44 77 8 1 3 3 50 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
7 1 2 0 3 0 2 3 128 0 1 0 4 5 1 4 105 6 1 0 0 5 95 0 5 5 44 77 8 1 3 3 50 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
18 17 17 21 21 18 21 38 19 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = s_t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,20,o),
(463,41,o),
(449,83,o),
(449,112,qs),
(449,415,l),
(552,415,l),
(552,440,l),
(449,440,l),
(449,553,l),
(385,570,o),
(347,570,qs),
(330,570,o),
(282,533,o),
(274,514,qs),
(265,492,o),
(265,442,q),
(233,445,o),
(168,450,o),
(146,450,qs),
(130,450,o),
(73,403,o),
(63,383,qs),
(57,369,o),
(57,349,qs),
(57,320,o),
(86,277,o),
(127,247,o),
(169,221,qs),
(190,208,ls),
(220,190,o),
(253,165,o),
(275,129,o),
(275,104,qs),
(275,85,o),
(251,44,o),
(217,15,o),
(205,15,qs),
(188,15,o),
(130,21,qs),
(78,25,l),
(68,106,l),
(51,106,l),
(50,2,l),
(79,-2,o),
(188,-10,o),
(206,-10,qs),
(230,-10,o),
(290,49,o),
(299,77,qs),
(303,92,o),
(303,108,qs),
(303,139,o),
(265,193,o),
(190,240,o),
(183,244,qs),
(165,255,ls),
(121,282,o),
(84,322,o),
(84,357,qs),
(84,374,o),
(108,406,o),
(139,426,o),
(146,426,qs),
(168,425,o),
(237,420,o),
(265,416,q),
(265,371,o),
(270,324,q),
(289,324,l),
(288,418,ls),
(288,470,o),
(302,524,o),
(324,542,q),
(336,548,o),
(353,548,qs),
(374,548,o),
(420,536,q),
(420,442,l),
(354,432,l),
(354,415,l),
(420,415,l),
(420,114,ls),
(420,82,o),
(440,24,o),
(472,-10,o),
(489,-10,qs),
(502,-10,o),
(556,-1,q),
(556,16,l),
(510,16,o),
(487,19,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
81 1 3 10 13 1 9 3 74 12 2 11 9 11 1 5 11 24 1 2 5 47 2 2 1 0 6 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 4 2 7 2 4 7 128 0 7 0 2 7 0 126 0 3 3 10 97 0 10 10 41 77 0 5 5 9 97 0 9 9 52 77 12 1 2 2 11 95 0 11 11 44 77 8 1 0 0 1 97 6 1 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 4 2 7 2 4 7 128 0 7 0 2 7 0 126 0 10 0 3 9 10 3 105 0 5 5 9 97 0 9 9 52 77 12 1 2 2 11 95 0 11 11 44 77 8 1 0 0 1 97 6 1 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
85 84 83 82 80 78 72 70 54 52 49 48 45 43 20 21 36 20 34 16 13 8 28 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = s_t;
},
{
glyphname = t_t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,-9,o),
(207,-4,o),
(231,-1,q),
(231,16,l),
(146,18,ls),
(134,18,o),
(124,30,o),
(124,46,qs),
(124,415,l),
(323,415,l),
(323,31,ls),
(323,23,o),
(352,-10,o),
(360,-10,qs),
(377,-9,o),
(435,-4,o),
(459,-1,q),
(459,16,l),
(374,18,ls),
(362,18,o),
(352,30,o),
(352,46,qs),
(352,415,l),
(455,415,l),
(455,440,l),
(352,440,l),
(352,510,l),
(343,517,o),
(336,517,q),
(314,440,l),
(124,440,l),
(124,510,l),
(115,517,o),
(108,517,q),
(86,440,l),
(29,432,l),
(29,415,l),
(95,415,l),
(95,31,ls),
(95,23,o),
(124,-10,o),
(132,-10,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 1 0 1 38 24 2 5 4 2 76 14 12 9 7 4 1 74 6 3 2 0 0 1 95 2 1 1 1 44 77 7 1 4 4 5 97 8 1 5 5 50 5 78 19 35 20 19 35 17 20 22 19 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 492;
}
);
note = t_t;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,320,o),
(234,364,qs),
(257,383,l),
(256,333,ls),
(256,331,o),
(270,320,o),
(272,320,qs),
(279,320,o),
(331,329,q),
(331,343,l),
(285,343,l),
(285,672,l),
(184,686,o),
(169,686,qs),
(155,686,o),
(94,645,o),
(72,614,q),
(60,593,o),
(46,525,o),
(46,485,qs),
(46,414,o),
(104,320,o),
(175,320,qs)
);
},
{
closed = 1;
nodes = (
(130,346,o),
(75,407,o),
(75,491,qs),
(75,557,o),
(114,633,o),
(161,660,o),
(177,660,qs),
(198,660,o),
(256,648,q),
(256,411,l),
(251,407,o),
(181,346,o),
(173,346,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
10 1 4 0 26 25 19 3 1 4 13 1 2 1 3 76 0 0 0 4 1 0 4 105 5 1 1 2 2 1 89 5 1 1 1 2 97 6 3 2 2 1 2 81 0 0 35 34 29 27 0 22 0 21 34 18 39 7 10 25 
CALL[ ]	/* CallFunction */";
};
width = 377;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,317,o),
(272,358,o),
(288,378,qs),
(302,397,o),
(320,475,o),
(320,515,qs),
(320,601,o),
(244,686,o),
(172,686,qs),
(158,686,o),
(93,645,o),
(72,615,q),
(60,592,o),
(46,525,o),
(46,487,qs),
(46,401,o),
(121,317,o),
(189,317,qs)
);
},
{
closed = 1;
nodes = (
(127,341,o),
(75,422,o),
(75,489,qs),
(75,545,o),
(99,614,o),
(126,636,qs),
(140,648,o),
(169,662,o),
(178,662,qs),
(232,662,o),
(291,585,o),
(291,513,qs),
(291,469,o),
(275,403,o),
(262,389,qs),
(249,373,o),
(199,341,o),
(184,341,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 18 18 0 0 18 35 18 34 27 25 0 17 0 16 39 6 10 23 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = uni0394;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(199,603,l),
(16,0,l),
(500,0,l),
(317,603,l)
);
},
{
closed = 1;
nodes = (
(298,574,l),
(459,30,l),
(57,30,l),
(218,574,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 95 0 1 1 23 77 0 2 2 0 95 0 0 0 24 0 78 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = uni0394;
unicode = 916;
},
{
glyphname = uni03A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,24,l),
(364,24,l),
(432,85,o),
(515,263,o),
(515,359,qs),
(515,468,o),
(402,600,o),
(296,600,qs),
(225,600,o),
(124,535,o),
(73,425,o),
(73,359,qs),
(73,260,o),
(149,83,o),
(217,24,q),
(80,24,l),
(67,144,l),
(50,144,l),
(51,0,l),
(247,0,l),
(258,22,l),
(183,82,o),
(101,255,o),
(101,364,qs),
(101,409,o),
(129,495,o),
(151,518,qs),
(176,546,o),
(251,576,o),
(296,576,qs),
(387,576,o),
(484,461,o),
(484,362,qs),
(484,257,o),
(398,84,o),
(324,22,q),
(335,0,l),
(531,0,l),
(532,144,l),
(515,144,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 7 2 3 1 4 4 3 114 0 1 1 5 97 0 5 5 23 77 6 1 4 4 0 96 2 1 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
8 7 2 3 1 4 1 3 4 128 0 1 1 5 97 0 5 5 23 77 6 1 4 4 0 96 2 1 0 0 24 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 39 0 39 21 38 17 17 25 38 17 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = uni03A9;
unicode = 937;
},
{
glyphname = uni03BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(396,13,o),
(371,33,o),
(371,61,qs),
(371,432,ls),
(371,435,o),
(351,449,o),
(348,449,qs),
(337,449,o),
(283,437,q),
(284,422,l),
(341,418,l),
(342,62,l),
(272,22,o),
(213,22,qs),
(174,22,o),
(130,65,o),
(130,105,qs),
(130,432,ls),
(130,434,o),
(110,449,o),
(108,449,qs),
(98,449,o),
(43,437,q),
(44,422,l),
(100,418,l),
(100,-80,ls),
(100,-109,o),
(135,-174,o),
(181,-219,o),
(194,-219,qs),
(223,-219,o),
(268,-208,q),
(266,-193,l),
(232,-193,ls),
(210,-193,o),
(183,-188,o),
(175,-180,qs),
(153,-159,o),
(126,-108,o),
(126,-63,qs),
(126,32,l),
(158,-9,o),
(220,-9,qs),
(225,-9,o),
(309,25,o),
(343,42,q),
(346,22,o),
(373,-9,o),
(382,-9,qs),
(394,-9,o),
(431,-2,q),
(428,13,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
42 28 27 3 6 4 39 26 10 5 4 5 6 19 1 3 2 3 76 0 8 5 0 5 8 0 128 0 6 6 4 97 7 1 4 4 25 77 0 5 5 0 97 1 1 0 0 26 77 0 2 2 3 97 0 3 3 27 3 78 22 18 18 38 23 34 39 36 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 473;
}
);
note = uni03BC;
unicode = 956;
},
{
glyphname = pi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(366,409,l),
(420,409,ls),
(427,409,o),
(466,429,o),
(478,441,q),
(464,456,l),
(450,445,o),
(410,440,o),
(366,440,qs),
(111,440,ls),
(99,440,o),
(58,406,o),
(38,382,q),
(51,366,l),
(83,391,o),
(115,408,o),
(141,408,q),
(142,11,l),
(141,7,o),
(157,-9,o),
(160,-9,qs),
(169,-9,o),
(211,-2,q),
(211,16,l),
(170,19,l),
(170,408,l),
(338,409,l),
(338,95,ls),
(338,79,o),
(356,29,o),
(380,-9,o),
(387,-9,qs),
(411,-9,o),
(447,-3,q),
(443,15,l),
(411,17,o),
(381,30,o),
(366,76,o),
(366,127,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
25 24 13 3 0 2 15 4 2 1 0 2 76 14 1 0 1 75 33 32 2 5 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 2 1 2 0 1 128 6 4 2 2 2 5 95 0 5 5 25 77 3 1 1 1 26 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 2 1 2 0 1 128 0 5 6 4 2 2 0 5 2 105 3 1 1 1 26 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
37 53 20 20 21 18 18 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
note = pi;
unicode = 960;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,-9,o),
(369,62,o),
(403,170,o),
(403,230,qs),
(403,345,o),
(315,468,o),
(228,468,qs),
(167,468,o),
(89,398,o),
(55,290,o),
(55,230,qs),
(55,115,o),
(142,-9,o),
(230,-9,qs)
);
},
{
closed = 1;
nodes = (
(163,15,o),
(84,121,o),
(84,233,qs),
(84,369,o),
(158,427,q),
(163,432,o),
(210,444,o),
(229,444,qs),
(295,444,o),
(374,341,o),
(374,233,qs),
(374,93,o),
(300,32,qs),
(295,27,o),
(248,15,o),
(229,15,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 0 97 0 0 0 52 77 5 1 3 3 1 97 4 1 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
14 14 0 0 14 29 14 28 22 20 0 13 0 12 37 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 458;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,0,l),
(231,20,l),
(159,25,l),
(159,463,l),
(142,468,l),
(47,443,l),
(47,422,l),
(130,435,l),
(130,25,l),
(52,20,l),
(52,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
6 5 4 3 2 5 0 74 1 1 0 0 2 95 0 2 2 42 2 78 17 22 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,0,l),
(351,117,l),
(334,117,l),
(325,28,l),
(83,28,l),
(83,32,l),
(262,247,ls),
(318,316,o),
(318,379,qs),
(318,421,o),
(269,468,o),
(223,468,qs),
(204,468,o),
(111,455,o),
(80,449,q),
(82,352,l),
(100,352,l),
(107,426,l),
(128,432,o),
(218,444,o),
(233,444,qs),
(260,444,o),
(289,406,o),
(289,374,qs),
(289,324,o),
(248,272,qs),
(47,25,l),
(53,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
12 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 1 0 4 0 1 4 128 0 4 3 3 4 112 0 0 0 2 97 0 2 2 52 77 0 3 3 5 96 0 5 5 42 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 0 1 4 128 0 4 3 0 4 3 126 0 0 0 2 97 0 2 2 52 77 0 3 3 5 96 0 5 5 42 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 4 0 1 4 128 0 4 3 0 4 3 126 0 2 0 0 1 2 0 105 0 3 3 5 96 0 5 5 42 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 37 35 19 37 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 398;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(126,-67,o),
(238,-4,o),
(305,83,o),
(305,130,qs),
(305,232,o),
(184,238,q),
(184,241,l),
(279,288,o),
(279,379,qs),
(279,421,o),
(230,468,o),
(184,468,qs),
(166,468,o),
(76,455,o),
(45,449,q),
(47,352,l),
(65,352,l),
(72,426,l),
(92,432,o),
(180,444,o),
(194,444,qs),
(211,444,o),
(250,419,o),
(250,374,qs),
(250,320,o),
(185,255,o),
(111,235,q),
(111,215,l),
(174,215,ls),
(222,215,o),
(276,172,o),
(276,130,qs),
(276,60,o),
(148,-35,o),
(61,-59,q),
(61,-80,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
20 1 1 3 28 8 2 0 2 2 76 35 0 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 1 0 1 2 0 128 0 0 0 132 0 1 1 3 97 0 3 3 52 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 1 0 1 2 0 128 0 0 0 132 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
35 19 38 37 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 355;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(311,-79,l),
(311,65,l),
(397,65,l),
(397,91,l),
(311,91,l),
(311,262,l),
(303,265,l),
(282,259,l),
(282,91,l),
(69,91,l),
(68,95,l),
(107,171,o),
(211,388,o),
(238,450,q),
(238,459,l),
(214,469,l),
(194,415,o),
(105,226,o),
(35,82,q),
(37,65,l),
(282,65,l),
(282,-79,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
15 14 13 7 6 5 1 74 0 4 0 4 134 2 1 1 0 0 1 87 2 1 1 1 0 95 3 1 0 1 0 79 17 17 20 41 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 427;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,-61,o),
(301,54,o),
(301,144,qs),
(301,199,o),
(241,273,o),
(181,273,qs),
(172,273,o),
(88,243,o),
(81,241,q),
(97,427,l),
(278,427,l),
(275,503,l),
(258,503,l),
(254,455,l),
(75,455,l),
(55,228,l),
(66,214,l),
(171,248,o),
(182,248,qs),
(220,248,o),
(272,197,o),
(272,140,qs),
(272,58,o),
(148,-37,o),
(58,-59,q),
(58,-80,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
25 16 9 8 0 5 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 1 1 2 112 0 4 0 0 4 0 101 0 3 3 1 95 0 1 1 44 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 1 2 133 0 4 0 0 4 0 101 0 3 3 1 95 0 1 1 44 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 1 2 133 0 1 0 3 4 1 3 104 0 4 0 0 4 89 0 4 4 0 97 0 0 4 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
35 17 17 19 37 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,-10,o),
(289,20,o),
(311,44,q),
(327,65,o),
(347,136,o),
(347,167,qs),
(347,237,o),
(276,308,o),
(201,308,qs),
(193,308,o),
(127,284,qs),
(92,272,l),
(88,274,l),
(102,384,o),
(216,490,o),
(301,517,q),
(301,538,l),
(177,514,o),
(56,337,o),
(56,205,qs),
(56,127,o),
(103,30,o),
(173,-10,o),
(210,-10,qs)
);
},
{
closed = 1;
nodes = (
(146,16,o),
(85,123,o),
(85,210,qs),
(85,234,o),
(86,247,q),
(120,260,o),
(192,284,o),
(198,284,qs),
(261,284,o),
(318,228,o),
(318,159,qs),
(318,104,o),
(283,39,o),
(234,13,o),
(212,13,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
10 1 3 2 1 76 7 6 2 0 74 0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 50 1 78 24 24 0 0 24 38 24 37 30 29 0 23 0 22 45 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 409;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,-81,o),
(96,-76,q),
(332,439,l),
(328,455,l),
(30,454,l),
(32,342,l),
(50,342,l),
(58,427,l),
(297,427,l),
(298,421,l),
(64,-71,l),
(69,-74,o),
(82,-80,o),
(86,-81,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 1 0 0 1 113 0 0 0 2 95 0 2 2 44 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 2 95 0 2 2 44 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 1 134 0 2 0 0 2 87 0 2 2 0 95 0 0 2 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 35 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,-9,o),
(279,20,o),
(328,61,o),
(334,78,qs),
(347,115,o),
(347,137,qs),
(347,186,o),
(293,247,o),
(242,277,q),
(242,278,l),
(282,305,o),
(327,379,o),
(327,420,qs),
(327,472,o),
(262,543,o),
(204,543,qs),
(192,543,o),
(145,518,o),
(101,479,o),
(90,459,q),
(83,442,o),
(83,422,qs),
(83,379,o),
(124,322,o),
(162,297,q),
(162,296,l),
(111,266,o),
(56,182,o),
(56,133,qs),
(56,71,o),
(138,-9,o),
(207,-9,qs)
);
},
{
closed = 1;
nodes = (
(181,311,o),
(137,343,o),
(106,393,o),
(106,428,qs),
(106,453,o),
(146,496,o),
(196,522,o),
(206,522,qs),
(253,522,o),
(301,465,o),
(301,420,qs),
(301,377,o),
(255,310,o),
(221,288,q)
);
},
{
closed = 1;
nodes = (
(150,13,o),
(83,80,o),
(83,134,qs),
(83,227,o),
(183,285,q),
(205,273,ls),
(243,252,o),
(290,219,o),
(321,169,o),
(321,133,qs),
(321,96,o),
(278,41,o),
(220,13,o),
(201,13,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
54 45 21 5 4 3 2 1 76 0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 50 1 78 46 46 0 0 46 59 46 58 38 36 0 31 0 30 46 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 409;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,-56,o),
(351,121,o),
(351,253,qs),
(351,331,o),
(304,428,o),
(234,468,o),
(197,468,qs),
(174,468,o),
(113,437,o),
(94,415,q),
(78,392,o),
(60,328,o),
(60,294,qs),
(60,150,o),
(206,150,qs),
(219,150,o),
(317,187,q),
(319,186,l),
(306,91,o),
(203,-31,o),
(106,-59,q),
(106,-80,l)
);
},
{
closed = 1;
nodes = (
(147,174,o),
(89,232,o),
(89,302,qs),
(89,381,o),
(157,445,o),
(195,445,qs),
(258,442,o),
(324,338,o),
(324,262,qs),
(324,245,o),
(320,211,q),
(294,201,o),
(216,174,o),
(209,174,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 3 2 1 76 21 0 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 0 0 3 0 101 0 2 2 1 97 0 1 1 52 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
20 45 38 37 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 409;
}
);
note = nine;
unicode = 57;
},
{
glyphname = zero.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,-9,o),
(420,152,o),
(420,276,qs),
(420,416,o),
(342,564,o),
(243,564,qs),
(147,564,o),
(60,403,o),
(60,279,qs),
(60,139,o),
(137,-9,o),
(236,-9,qs)
);
},
{
closed = 1;
nodes = (
(156,17,o),
(92,152,o),
(92,273,qs),
(92,338,o),
(112,446,o),
(130,473,qs),
(147,503,o),
(206,538,o),
(242,538,qs),
(326,538,o),
(387,404,o),
(387,286,qs),
(387,222,o),
(367,112,o),
(351,83,qs),
(334,51,o),
(275,17,o),
(238,17,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 50 1 78 12 12 0 0 12 29 12 28 21 19 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = zero.lf;
},
{
glyphname = one.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,559,l),
(141,568,l),
(16,542,l),
(16,521,l),
(129,533,l),
(129,28,l),
(26,21,l),
(26,0,l),
(256,0,l),
(256,21,l),
(157,28,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
9 8 7 6 5 5 1 74 3 2 2 1 1 0 95 0 0 0 42 0 78 0 0 0 10 0 10 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 275;
}
);
note = one.lf;
},
{
glyphname = two.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,25,l),
(78,25,l),
(78,35,l),
(267,324,ls),
(311,391,o),
(311,450,qs),
(311,564,o),
(205,564,qs),
(170,564,o),
(52,543,q),
(55,404,l),
(73,404,l),
(84,521,l),
(202,540,o),
(210,540,qs),
(243,540,o),
(283,493,o),
(283,454,qs),
(283,400,o),
(244,339,qs),
(36,19,l),
(40,0,l),
(318,0,l),
(318,159,l),
(299,159,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 1 3 21 1 4 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 5 1 2 5 128 6 1 5 4 4 5 112 0 3 0 1 2 3 1 105 0 4 4 0 96 0 0 0 42 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 1 2 5 128 6 1 5 4 1 5 4 126 0 3 0 1 2 3 1 105 0 4 4 0 96 0 0 0 42 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 24 0 24 21 34 19 22 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = two.lf;
},
{
glyphname = three.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,318,l),
(231,344,o),
(283,420,o),
(283,461,qs),
(283,509,o),
(234,564,o),
(185,564,qs),
(152,564,o),
(34,543,q),
(35,404,l),
(53,404,l),
(67,521,l),
(99,527,o),
(179,539,o),
(192,539,qs),
(220,539,o),
(253,499,o),
(253,463,qs),
(253,405,o),
(169,325,o),
(92,307,q),
(91,287,l),
(188,287,ls),
(228,287,o),
(267,242,o),
(267,204,qs),
(267,154,o),
(211,49,o),
(172,24,qs),
(158,15,o),
(113,15,qs),
(85,15,o),
(37,19,q),
(35,1,l),
(91,-9,o),
(132,-9,qs),
(175,-9,o),
(251,58,o),
(296,158,o),
(296,203,qs),
(296,251,o),
(240,310,o),
(187,309,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
33 1 3 5 41 1 6 4 21 1 2 6 9 1 1 2 4 76 0 4 3 6 3 4 6 128 0 5 0 3 4 5 3 105 7 1 6 0 2 1 6 2 103 0 1 1 0 97 0 0 0 50 0 78 0 0 0 42 0 42 34 19 38 38 35 37 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 338;
}
);
note = three.lf;
},
{
glyphname = four.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,179,l),
(260,179,l),
(260,555,l),
(217,555,l),
(-6,176,l),
(0,158,l),
(235,158,l),
(235,26,l),
(137,19,l),
(137,0,l),
(353,0,l),
(353,19,l),
(260,26,l),
(260,158,l),
(353,158,l)
);
},
{
closed = 1;
nodes = (
(23,183,l),
(228,533,l),
(235,533,l),
(235,179,l),
(24,179,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
16 1 3 2 6 5 2 1 4 0 1 2 76 0 2 3 2 133 7 5 2 3 6 4 2 1 0 3 1 103 0 0 0 42 0 78 15 15 0 0 15 19 15 18 0 14 0 14 17 18 19 19 8 8 26 
CALL[ ]	/* CallFunction */";
};
width = 366;
}
);
note = four.lf;
},
{
glyphname = five.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,321,l),
(80,314,l),
(99,531,l),
(277,531,l),
(273,600,l),
(253,600,l),
(251,555,l),
(76,555,l),
(56,312,l),
(67,296,l),
(145,299,o),
(188,299,qs),
(273,299,o),
(273,199,qs),
(273,150,o),
(218,48,o),
(181,24,qs),
(168,15,o),
(123,15,qs),
(95,15,o),
(47,19,q),
(45,1,l),
(68,-3,o),
(123,-9,o),
(142,-9,qs),
(184,-9,o),
(258,56,o),
(302,155,o),
(302,200,qs),
(302,257,o),
(245,324,o),
(188,324,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
29 22 2 2 6 10 1 1 2 2 76 0 3 0 5 6 3 5 104 7 1 6 0 2 1 6 2 103 0 4 4 41 77 0 1 1 0 97 0 0 0 50 0 78 0 0 0 31 0 31 17 17 18 53 36 37 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = five.lf;
},
{
glyphname = six.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,-10,o),
(295,20,o),
(315,43,qs),
(333,65,o),
(355,135,o),
(355,172,qs),
(355,243,o),
(283,319,o),
(209,319,qs),
(199,319,o),
(86,280,q),
(84,282,l),
(109,480,o),
(303,540,q),
(303,564,l),
(180,531,o),
(52,350,o),
(52,219,qs),
(52,140,o),
(99,37,o),
(172,-10,o),
(210,-10,qs)
);
},
{
closed = 1;
nodes = (
(148,16,o),
(80,135,o),
(80,220,qs),
(80,232,o),
(82,256,q),
(115,268,o),
(199,295,o),
(206,295,qs),
(268,295,o),
(326,234,o),
(326,164,qs),
(326,83,o),
(257,13,o),
(214,13,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
9 1 3 2 1 76 7 6 2 0 74 0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 50 1 78 22 22 0 0 22 35 22 34 27 26 0 21 0 20 43 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = six.lf;
},
{
glyphname = seven.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,555,l),
(44,402,l),
(62,402,l),
(69,525,l),
(304,525,l),
(305,517,l),
(116,5,l),
(125,-11,o),
(130,-11,qs),
(137,-11,o),
(146,-8,q),
(338,538,l),
(337,542,o),
(327,553,o),
(322,555,q)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 1 0 1 2 114 0 3 0 1 2 3 1 103 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 0 3 0 1 2 3 1 103 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 19 36 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 352;
}
);
note = seven.lf;
},
{
glyphname = eight.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,-9,o),
(258,21,o),
(309,63,o),
(316,80,qs),
(329,117,o),
(329,140,qs),
(329,192,o),
(272,254,o),
(217,284,q),
(217,286,l),
(259,312,o),
(309,394,o),
(309,437,qs),
(309,493,o),
(243,563,o),
(182,563,qs),
(169,563,o),
(119,535,o),
(73,494,o),
(63,474,q),
(57,456,o),
(57,437,qs),
(57,390,o),
(100,328,o),
(138,304,q),
(138,302,l),
(88,273,o),
(30,185,o),
(30,136,qs),
(30,75,o),
(111,-9,o),
(182,-9,qs)
);
},
{
closed = 1;
nodes = (
(154,318,o),
(110,351,o),
(80,405,o),
(80,445,qs),
(80,468,o),
(122,512,o),
(174,542,o),
(184,542,qs),
(233,542,o),
(283,482,o),
(283,434,qs),
(283,388,o),
(231,318,o),
(193,297,q)
);
},
{
closed = 1;
nodes = (
(124,13,o),
(56,85,o),
(56,139,qs),
(56,186,o),
(111,265,o),
(159,291,q),
(184,277,ls),
(224,256,o),
(271,223,o),
(303,172,o),
(303,136,qs),
(303,99,o),
(257,43,o),
(197,13,o),
(178,13,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
54 45 21 5 4 3 2 1 76 0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 50 1 78 46 46 0 0 46 60 46 59 38 36 0 31 0 30 46 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 359;
}
);
note = eight.lf;
},
{
glyphname = nine.lf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,23,o),
(355,204,o),
(355,335,qs),
(355,414,o),
(308,517,o),
(236,564,o),
(198,564,qs),
(175,564,o),
(104,530,o),
(85,504,qs),
(52,452,o),
(52,385,qs),
(52,313,o),
(125,232,o),
(198,232,qs),
(213,232,o),
(320,271,q),
(322,269,l),
(307,157,o),
(187,40,o),
(104,14,q),
(104,-10,l)
);
},
{
closed = 1;
nodes = (
(139,256,o),
(81,320,o),
(81,390,qs),
(81,473,o),
(151,541,o),
(193,541,qs),
(259,537,o),
(326,419,o),
(326,329,qs),
(326,307,o),
(325,295,q),
(292,283,o),
(208,256,o),
(201,256,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
3 1 3 2 1 76 21 0 2 0 73 0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 20 45 38 37 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = nine.lf;
},
{
glyphname = zero.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = zero;
}
);
width = 458;
}
);
note = zero.osf;
},
{
glyphname = one.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = one;
}
);
width = 261;
}
);
note = one.osf;
},
{
glyphname = two.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = two;
}
);
width = 398;
}
);
note = two.osf;
},
{
glyphname = three.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = three;
}
);
width = 355;
}
);
note = three.osf;
},
{
glyphname = four.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = four;
}
);
width = 427;
}
);
note = four.osf;
},
{
glyphname = five.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = five;
}
);
width = 351;
}
);
note = five.osf;
},
{
glyphname = six.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = six;
}
);
width = 409;
}
);
note = six.osf;
},
{
glyphname = seven.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = seven;
}
);
width = 357;
}
);
note = seven.osf;
},
{
glyphname = eight.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = eight;
}
);
width = 409;
}
);
note = eight.osf;
},
{
glyphname = nine.osf;
layers = (
{
layerId = m01;
shapes = (
{
ref = nine;
}
);
width = 409;
}
);
note = nine.osf;
},
{
glyphname = zero.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (10,0);
ref = zero.lf;
}
);
width = 500;
}
);
note = zero.tf;
},
{
glyphname = one.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (111,0);
ref = one.lf;
}
);
width = 500;
}
);
note = one.tf;
},
{
glyphname = two.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (68,0);
ref = two.lf;
}
);
width = 500;
}
);
note = two.tf;
},
{
glyphname = three.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (91,0);
ref = three.lf;
}
);
width = 500;
}
);
note = three.tf;
},
{
glyphname = four.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (69,0);
ref = four.lf;
}
);
width = 500;
}
);
note = four.tf;
},
{
glyphname = five.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (77,0);
ref = five.lf;
}
);
width = 500;
}
);
note = five.tf;
},
{
glyphname = six.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (46,0);
ref = six.lf;
}
);
width = 500;
}
);
note = six.tf;
},
{
glyphname = seven.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (62,0);
ref = seven.lf;
}
);
width = 500;
}
);
note = seven.tf;
},
{
glyphname = eight.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (70,0);
ref = eight.lf;
}
);
width = 500;
}
);
note = eight.tf;
},
{
glyphname = nine.tf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (46,0);
ref = nine.lf;
}
);
width = 500;
}
);
note = nine.tf;
},
{
glyphname = zero.tf.zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,564,o),
(60,403,o),
(60,279,qs),
(60,139,o),
(137,-9,o),
(236,-9,qs),
(332,-9,o),
(420,152,o),
(420,276,qs),
(420,416,o),
(342,564,o),
(243,564,qs)
);
},
{
closed = 1;
nodes = (
(147,503,o),
(206,538,o),
(242,538,qs),
(296,538,o),
(330,506,q),
(129,76,l),
(92,138,o),
(92,273,qs),
(92,338,o),
(112,446,o),
(130,473,qs)
);
},
{
closed = 1;
nodes = (
(179,17,o),
(144,55,q),
(347,487,l),
(369,455,o),
(387,354,o),
(387,286,qs),
(387,222,o),
(367,112,o),
(351,83,qs),
(334,51,o),
(275,17,o),
(238,17,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
32 31 17 16 4 3 2 1 76 4 1 1 0 2 3 1 2 105 5 1 3 3 0 97 0 0 0 50 0 78 23 23 0 0 23 34 23 33 20 18 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = zero.tf.zero;
},
{
glyphname = zero.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (21,0);
ref = zero;
}
);
width = 500;
}
);
note = zero.tosf;
},
{
glyphname = one.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (113,0);
ref = one;
}
);
width = 500;
}
);
note = one.tosf;
},
{
glyphname = two.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (50,0);
ref = two;
}
);
width = 500;
}
);
note = two.tosf;
},
{
glyphname = three.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (69,0);
ref = three;
}
);
width = 500;
}
);
note = three.tosf;
},
{
glyphname = four.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (28,0);
ref = four;
}
);
width = 500;
}
);
note = four.tosf;
},
{
glyphname = five.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (68,0);
ref = five;
}
);
width = 500;
}
);
note = five.tosf;
},
{
glyphname = six.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (49,0);
ref = six;
}
);
width = 500;
}
);
note = six.tosf;
},
{
glyphname = seven.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (74,0);
ref = seven;
}
);
width = 500;
}
);
note = seven.tosf;
},
{
glyphname = eight.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (49,0);
ref = eight;
}
);
width = 500;
}
);
note = eight.tosf;
},
{
glyphname = nine.tosf;
layers = (
{
layerId = m01;
shapes = (
{
pos = (44,0);
ref = nine;
}
);
width = 500;
}
);
note = nine.tosf;
},
{
glyphname = zero.zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,468,o),
(89,398,o),
(55,290,o),
(55,230,qs),
(55,115,o),
(142,-9,o),
(230,-9,qs),
(291,-9,o),
(369,62,o),
(403,170,o),
(403,230,qs),
(403,345,o),
(315,468,o),
(228,468,qs)
);
},
{
closed = 1;
nodes = (
(84,369,o),
(158,427,q),
(163,432,o),
(210,444,o),
(229,444,qs),
(265,444,o),
(294,429,q),
(124,67,l),
(84,123,o),
(84,233,qs)
);
},
{
closed = 1;
nodes = (
(295,27,o),
(248,15,o),
(229,15,qs),
(176,15,o),
(140,48,q),
(313,416,l),
(374,365,o),
(374,233,qs),
(374,93,o),
(300,32,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
28 27 16 15 4 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 1 97 4 1 1 1 52 77 0 3 3 0 97 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
4 1 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 31 29 19 17 0 13 0 12 37 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 458;
}
);
note = zero.zero;
},
{
glyphname = uni2080;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni2070;
}
);
width = 280;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = uni2081;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni00B9;
}
);
width = 357;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = uni2082;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni00B2;
}
);
width = 361;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = uni2083;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni00B3;
}
);
width = 363;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = uni2084;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni2074;
}
);
width = 394;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = uni2085;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni2075;
}
);
width = 351;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = uni2086;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni2076;
}
);
width = 297;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = uni2087;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni2077;
}
);
width = 284;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = uni2088;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni2078;
}
);
width = 295;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = uni2089;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-500);
ref = uni2079;
}
);
width = 297;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = zero.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-366);
ref = uni2070;
}
);
width = 280;
}
);
note = zero.dnom;
},
{
glyphname = one.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-363);
ref = uni00B9;
}
);
width = 357;
}
);
note = one.dnom;
},
{
glyphname = two.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-363);
ref = uni00B2;
}
);
width = 361;
}
);
note = two.dnom;
},
{
glyphname = three.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-365);
ref = uni00B3;
}
);
width = 363;
}
);
note = three.dnom;
},
{
glyphname = four.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-363);
ref = uni2074;
}
);
width = 394;
}
);
note = four.dnom;
},
{
glyphname = five.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-364);
ref = uni2075;
}
);
width = 351;
}
);
note = five.dnom;
},
{
glyphname = six.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-364);
ref = uni2076;
}
);
width = 297;
}
);
note = six.dnom;
},
{
glyphname = seven.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-362);
ref = uni2077;
}
);
width = 284;
}
);
note = seven.dnom;
},
{
glyphname = eight.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-365);
ref = uni2078;
}
);
width = 295;
}
);
note = eight.dnom;
},
{
glyphname = nine.dnom;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-365);
ref = uni2079;
}
);
width = 297;
}
);
note = nine.dnom;
},
{
glyphname = zero.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni2070;
}
);
width = 280;
}
);
note = zero.numr;
},
{
glyphname = one.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni00B9;
}
);
width = 357;
}
);
note = one.numr;
},
{
glyphname = two.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni00B2;
}
);
width = 361;
}
);
note = two.numr;
},
{
glyphname = three.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni00B3;
}
);
width = 363;
}
);
note = three.numr;
},
{
glyphname = four.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni2074;
}
);
width = 394;
}
);
note = four.numr;
},
{
glyphname = five.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni2075;
}
);
width = 351;
}
);
note = five.numr;
},
{
glyphname = six.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni2076;
}
);
width = 297;
}
);
note = six.numr;
},
{
glyphname = seven.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni2077;
}
);
width = 284;
}
);
note = seven.numr;
},
{
glyphname = eight.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni2078;
}
);
width = 295;
}
);
note = eight.numr;
},
{
glyphname = nine.numr;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-120);
ref = uni2079;
}
);
width = 297;
}
);
note = nine.numr;
},
{
glyphname = uni2070;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,355,o),
(253,461,o),
(253,550,qs),
(253,630,o),
(203,718,o),
(143,718,qs),
(80,718,o),
(27,613,o),
(27,532,qs),
(27,456,o),
(78,355,o),
(135,355,qs)
);
},
{
closed = 1;
nodes = (
(95,381,o),
(57,468,o),
(57,536,qs),
(57,619,o),
(81,662,q),
(104,692,o),
(143,692,qs),
(187,692,o),
(222,616,o),
(222,550,qs),
(222,458,o),
(199,411,q),
(176,381,o),
(136,381,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 0 97 0 0 0 73 77 5 1 3 3 1 97 4 1 1 1 78 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 78 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 25 12 24 19 17 0 11 0 10 36 6 10 23 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,696,l),
(192,712,l),
(86,682,l),
(86,661,l),
(184,676,l),
(184,390,l),
(99,382,l),
(99,363,l),
(292,363,l),
(292,382,l),
(213,389,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
10 9 8 7 6 5 4 3 0 9 0 74 0 0 0 74 0 78 17 1 10 23 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,479,l),
(274,388,l),
(108,388,l),
(108,394,l),
(249,557,ls),
(284,598,o),
(284,637,qs),
(284,673,o),
(245,711,o),
(208,711,qs),
(186,711,o),
(81,696,q),
(85,593,l),
(102,593,l),
(107,676,l),
(203,689,o),
(215,689,qs),
(233,689,o),
(256,663,o),
(256,639,qs),
(256,625,o),
(246,594,o),
(236,582,qs),
(64,383,l),
(69,363,l),
(301,363,l),
(299,479,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 1 3 11 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 1 5 1 2 5 128 0 5 4 4 5 112 0 1 1 3 97 0 3 3 73 77 0 4 4 0 96 0 0 0 74 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 1 1 3 97 0 3 3 73 77 0 4 4 0 96 0 0 0 74 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 0 3 0 1 2 3 1 105 0 4 4 0 96 0 0 0 74 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 37 34 18 39 16 6 10 28 
CALL[ ]	/* CallFunction */";
};
width = 361;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,556,l),
(239,574,o),
(268,623,o),
(268,649,qs),
(268,681,o),
(228,718,o),
(191,718,qs),
(169,718,o),
(99,708,q),
(89,708,l),
(91,605,l),
(108,605,l),
(114,687,l),
(133,691,o),
(178,696,o),
(192,697,qs),
(241,697,o),
(241,646,qs),
(241,615,o),
(191,563,o),
(147,552,q),
(146,532,l),
(199,532,ls),
(231,532,o),
(254,507,o),
(258,483,qs),
(262,459,o),
(227,399,o),
(200,383,qs),
(192,379,o),
(170,379,qs),
(157,379,o),
(125,381,qs),
(105,383,o),
(95,383,q),
(92,362,l),
(114,359,o),
(163,355,o),
(175,355,qs),
(199,355,o),
(251,392,o),
(284,450,o),
(284,479,qs),
(284,510,o),
(244,550,o),
(210,552,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
44 24 2 3 5 9 1 0 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 3 5 1 5 3 1 128 0 4 4 7 97 0 7 7 73 77 0 5 5 6 95 0 6 6 73 77 2 1 1 1 0 97 0 0 0 78 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 5 3 1 128 0 6 0 5 3 6 5 103 0 4 4 7 97 0 7 7 73 77 2 1 1 1 0 97 0 0 0 78 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 3 5 1 5 3 1 128 0 7 0 4 5 7 4 105 0 6 0 5 3 6 5 103 2 1 1 1 0 97 0 0 0 78 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
33 17 20 21 38 49 19 37 8 10 30 
CALL[ ]	/* CallFunction */";
};
width = 363;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = uni2074;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,476,l),
(247,706,l),
(199,706,l),
(54,467,l),
(63,452,l),
(218,452,l),
(218,363,l),
(247,363,l),
(247,452,l),
(317,452,l),
(317,476,l)
);
},
{
closed = 1;
nodes = (
(89,481,l),
(211,680,l),
(218,680,l),
(218,476,l),
(90,476,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
12 1 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 5 2 4 2 1 0 1 4 0 104 0 3 3 73 77 0 1 1 74 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 3 4 3 133 6 5 2 4 2 1 0 1 4 0 104 0 1 1 74 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
11 11 11 15 11 14 17 18 17 17 16 7 10 27 
CALL[ ]	/* CallFunction */";
};
width = 394;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = uni2075;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,568,o),
(114,559,q),
(122,685,l),
(261,685,l),
(258,740,l),
(243,740,l),
(239,707,l),
(101,707,l),
(91,556,l),
(106,540,l),
(145,543,ls),
(175,546,o),
(187,546,qs),
(219,546,o),
(243,509,o),
(243,477,qs),
(243,452,o),
(211,398,o),
(185,383,qs),
(177,378,o),
(151,378,qs),
(127,378,o),
(77,383,q),
(74,362,l),
(132,355,o),
(160,355,qs),
(186,355,o),
(237,393,o),
(269,452,o),
(269,481,qs),
(269,523,o),
(226,568,o),
(184,568,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
30 23 2 2 6 22 9 2 1 2 8 1 0 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 6 0 2 1 6 2 105 0 4 4 73 77 0 5 5 3 95 0 3 3 73 77 0 1 1 0 97 0 0 0 78 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 3 0 5 6 3 5 104 7 1 6 0 2 1 6 2 105 0 4 4 73 77 0 1 1 0 97 0 0 0 78 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 4 3 4 133 0 3 0 5 6 3 5 104 7 1 6 0 2 1 6 2 105 0 1 1 0 97 0 0 0 78 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 32 0 31 17 17 20 38 35 37 8 10 28 
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = uni2076;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,355,o),
(214,381,o),
(227,399,qs),
(238,415,o),
(251,457,o),
(251,477,qs),
(251,520,o),
(206,571,o),
(157,568,q),
(144,566,o),
(75,547,q),
(73,549,l),
(79,608,o),
(160,697,o),
(217,710,q),
(217,728,l),
(144,714,o),
(48,599,o),
(48,512,qs),
(48,441,o),
(102,355,o),
(151,355,qs)
);
},
{
closed = 1;
nodes = (
(109,375,o),
(71,462,o),
(73,528,q),
(150,549,o),
(158,549,qs),
(190,551,o),
(227,512,o),
(227,471,qs),
(227,436,o),
(183,375,o),
(150,375,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
29 9 2 3 2 1 76 6 5 2 0 74 0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 78 1 78 22 22 0 0 22 32 22 31 27 26 0 21 0 20 28 6 10 23 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = uni2077;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,707,l),
(56,621,l),
(70,621,l),
(76,685,l),
(226,685,l),
(227,680,l),
(82,366,l),
(87,361,o),
(97,355,o),
(100,355,qs),
(105,355,o),
(111,359,q),
(254,688,l),
(251,696,o),
(242,707,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
7 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 1 0 0 1 113 0 0 0 2 95 0 2 2 73 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 134 0 0 0 2 95 0 2 2 73 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 1 134 0 2 0 0 2 87 0 2 2 0 95 0 0 2 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 40 3 10 25 
CALL[ ]	/* CallFunction */";
};
width = 284;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = uni2078;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,355,o),
(226,394,o),
(234,411,qs),
(243,435,o),
(243,454,qs),
(243,506,o),
(181,545,q),
(181,548,l),
(206,565,o),
(233,616,o),
(233,642,qs),
(233,675,o),
(190,718,o),
(149,718,qs),
(132,718,o),
(79,675,o),
(72,657,q),
(70,643,o),
(70,637,qs),
(70,590,o),
(116,555,q),
(116,552,l),
(85,533,o),
(52,476,o),
(52,447,qs),
(52,408,o),
(104,355,o),
(150,355,qs)
);
},
{
closed = 1;
nodes = (
(91,586,o),
(91,644,qs),
(91,655,o),
(112,680,o),
(139,699,o),
(145,699,qs),
(176,699,o),
(210,663,o),
(210,636,qs),
(210,614,o),
(185,570,o),
(162,555,q)
);
},
{
closed = 1;
nodes = (
(115,374,o),
(76,418,o),
(76,451,qs),
(76,478,o),
(105,529,o),
(131,544,q),
(175,524,o),
(218,478,o),
(218,446,qs),
(218,426,o),
(195,393,o),
(163,374,o),
(151,374,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
46 39 19 8 5 5 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 0 97 0 0 0 73 77 5 1 3 3 1 97 4 1 1 1 78 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 2 3 0 2 105 5 1 3 3 1 97 4 1 1 1 78 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
40 40 0 0 40 52 40 51 33 32 0 27 0 26 44 6 10 23 
CALL[ ]	/* CallFunction */";
};
width = 295;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = uni2079;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,369,o),
(249,475,o),
(249,561,qs),
(249,632,o),
(195,718,o),
(146,718,qs),
(125,718,o),
(83,693,o),
(70,675,qs),
(60,660,o),
(46,618,o),
(46,599,qs),
(46,557,o),
(93,505,o),
(140,505,qs),
(145,505,o),
(222,526,q),
(224,524,l),
(218,467,o),
(138,386,o),
(80,373,q),
(80,355,l)
);
},
{
closed = 1;
nodes = (
(70,525,o),
(70,602,qs),
(70,637,o),
(114,698,o),
(147,698,qs),
(188,698,o),
(226,611,o),
(224,545,q),
(197,538,o),
(149,527,o),
(139,525,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
24 1 3 2 3 1 0 3 2 76 21 0 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 0 0 3 0 101 0 2 2 1 97 0 1 1 73 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 42 39 37 4 10 26 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,-9,l),
(390,611,l),
(361,611,l),
(80,-9,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 43 77 0 1 1 42 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 133 0 1 1 42 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 470;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
ref = one.numr;
},
{
pos = (168,0);
ref = fraction;
},
{
pos = (417,0);
ref = two.dnom;
}
);
width = 778;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = uni2153;
layers = (
{
layerId = m01;
shapes = (
{
ref = one.numr;
},
{
pos = (170,0);
ref = fraction;
},
{
pos = (418,0);
ref = three.dnom;
}
);
width = 781;
}
);
note = uni2153;
unicode = 8531;
},
{
glyphname = uni2154;
layers = (
{
layerId = m01;
shapes = (
{
ref = two.numr;
},
{
pos = (185,0);
ref = fraction;
},
{
pos = (432,0);
ref = three.dnom;
}
);
width = 795;
}
);
note = uni2154;
unicode = 8532;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
ref = one.numr;
},
{
pos = (377,0);
ref = four.dnom;
},
{
pos = (171,0);
ref = fraction;
}
);
width = 771;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
ref = three.numr;
},
{
pos = (326,0);
ref = four.dnom;
},
{
pos = (139,0);
ref = fraction;
}
);
width = 720;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = oneeighth;
layers = (
{
layerId = m01;
shapes = (
{
ref = one.numr;
},
{
pos = (175,0);
ref = fraction;
},
{
pos = (443,0);
ref = eight.dnom;
}
);
width = 738;
}
);
note = oneeighth;
unicode = 8539;
},
{
glyphname = threeeighths;
layers = (
{
layerId = m01;
shapes = (
{
ref = three.numr;
},
{
pos = (129,0);
ref = fraction;
},
{
pos = (370,0);
ref = eight.dnom;
}
);
width = 665;
}
);
note = threeeighths;
unicode = 8540;
},
{
glyphname = fiveeighths;
layers = (
{
layerId = m01;
shapes = (
{
ref = five.numr;
},
{
pos = (111,0);
ref = fraction;
},
{
pos = (349,0);
ref = eight.dnom;
}
);
width = 644;
}
);
note = fiveeighths;
unicode = 8541;
},
{
glyphname = seveneighths;
layers = (
{
layerId = m01;
shapes = (
{
ref = seven.numr;
},
{
pos = (44,0);
ref = fraction;
},
{
pos = (301,0);
ref = eight.dnom;
}
);
width = 596;
}
);
note = seveneighths;
unicode = 8542;
},
{
glyphname = period;
kernLeft = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,-9,o),
(87,-5,o),
(93,-4,q),
(97,64,ls),
(97,67,o),
(85,78,o),
(82,78,qs),
(73,78,o),
(56,73,q),
(57,5,l),
(58,1,o),
(69,-9,o),
(72,-9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
9 3 2 0 73 0 0 0 118 20 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 153;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
kernLeft = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(98,-68,o),
(125,0,o),
(125,24,qs),
(125,71,ls),
(125,75,o),
(113,85,o),
(110,85,qs),
(101,85,o),
(85,79,q),
(84,10,ls),
(84,6,o),
(96,-3,o),
(97,-4,q),
(86,-45,o),
(63,-94,q),
(77,-103,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
15 6 2 3 0 73 0 0 0 118 23 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 185;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
layers = (
{
layerId = m01;
shapes = (
{
ref = period;
},
{
pos = (0,368);
ref = period;
}
);
width = 154;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
pos = (27,368);
ref = period;
},
{
ref = comma;
}
);
width = 185;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
kernLeft = period;
layers = (
{
layerId = m01;
shapes = (
{
ref = period;
},
{
pos = (99,0);
ref = period;
},
{
pos = (200,0);
ref = period;
}
);
width = 353;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,115,l),
(124,593,l),
(123,595,o),
(119,599,o),
(117,600,q),
(113,600,o),
(95,596,q),
(100,118,ls),
(100,117,o),
(104,113,o),
(105,113,qs)
);
},
{
closed = 1;
nodes = (
(111,-11,o),
(129,-7,q),
(123,64,l),
(98,64,l),
(92,0,l),
(93,-3,o),
(99,-11,o),
(101,-11,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
16 1 1 0 1 76 10 9 3 3 0 74 0 0 0 1 97 0 1 1 50 1 78 18 30 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,360,l),
(129,424,l),
(128,427,o),
(122,435,o),
(120,435,qs),
(110,435,o),
(92,431,q),
(98,360,l)
);
},
{
closed = 1;
nodes = (
(108,-176,o),
(126,-172,q),
(121,306,ls),
(121,307,o),
(117,311,o),
(116,311,qs),
(103,309,l),
(97,-169,l),
(98,-171,o),
(102,-175,o),
(104,-176,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
16 12 11 3 1 73 0 1 1 0 97 0 0 0 44 1 78 20 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 221;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,599,o),
(73,588,q),
(74,587,l),
(87,437,l),
(104,437,l),
(105,563,l),
(206,574,o),
(232,574,qs),
(270,574,o),
(307,526,o),
(307,489,qs),
(307,456,o),
(282,401,o),
(246,359,o),
(214,327,qs),
(180,293,o),
(147,242,o),
(148,214,qs),
(151,149,ls),
(151,148,o),
(155,144,o),
(156,144,qs),
(169,146,l),
(172,198,o),
(184,249,o),
(209,284,o),
(239,313,qs),
(285,357,o),
(338,439,o),
(338,487,qs),
(338,549,o),
(280,599,o),
(215,599,qs)
);
},
{
closed = 1;
nodes = (
(139,2,l),
(140,-1,o),
(148,-9,o),
(149,-9,qs),
(163,-9,o),
(176,-5,q),
(171,68,l),
(149,68,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
29 1 0 2 26 1 1 0 10 9 2 4 1 34 1 3 4 4 76 0 1 0 4 0 1 4 128 0 0 0 2 97 5 1 2 2 49 77 6 1 4 4 3 97 0 3 3 50 3 78 33 33 0 0 33 40 33 40 36 35 0 32 0 31 28 27 25 23 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,423,l),
(270,426,o),
(262,434,o),
(261,434,qs),
(247,434,o),
(234,430,q),
(239,357,l),
(261,357,l)
);
},
{
closed = 1;
nodes = (
(323,-12,l),
(306,-12,l),
(305,-138,l),
(204,-149,o),
(178,-149,qs),
(140,-149,o),
(103,-101,o),
(103,-64,qs),
(103,-31,o),
(128,24,o),
(164,66,o),
(196,98,qs),
(230,132,o),
(263,183,o),
(262,211,qs),
(259,276,ls),
(259,277,o),
(255,281,o),
(254,281,qs),
(241,279,l),
(238,227,o),
(226,176,o),
(201,141,o),
(171,112,qs),
(125,68,o),
(72,-14,o),
(72,-62,qs),
(72,-124,o),
(130,-174,o),
(195,-174,qs),
(234,-174,o),
(337,-163,q),
(336,-162,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
1 1 1 0 21 20 2 4 1 37 1 3 4 3 76 0 4 1 3 1 4 3 128 5 1 1 1 0 97 0 0 0 44 77 0 3 3 2 97 0 2 2 46 2 78 0 0 39 38 36 34 11 9 0 7 0 7 18 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 394;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,294);
ref = period;
}
);
width = 154;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(185,217,o),
(219,248,o),
(219,275,qs),
(219,302,o),
(185,333,o),
(161,333,qs),
(137,333,o),
(103,302,o),
(103,275,qs),
(103,248,o),
(137,217,o),
(161,217,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,403,l),
(169,521,l),
(260,459,l),
(271,461,l),
(278,479,l),
(176,533,l),
(279,584,l),
(270,603,l),
(258,605,l),
(169,545,l),
(176,659,l),
(168,667,l),
(148,665,l),
(155,545,l),
(65,605,l),
(51,603,l),
(45,584,l),
(148,533,l),
(44,479,l),
(51,461,l),
(64,459,l),
(155,521,l),
(148,410,l),
(155,400,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
23 11 1 50 
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(499,344,l),
(372,344,l),
(391,486,l),
(368,486,l),
(350,344,l),
(215,344,l),
(234,486,l),
(211,486,l),
(193,344,l),
(75,344,l),
(73,322,l),
(190,322,l),
(169,159,l),
(46,159,l),
(44,137,l),
(166,137,l),
(146,-17,l),
(168,-17,l),
(188,137,l),
(323,137,l),
(303,-17,l),
(324,-17,l),
(345,137,l),
(469,137,l),
(471,159,l),
(347,159,l),
(369,322,l),
(497,322,l)
);
},
{
closed = 1;
nodes = (
(191,159,l),
(212,322,l),
(347,322,l),
(326,159,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
11 1 9 8 9 133 12 10 2 8 14 16 13 3 7 0 8 7 104 15 6 2 0 5 3 2 1 2 0 1 103 4 1 2 2 42 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
11 1 9 8 9 133 4 1 2 1 2 134 12 10 2 8 14 16 13 3 7 0 8 7 104 15 6 2 0 1 1 0 87 15 6 2 0 0 1 95 5 3 2 1 0 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
0 0 31 30 29 28 0 27 0 27 26 25 24 23 22 21 20 19 17 17 17 17 17 17 17 17 17 17 8 31 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,-118,l),
(288,687,l),
(264,687,l),
(55,-118,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 343;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(259,-118,l),
(50,687,l),
(26,687,l),
(235,-118,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = exclamdown.case;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,172);
ref = exclamdown;
}
);
width = 221;
}
);
note = exclamdown.case;
},
{
glyphname = questiondown.case;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,165);
ref = questiondown;
}
);
width = 394;
}
);
note = questiondown.case;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,268,l),
(39,329,l),
(29,340,l),
(0,337,l),
(6,268,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
2 1 2 0 74 0 0 0 118 19 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 39;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,301,l),
(39,362,l),
(29,373,l),
(0,370,l),
(6,301,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
2 1 2 0 74 0 0 0 118 19 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 39;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(177,-103,l),
(125,-24,o),
(70,180,o),
(70,284,qs),
(70,389,o),
(125,592,o),
(177,670,q),
(165,680,l),
(109,606,o),
(46,395,o),
(46,284,qs),
(46,173,o),
(109,-38,o),
(165,-112,q)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
13 5 1 50 
CALL[ ]	/* CallFunction */";
};
width = 217;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,-38,o),
(171,173,o),
(171,284,qs),
(171,395,o),
(108,606,o),
(52,680,q),
(40,671,l),
(92,592,o),
(147,388,o),
(147,284,qs),
(147,179,o),
(92,-24,o),
(40,-102,q),
(52,-112,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
13 7 1 50 
CALL[ ]	/* CallFunction */";
};
width = 217;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,-92,l),
(142,-80,l),
(142,225,l),
(68,284,l),
(142,343,l),
(142,648,l),
(216,659,l),
(214,675,l),
(116,669,l),
(116,352,l),
(43,292,l),
(43,276,l),
(116,216,l),
(116,-101,l),
(214,-107,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
12 11 10 9 8 4 3 2 1 9 1 0 1 76 0 0 1 0 133 2 1 1 1 118 0 0 0 14 0 14 21 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 260;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(144,-101,l),
(144,216,l),
(217,276,l),
(217,292,l),
(144,352,l),
(144,669,l),
(46,675,l),
(44,660,l),
(118,648,l),
(118,343,l),
(192,284,l),
(118,225,l),
(118,-80,l),
(44,-91,l),
(46,-107,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
12 11 10 9 5 4 3 2 1 9 1 0 1 76 0 0 1 0 133 0 1 1 118 21 23 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 260;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,-92,l),
(96,-80,l),
(96,648,l),
(170,659,l),
(168,675,l),
(70,669,l),
(70,-101,l),
(168,-107,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
5 4 2 1 0 1 76 0 0 1 0 133 2 1 1 1 118 0 0 0 7 0 7 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,-101,l),
(143,669,l),
(45,675,l),
(43,660,l),
(117,648,l),
(117,-80,l),
(43,-91,l),
(45,-107,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
2 1 2 1 0 1 76 0 0 1 0 133 0 1 1 118 17 20 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,236,l),
(278,252,l),
(50,252,l),
(50,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 328;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
ref = hyphen;
}
);
width = 328;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(388,236,l),
(388,252,l),
(50,252,l),
(50,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(726,236,l),
(726,252,l),
(50,252,l),
(50,236,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 776;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = uni2010;
layers = (
{
layerId = m01;
shapes = (
{
ref = hyphen;
}
);
width = 328;
}
);
note = uni2010;
unicode = 8208;
},
{
glyphname = uni2011;
layers = (
{
layerId = m01;
shapes = (
{
ref = hyphen;
}
);
width = 328;
}
);
note = uni2011;
unicode = 8209;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(379,-90,l),
(379,-72,l),
(35,-72,l),
(35,-90,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 414;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = hyphen.case;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,70);
ref = hyphen;
}
);
width = 328;
}
);
note = hyphen.case;
},
{
glyphname = uni00AD.case;
layers = (
{
layerId = m01;
shapes = (
{
ref = hyphen.case;
}
);
width = 328;
}
);
note = uni00AD.case;
},
{
glyphname = endash.case;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,70);
ref = endash;
}
);
width = 438;
}
);
note = endash.case;
},
{
glyphname = emdash.case;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,70);
ref = emdash;
}
);
width = 776;
}
);
note = emdash.case;
},
{
glyphname = uni2011.case;
layers = (
{
layerId = m01;
shapes = (
{
ref = hyphen.case;
}
);
width = 328;
}
);
note = uni2011.case;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(89,-52,o),
(111,7,o),
(111,23,qs),
(111,54,ls),
(111,57,o),
(102,69,o),
(100,69,qs),
(88,69,o),
(76,66,q),
(74,8,ls),
(74,6,o),
(84,0,q),
(74,-38,o),
(60,-70,q),
(73,-77,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
14 5 2 3 0 73 0 0 0 118 22 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 171;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
ref = quotesinglbase;
},
{
pos = (102,0);
ref = quotesinglbase;
}
);
width = 273;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,417,o),
(100,423,q),
(101,492,ls),
(101,496,o),
(89,505,o),
(88,506,q),
(99,547,o),
(122,596,q),
(108,605,l),
(87,570,o),
(60,502,o),
(60,478,qs),
(60,431,ls),
(60,427,o),
(72,417,o),
(75,417,qs)
);
},
{
closed = 1;
nodes = (
(180,417,o),
(196,423,q),
(197,492,ls),
(197,496,o),
(185,505,o),
(184,506,q),
(195,547,o),
(218,596,q),
(204,605,l),
(183,570,o),
(156,502,o),
(156,478,qs),
(156,431,ls),
(156,427,o),
(168,417,o),
(171,417,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
29 25 23 22 13 9 7 6 8 0 74 1 1 0 0 118 31 30 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 281;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(98,455,o),
(125,523,o),
(125,547,qs),
(125,594,ls),
(125,598,o),
(113,608,o),
(110,608,qs),
(101,608,o),
(85,602,q),
(84,533,ls),
(84,529,o),
(96,520,o),
(97,519,q),
(86,478,o),
(63,429,q),
(77,420,l)
);
},
{
closed = 1;
nodes = (
(194,455,o),
(221,523,o),
(221,547,qs),
(221,594,ls),
(221,598,o),
(209,608,o),
(206,608,qs),
(197,608,o),
(181,602,q),
(180,533,ls),
(180,529,o),
(192,520,o),
(193,519,q),
(182,478,o),
(159,429,q),
(173,420,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
31 22 18 15 6 2 6 0 73 1 1 0 0 49 0 78 31 23 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 281;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,417,o),
(100,423,q),
(101,492,ls),
(101,496,o),
(89,505,o),
(88,506,q),
(99,547,o),
(122,596,q),
(108,605,l),
(87,570,o),
(60,502,o),
(60,478,qs),
(60,431,ls),
(60,427,o),
(72,417,o),
(75,417,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
13 9 7 6 4 0 74 0 0 0 118 30 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 185;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(98,455,o),
(125,523,o),
(125,547,qs),
(125,594,ls),
(125,598,o),
(113,608,o),
(110,608,qs),
(101,608,o),
(85,602,q),
(84,533,ls),
(84,529,o),
(96,520,o),
(97,519,q),
(86,478,o),
(63,429,q),
(77,420,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
15 6 2 3 0 73 0 0 0 49 0 78 23 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 185;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,66,l),
(78,226,l),
(78,237,l),
(192,397,l),
(177,409,l),
(45,240,l),
(45,223,l),
(177,54,l)
);
},
{
closed = 1;
nodes = (
(342,66,l),
(228,226,l),
(228,237,l),
(342,397,l),
(327,409,l),
(195,240,l),
(195,223,l),
(327,54,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 10 7 2 2 50 
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,223,l),
(212,240,l),
(80,409,l),
(65,397,l),
(179,237,l),
(179,226,l),
(65,66,l),
(80,54,l)
);
},
{
closed = 1;
nodes = (
(362,223,l),
(362,240,l),
(230,409,l),
(215,397,l),
(329,237,l),
(329,226,l),
(215,66,l),
(230,54,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 12 7 4 2 50 
CALL[ ]	/* CallFunction */";
};
width = 407;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,66,l),
(78,226,l),
(78,237,l),
(192,397,l),
(177,409,l),
(45,240,l),
(45,223,l),
(177,54,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
7 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 257;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,223,l),
(212,240,l),
(80,409,l),
(65,397,l),
(179,237,l),
(179,226,l),
(65,66,l),
(80,54,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
7 4 1 50 
CALL[ ]	/* CallFunction */";
};
width = 257;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,495,l),
(87,666,ls),
(87,668,o),
(78,679,o),
(76,679,qs),
(65,679,o),
(45,674,q),
(54,495,l)
);
},
{
closed = 1;
nodes = (
(186,495,l),
(190,546,ls),
(197,618,o),
(197,666,qs),
(197,668,o),
(188,679,o),
(186,679,qs),
(175,679,o),
(155,674,q),
(164,495,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 0 2 1 0 1 76 2 1 0 1 1 0 89 2 1 0 0 1 95 3 1 1 0 1 79 22 18 20 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,495,l),
(87,666,ls),
(87,668,o),
(78,679,o),
(76,679,qs),
(65,679,o),
(45,674,q),
(54,495,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 1 1 0 1 76 0 0 1 1 0 89 0 0 0 1 95 0 1 0 1 79 20 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 132;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = uni27E8;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,-95,l),
(108,237,l),
(402,568,l),
(372,568,l),
(75,242,l),
(75,232,l),
(373,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
4 1 0 3 1 0 1 76 0 0 1 0 133 0 1 1 118 18 18 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = uni27E8;
unicode = 10216;
},
{
glyphname = uni27E9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(104,-95,l),
(402,232,l),
(402,242,l),
(105,568,l),
(75,568,l),
(369,237,l),
(75,-95,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
4 3 2 1 0 1 76 0 0 1 0 133 0 1 1 118 19 17 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = uni27E9;
unicode = 10217;
},
{
glyphname = uni2003;
layers = (
{
layerId = m01;
width = 1000;
}
);
note = uni2003;
unicode = 8195;
},
{
glyphname = uni2002;
layers = (
{
layerId = m01;
width = 500;
}
);
note = uni2002;
unicode = 8194;
},
{
glyphname = uni2005;
layers = (
{
layerId = m01;
width = 250;
}
);
note = uni2005;
unicode = 8197;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 188;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni2004;
layers = (
{
layerId = m01;
width = 333;
}
);
note = uni2004;
unicode = 8196;
},
{
glyphname = DEL;
layers = (
{
layerId = m01;
width = 600;
}
);
note = DEL;
unicode = 127;
},
{
glyphname = uniFEFF;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uniFEFF;
unicode = 65279;
},
{
glyphname = uni20B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,13,l),
(264,13,ls),
(176,13,o),
(85,139,o),
(85,276,qs),
(85,354,o),
(123,447,o),
(154,475,qs),
(182,500,o),
(228,526,o),
(241,526,qs),
(265,526,o),
(336,520,o),
(345,518,q),
(351,423,l),
(371,423,l),
(376,539,l),
(353,543,o),
(318,546,q),
(343,634,l),
(340,645,l),
(327,649,l),
(299,548,l),
(245,552,o),
(234,552,qs),
(220,552,o),
(165,521,o),
(107,468,o),
(87,436,q),
(55,371,o),
(55,257,qs),
(55,165,o),
(111,36,o),
(167,9,q),
(139,-92,l),
(146,-100,l),
(156,-102,l),
(185,1,l),
(216,-10,o),
(254,-10,qs),
(304,-10,o),
(375,-4,o),
(376,-4,q),
(377,121,l),
(358,121,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
27 25 2 3 1 30 1 2 3 10 6 1 3 0 4 3 76 24 22 2 1 74 9 7 2 0 73 0 2 3 5 3 2 5 128 6 1 5 4 3 5 4 126 0 1 0 3 2 1 3 105 0 4 4 0 97 0 0 0 50 0 78 0 0 0 44 0 44 39 35 24 45 35 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = uni20B5;
unicode = 8373;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,56,o),
(83,141,o),
(83,243,qs),
(83,325,o),
(117,407,o),
(149,433,qs),
(167,448,o),
(202,466,o),
(213,466,qs),
(233,466,o),
(266,459,q),
(273,373,l),
(292,373,l),
(294,481,l),
(272,485,o),
(222,491,o),
(211,491,q),
(211,577,l),
(190,577,l),
(190,486,l),
(165,477,o),
(107,433,o),
(86,401,q),
(54,342,o),
(54,236,qs),
(54,146,o),
(124,40,o),
(190,32,q),
(190,-52,l),
(211,-52,l),
(211,31,l),
(213,31,ls),
(221,31,o),
(278,39,o),
(296,42,q),
(296,59,l),
(221,56,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
22 16 2 5 3 8 1 2 0 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 4 5 6 5 4 6 128 0 1 0 0 1 113 0 3 0 5 4 3 5 106 7 1 6 0 0 1 6 0 105 0 2 2 41 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 6 5 4 6 128 0 1 0 1 134 0 3 0 5 4 3 5 106 7 1 6 0 0 1 6 0 105 0 2 2 41 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 3 2 133 0 4 5 6 5 4 6 128 0 1 0 1 134 0 3 0 5 4 3 5 106 7 1 6 0 0 6 87 7 1 6 6 0 97 0 0 6 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 36 0 35 34 19 17 26 17 35 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 347;
}
);
note = cent;
unicode = 162;
},
{
glyphname = colonmonetary;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,13,ls),
(176,13,o),
(85,139,o),
(85,276,qs),
(85,354,o),
(123,447,o),
(154,475,qs),
(182,500,o),
(228,526,o),
(241,526,qs),
(265,526,o),
(336,520,o),
(345,518,q),
(351,423,l),
(371,423,l),
(376,539,l),
(352,543,l),
(377,634,l),
(374,645,l),
(361,649,l),
(332,545,l),
(293,549,o),
(272,550,q),
(295,634,l),
(292,645,l),
(279,649,l),
(252,551,l),
(245,552,o),
(234,552,qs),
(220,552,o),
(165,521,o),
(107,468,o),
(87,436,q),
(55,371,o),
(55,257,qs),
(55,121,o),
(113,51,q),
(73,-92,l),
(80,-100,l),
(90,-102,l),
(128,36,l),
(150,14,o),
(182,2,q),
(155,-92,l),
(162,-100,l),
(172,-102,l),
(199,-3,l),
(223,-10,o),
(254,-10,qs),
(304,-10,o),
(375,-4,o),
(376,-4,q),
(377,121,l),
(358,121,l),
(348,13,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 86 values pushed */
38 37 2 5 2 41 1 4 5 17 13 2 6 0 11 7 2 3 1 6 4 76 36 34 30 28 4 2 74 16 14 10 8 4 1 73 0 4 5 0 5 4 0 128 0 0 6 5 0 6 126 3 1 2 0 5 4 2 5 105 0 6 6 1 97 0 1 1 50 1 78 54 52 45 43 40 39 32 31 26 24 35 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
note = colonmonetary;
unicode = 8353;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,222,l),
(234,180,o),
(309,180,qs),
(380,180,o),
(431,223,q),
(505,151,l),
(522,171,l),
(449,241,l),
(471,268,o),
(495,336,o),
(495,372,qs),
(495,441,o),
(456,492,q),
(522,555,l),
(505,574,l),
(439,511,l),
(390,558,o),
(311,558,qs),
(271,558,o),
(205,531,o),
(182,508,q),
(112,574,l),
(95,555,l),
(164,488,l),
(125,436,o),
(125,365,qs),
(125,330,o),
(147,266,o),
(168,240,q),
(95,171,l),
(112,151,l)
);
},
{
closed = 1;
nodes = (
(260,206,o),
(190,252,o),
(155,326,o),
(155,368,qs),
(155,410,o),
(191,486,o),
(261,532,o),
(310,532,qs),
(358,532,o),
(427,486,o),
(461,412,o),
(461,370,qs),
(461,328,o),
(426,252,o),
(358,206,o),
(310,206,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
16 7 2 2 0 29 25 22 17 14 9 6 1 8 3 2 2 76 15 8 2 0 74 30 24 23 3 1 73 0 0 0 2 3 0 2 105 4 1 3 1 1 3 89 4 1 3 3 1 97 0 1 3 1 81 31 31 31 46 31 45 41 45 43 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(178,317,o),
(137,344,o),
(106,385,o),
(106,413,qs),
(106,440,o),
(143,492,o),
(191,526,o),
(202,526,qs),
(216,526,o),
(304,515,o),
(325,510,q),
(332,412,l),
(351,412,l),
(357,534,l),
(332,539,o),
(265,547,o),
(232,550,q),
(232,647,l),
(211,647,l),
(211,552,l),
(206,552,ls),
(180,552,o),
(100,486,o),
(82,450,q),
(76,426,o),
(76,404,qs),
(76,373,o),
(112,326,o),
(162,293,o),
(210,266,qs),
(237,251,ls),
(295,220,o),
(352,172,o),
(352,138,qs),
(352,109,o),
(320,53,o),
(276,17,o),
(261,17,qs),
(237,17,o),
(134,26,o),
(106,30,q),
(95,128,l),
(76,128,l),
(75,6,l),
(91,4,o),
(189,-6,qs),
(211,-8,l),
(211,-102,l),
(233,-102,l),
(233,-9,l),
(243,-10,o),
(257,-10,qs),
(291,-10,o),
(364,63,o),
(378,106,qs),
(382,121,o),
(382,151,qs),
(382,187,o),
(320,239,o),
(256,273,qs),
(224,291,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
46 43 2 7 4 16 13 10 3 0 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 4 4 5 112 0 6 7 2 7 6 2 128 0 2 3 7 2 3 126 0 1 0 1 134 0 4 0 7 6 4 7 106 0 3 3 0 97 0 0 0 50 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 5 4 5 133 0 6 7 2 7 6 2 128 0 2 3 7 2 3 126 0 1 0 1 134 0 4 0 7 6 4 7 106 0 3 3 0 97 0 0 0 50 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 21 18 31 35 21 18 39 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 447;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = dong;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,-10,o),
(291,47,qs),
(307,61,o),
(315,67,q),
(315,7,ls),
(315,4,o),
(333,-10,o),
(335,-10,qs),
(343,-10,o),
(402,2,q),
(402,19,l),
(344,19,l),
(344,430,l),
(345,515,l),
(400,515,l),
(400,535,l),
(346,535,l),
(347,620,ls),
(347,623,o),
(329,637,o),
(327,637,qs),
(318,637,o),
(257,625,q),
(257,608,l),
(315,608,l),
(315,535,l),
(202,535,l),
(202,515,l),
(315,515,l),
(315,437,l),
(303,438,o),
(282,442,qs),
(222,450,o),
(209,450,qs),
(198,450,o),
(154,428,o),
(105,387,o),
(87,360,q),
(73,331,o),
(54,247,o),
(54,195,qs),
(54,106,o),
(127,-10,o),
(216,-10,qs)
);
},
{
closed = 1;
nodes = (
(205,424,o),
(224,424,qs),
(255,424,o),
(315,408,q),
(315,98,l),
(221,17,o),
(209,17,qs),
(83,17,o),
(83,202,qs),
(83,285,o),
(133,391,o),
(195,419,qs)
);
},
{
closed = 1;
nodes = (
(60,-119,l),
(400,-119,l),
(403,-96,l),
(63,-96,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
20 1 3 4 13 1 11 0 51 50 39 3 7 11 33 1 8 7 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 3 4 2 4 3 2 128 5 1 2 6 1 1 0 2 1 103 15 1 13 0 12 13 12 100 0 4 4 51 77 0 11 11 0 97 0 0 0 52 77 10 1 7 7 8 97 14 9 2 8 8 50 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 3 4 133 0 3 2 3 133 5 1 2 6 1 1 0 2 1 103 15 1 13 0 12 13 12 100 0 11 11 0 97 0 0 0 52 77 10 1 7 7 8 97 14 9 2 8 8 50 8 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
56 56 0 0 56 59 56 59 58 57 54 52 49 47 0 43 0 42 34 18 17 20 18 17 17 20 40 16 8 31 
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = dong;
unicode = 8363;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(314,-9,o),
(410,-5,o),
(443,-2,q),
(440,114,l),
(421,115,l),
(413,20,l),
(278,20,ls),
(222,20,o),
(162,138,o),
(154,231,q),
(370,231,l),
(376,254,l),
(153,254,l),
(152,271,o),
(152,304,q),
(371,304,l),
(376,327,l),
(153,327,l),
(158,413,o),
(229,524,o),
(284,524,qs),
(411,524,l),
(416,408,l),
(435,408,l),
(441,544,l),
(365,552,o),
(291,552,qs),
(217,552,o),
(130,422,o),
(123,327,q),
(53,327,l),
(48,304,l),
(122,304,l),
(122,272,o),
(123,254,q),
(53,254,l),
(48,231,l),
(124,231,l),
(132,127,o),
(209,-9,o),
(282,-9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
15 1 6 4 37 1 13 11 2 76 0 5 6 3 6 5 3 128 0 12 0 11 0 12 11 128 0 4 0 6 5 4 6 103 7 1 3 8 1 2 1 3 2 103 9 1 1 10 1 0 12 1 0 103 0 11 11 13 97 14 1 13 13 50 13 78 0 0 0 40 0 38 36 35 34 32 30 29 28 27 17 18 33 18 34 17 18 17 18 15 8 31 
CALL[ ]	/* CallFunction */";
};
width = 508;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,610,o),
(375,597,o),
(390,593,q),
(394,598,o),
(400,608,o),
(401,612,qs),
(401,614,o),
(395,623,o),
(392,625,q),
(377,629,o),
(312,636,o),
(296,637,qs),
(286,637,o),
(247,602,o),
(214,556,o),
(212,542,qs),
(195,443,l),
(142,435,l),
(140,420,l),
(191,420,l),
(105,-85,ls),
(103,-97,o),
(83,-126,o),
(61,-148,o),
(58,-148,qs),
(47,-148,o),
(-28,-135,o),
(-43,-131,q),
(-47,-136,o),
(-53,-146,o),
(-54,-150,qs),
(-54,-152,o),
(-48,-161,o),
(-45,-163,q),
(-30,-167,o),
(35,-174,o),
(51,-175,qs),
(61,-175,o),
(100,-140,o),
(133,-94,o),
(135,-80,qs),
(220,420,l),
(335,419,l),
(339,440,l),
(224,442,l),
(242,547,ls),
(244,559,o),
(264,588,o),
(286,610,o),
(289,610,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
46 1 0 6 21 1 3 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 6 6 5 97 0 5 5 51 77 4 1 1 1 0 95 0 0 0 44 77 0 3 3 2 97 0 2 2 46 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 5 0 6 0 5 6 105 4 1 1 1 0 95 0 0 0 44 77 0 3 3 2 97 0 2 2 46 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
26 38 21 26 36 17 20 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
note = florin;
unicode = 402;
},
{
glyphname = franc;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,527,l),
(104,522,l),
(104,169,l),
(43,169,l),
(40,146,l),
(104,146,l),
(104,25,l),
(47,20,l),
(47,0,l),
(209,0,l),
(209,21,l),
(134,27,l),
(134,146,l),
(258,146,l),
(261,169,l),
(134,169,l),
(134,273,l),
(313,273,l),
(313,300,l),
(134,300,l),
(134,520,l),
(344,520,l),
(351,417,l),
(370,417,l),
(376,547,l),
(47,547,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
24 23 2 1 9 18 17 14 13 4 6 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 0 1 2 1 0 114 10 1 9 0 1 0 9 1 103 0 2 0 3 4 2 3 103 8 1 4 7 1 5 6 4 5 103 0 6 6 42 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 0 1 2 1 0 2 128 10 1 9 0 1 0 9 1 103 0 2 0 3 4 2 3 103 8 1 4 7 1 5 6 4 5 103 0 6 6 42 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 25 0 25 17 19 19 17 17 17 17 17 17 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = franc;
unicode = 8355;
},
{
glyphname = uni20B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,222,l),
(349,215,l),
(349,31,l),
(247,16,l),
(173,16,o),
(85,142,o),
(85,276,qs),
(85,354,o),
(123,447,o),
(154,475,qs),
(182,500,o),
(228,526,o),
(241,526,qs),
(265,526,o),
(336,520,o),
(345,518,q),
(351,423,l),
(371,423,l),
(376,539,l),
(313,547,l),
(337,634,l),
(334,645,l),
(321,649,l),
(293,548,l),
(261,552,o),
(234,552,qs),
(220,552,o),
(165,521,o),
(107,468,o),
(87,436,q),
(55,371,o),
(55,257,qs),
(55,175,o),
(102,52,o),
(146,21,q),
(115,-92,l),
(122,-100,l),
(132,-102,l),
(164,10,l),
(201,-10,o),
(247,-10,qs),
(264,-9,o),
(367,10,o),
(379,15,q),
(379,218,l),
(436,223,l),
(436,243,l),
(278,243,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
28 27 2 3 1 31 1 2 3 46 45 44 12 2 1 6 4 5 8 3 2 0 4 4 76 26 24 2 1 74 11 9 2 0 73 0 2 3 5 3 2 5 128 6 1 5 4 3 5 4 126 0 1 0 3 2 1 3 105 0 4 4 0 97 0 0 0 50 0 78 0 0 0 47 0 47 23 35 23 45 37 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 456;
}
);
note = uni20B2;
unicode = 8370;
},
{
glyphname = uni20AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(405,52,ls),
(278,216,o),
(234,275,q),
(463,275,l),
(466,298,l),
(234,298,l),
(407,522,l),
(463,527,l),
(463,547,l),
(315,547,l),
(315,527,l),
(371,520,l),
(199,298,l),
(134,298,l),
(134,520,l),
(195,527,l),
(195,547,l),
(47,547,l),
(47,527,l),
(104,522,l),
(104,298,l),
(49,298,l),
(46,275,l),
(104,275,l),
(104,25,l),
(47,20,l),
(47,0,l),
(195,0,l),
(195,20,l),
(134,27,l),
(134,275,l),
(197,275,l),
(303,131,o),
(407,0,q),
(482,0,l),
(482,20,l),
(426,25,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
28 25 24 21 20 17 16 7 4 5 11 10 7 6 0 5 0 1 2 76 7 1 5 4 5 133 8 6 2 4 9 3 2 1 0 4 1 104 2 1 0 0 42 0 78 33 32 19 19 19 19 17 19 19 18 17 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = uni20AD;
unicode = 8365;
},
{
glyphname = lira;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,129,l),
(381,19,l),
(137,28,l),
(151,40,o),
(161,114,o),
(161,175,qs),
(161,206,l),
(283,206,l),
(286,229,l),
(161,229,l),
(160,289,l),
(160,303,l),
(292,303,l),
(295,326,l),
(159,326,l),
(158,388,ls),
(158,444,o),
(167,503,o),
(193,531,o),
(219,531,qs),
(284,531,o),
(366,526,q),
(371,412,l),
(389,412,l),
(395,545,l),
(302,552,o),
(246,552,qs),
(195,552,o),
(146,522,o),
(131,457,o),
(131,394,qs),
(132,326,l),
(77,326,l),
(74,303,l),
(132,303,l),
(132,288,l),
(132,229,l),
(68,229,l),
(65,206,l),
(133,206,l),
(133,171,ls),
(133,112,o),
(125,54,o),
(99,24,o),
(71,16,q),
(79,-6,l),
(111,0,o),
(178,0,qs),
(411,0,l),
(409,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
24 1 7 5 4 1 0 12 2 76 3 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 6 7 4 7 6 4 128 0 13 1 12 12 13 114 0 5 0 7 6 5 7 103 8 1 4 9 1 3 2 4 3 103 10 1 2 11 1 1 13 2 1 103 0 12 12 0 96 0 0 0 42 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 6 7 4 7 6 4 128 0 13 1 12 1 13 12 128 0 5 0 7 6 5 7 103 8 1 4 9 1 3 2 4 3 103 10 1 2 11 1 1 13 2 1 103 0 12 12 0 96 0 0 0 42 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
49 48 47 46 42 41 40 39 37 36 20 49 18 36 17 18 17 23 32 14 8 31 
CALL[ ]	/* CallFunction */";
};
width = 472;
}
);
note = lira;
unicode = 8356;
},
{
glyphname = uni20BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,202,l),
(342,191,o),
(342,170,qs),
(342,99,o),
(297,27,o),
(240,27,qs),
(134,27,l),
(134,218,l),
(303,266,l),
(303,290,l),
(134,242,l),
(134,318,l),
(303,366,l),
(303,390,l),
(134,342,l),
(134,520,l),
(205,526,l),
(205,547,l),
(47,547,l),
(47,527,l),
(104,522,l),
(104,333,l),
(47,317,l),
(47,293,l),
(104,309,l),
(104,233,l),
(47,217,l),
(47,193,l),
(104,209,l),
(104,25,l),
(47,20,l),
(47,0,l),
(232,0,ls),
(305,0,o),
(375,84,o),
(375,169,qs),
(375,191,o),
(374,202,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
29 28 27 26 25 24 23 22 21 20 17 16 15 14 13 12 11 10 8 19 3 1 9 1 2 3 7 6 2 0 2 3 76 0 1 3 1 133 0 3 2 3 133 0 2 2 0 95 0 0 0 42 0 78 20 43 29 35 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 405;
}
);
note = uni20BA;
unicode = 8378;
},
{
glyphname = uni20BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(518,188,o),
(518,316,qs),
(518,425,o),
(415,555,o),
(307,557,q),
(307,651,l),
(301,655,l),
(288,652,l),
(288,557,l),
(179,553,o),
(76,415,o),
(76,299,qs),
(76,181,o),
(128,25,q),
(50,20,l),
(50,0,l),
(158,0,l),
(103,186,o),
(103,303,qs),
(103,379,o),
(147,478,o),
(191,506,q),
(217,520,o),
(255,532,o),
(288,533,q),
(288,110,l),
(295,106,l),
(307,108,l),
(307,533,l),
(310,533,ls),
(401,533,o),
(488,407,o),
(488,304,qs),
(488,232,o),
(448,71,o),
(414,0,q),
(539,0,l),
(539,20,l),
(451,25,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
12 11 10 3 4 1 1 76 32 31 30 3 5 74 6 1 5 2 1 1 4 5 1 105 8 7 2 4 4 0 95 3 1 0 0 42 0 78 0 0 0 38 0 38 20 20 17 23 21 21 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = uni20BC;
unicode = 8380;
},
{
glyphname = uni20A6;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,547,l),
(344,547,l),
(344,526,l),
(405,520,l),
(405,500,l),
(408,28,l),
(402,28,l),
(376,87,o),
(358,123,qs),
(143,547,l),
(47,547,l),
(47,527,l),
(104,522,l),
(104,344,l),
(49,344,l),
(46,321,l),
(104,321,l),
(104,224,l),
(49,224,l),
(46,201,l),
(104,201,l),
(104,25,l),
(47,20,l),
(47,0,l),
(195,0,l),
(195,20,l),
(134,27,l),
(134,46,l),
(131,491,l),
(137,491,l),
(162,435,o),
(178,404,qs),
(385,-2,l),
(396,-10,o),
(399,-10,qs),
(435,-5,l),
(435,201,l),
(488,201,l),
(491,224,l),
(435,224,l),
(435,321,l),
(488,321,l),
(491,344,l),
(435,344,l),
(435,522,l),
(492,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
45 42 41 33 32 15 0 7 0 9 38 23 22 19 18 5 4 3 2 76 9 1 4 73 10 1 9 0 9 133 8 1 0 7 1 1 2 0 1 104 6 1 2 5 1 3 4 2 3 103 0 4 4 42 4 78 44 43 35 34 17 17 17 19 28 17 17 17 17 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 532;
}
);
note = uni20A6;
unicode = 8358;
},
{
glyphname = peseta;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,0,l),
(209,21,l),
(134,27,l),
(134,217,l),
(270,217,ls),
(343,217,o),
(421,296,o),
(425,365,q),
(475,365,l),
(478,388,l),
(425,388,l),
(423,480,o),
(342,547,o),
(273,547,qs),
(47,547,l),
(47,527,l),
(104,522,l),
(104,388,l),
(49,388,l),
(46,365,l),
(104,365,l),
(104,25,l),
(47,20,l),
(47,0,l)
);
},
{
closed = 1;
nodes = (
(134,520,l),
(282,520,ls),
(342,520,o),
(395,456,o),
(395,378,qs),
(395,302,o),
(332,244,o),
(280,244,qs),
(134,244,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
7 6 2 8 2 21 20 1 0 4 6 5 2 76 0 2 0 8 1 2 8 103 3 1 1 4 1 0 7 1 0 103 9 1 7 0 5 6 7 5 103 0 6 6 42 6 78 25 24 31 29 24 32 25 32 19 34 17 18 35 17 18 10 8 29 
CALL[ ]	/* CallFunction */";
};
width = 481;
}
);
note = peseta;
unicode = 8359;
},
{
glyphname = uni20B1;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(425,394,o),
(423,416,q),
(475,416,l),
(478,439,l),
(420,439,l),
(408,501,o),
(331,547,o),
(273,547,qs),
(47,547,l),
(47,527,l),
(104,522,l),
(104,439,l),
(49,439,l),
(46,416,l),
(104,416,l),
(104,339,l),
(49,339,l),
(46,316,l),
(104,316,l),
(104,25,l),
(47,20,l),
(47,0,l),
(209,0,l),
(209,21,l),
(134,27,l),
(134,217,l),
(270,217,ls),
(329,217,o),
(402,268,o),
(417,316,q),
(475,316,l),
(478,339,l),
(422,339,l),
(425,359,o),
(425,379,qs)
);
},
{
closed = 1;
nodes = (
(134,244,l),
(134,520,l),
(282,520,ls),
(342,520,o),
(395,456,o),
(395,378,qs),
(395,302,o),
(332,244,o),
(280,244,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
24 23 2 11 8 14 13 10 9 4 3 2 2 76 0 8 0 11 7 8 11 103 5 1 0 4 1 1 12 0 1 103 13 1 12 0 2 3 12 2 103 10 1 6 6 7 95 9 1 7 7 44 77 0 3 3 42 3 78 35 35 35 43 35 42 41 39 32 31 30 29 35 17 17 17 19 19 34 17 17 14 8 31 
CALL[ ]	/* CallFunction */";
};
width = 481;
}
);
note = uni20B1;
unicode = 8369;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,0,l),
(209,21,l),
(134,27,l),
(134,115,l),
(353,115,l),
(356,138,l),
(134,138,l),
(134,217,l),
(270,217,ls),
(346,217,o),
(425,303,o),
(425,379,qs),
(425,476,o),
(344,547,o),
(273,547,qs),
(47,547,l),
(47,527,l),
(104,522,l),
(104,244,l),
(59,244,l),
(56,217,l),
(104,217,l),
(104,138,l),
(47,138,l),
(44,115,l),
(104,115,l),
(104,25,l),
(47,20,l),
(47,0,l)
);
},
{
closed = 1;
nodes = (
(134,520,l),
(282,520,ls),
(342,520,o),
(395,456,o),
(395,378,qs),
(395,302,o),
(332,244,o),
(280,244,qs),
(134,244,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
11 10 2 10 4 26 25 1 0 4 8 0 2 76 0 4 0 10 3 4 10 103 11 9 2 3 5 1 2 1 3 2 103 6 1 1 7 1 0 8 1 0 103 0 8 8 42 8 78 30 29 36 34 29 37 30 37 19 17 17 36 35 17 17 17 18 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 465;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni20B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,547,l),
(64,524,l),
(162,524,ls),
(212,524,o),
(265,479,o),
(272,427,q),
(64,427,l),
(64,404,l),
(274,404,l),
(275,397,o),
(275,381,qs),
(275,244,o),
(160,244,qs),
(64,244,l),
(64,221,l),
(187,84,o),
(267,0,q),
(341,0,l),
(341,20,l),
(288,25,l),
(262,49,o),
(151,164,o),
(100,221,q),
(150,221,ls),
(226,221,o),
(305,307,o),
(305,383,qs),
(305,397,o),
(304,404,q),
(417,404,l),
(420,427,l),
(302,427,l),
(294,496,o),
(251,524,q),
(432,524,l),
(435,547,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
16 1 4 3 1 76 20 1 3 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 3 4 134 0 9 8 1 0 1 9 0 103 0 2 6 1 2 87 7 1 1 0 6 5 1 6 103 0 5 3 3 5 87 0 5 5 3 97 0 3 5 3 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 4 3 4 134 0 9 8 1 0 1 9 0 103 7 1 1 6 1 2 5 1 2 103 0 5 3 3 5 87 0 5 5 3 97 0 3 5 3 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 4 3 4 134 0 9 8 1 0 1 9 0 103 0 2 6 1 2 87 7 1 1 0 6 5 1 6 103 0 5 3 3 5 87 0 5 5 3 97 0 3 5 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
35 34 34 17 34 35 21 36 17 18 16 10 6 31 
CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
note = uni20B9;
unicode = 8377;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,129,l),
(381,19,l),
(137,28,l),
(151,40,o),
(161,117,o),
(161,179,qs),
(161,244,o),
(160,278,q),
(286,278,l),
(289,301,l),
(160,301,l),
(159,336,o),
(159,394,qs),
(159,447,o),
(168,504,o),
(194,531,o),
(219,531,qs),
(284,531,o),
(366,526,q),
(371,412,l),
(389,412,l),
(395,545,l),
(302,552,o),
(246,552,qs),
(196,552,o),
(147,522,o),
(131,458,o),
(131,396,qs),
(132,301,l),
(71,301,l),
(68,278,l),
(132,278,l),
(133,163,ls),
(133,107,o),
(125,52,o),
(99,24,o),
(71,16,q),
(79,-6,l),
(111,0,o),
(178,0,qs),
(411,0,l),
(409,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
19 1 5 3 4 1 0 8 2 76 3 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 4 5 2 5 4 2 128 0 9 1 8 8 9 114 0 3 0 5 4 3 5 103 6 1 2 7 1 1 9 2 1 103 0 8 8 0 96 0 0 0 42 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 4 5 2 5 4 2 128 0 9 1 8 1 9 8 128 0 3 0 5 4 3 5 103 6 1 2 7 1 1 9 2 1 103 0 8 8 0 96 0 0 0 42 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
41 40 21 17 21 49 18 36 17 23 32 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 472;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = uni20A9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(718,547,l),
(563,547,l),
(563,527,l),
(632,520,l),
(586,336,o),
(508,61,qs),
(506,53,o),
(497,21,q),
(489,21,l),
(446,189,o),
(431,243,qs),
(355,520,l),
(425,527,l),
(425,547,l),
(276,547,l),
(276,527,l),
(324,522,l),
(356,400,l),
(313,240,o),
(250,21,q),
(242,21,l),
(184,243,l),
(108,520,l),
(163,527,l),
(163,547,l),
(20,547,l),
(20,527,l),
(77,522,l),
(119,367,l),
(27,367,l),
(24,344,l),
(126,344,l),
(160,218,l),
(27,218,l),
(24,195,l),
(166,195,l),
(220,-2,l),
(231,-10,o),
(234,-10,qs),
(270,-5,l),
(366,344,l),
(372,344,l),
(467,-2,l),
(478,-10,o),
(481,-10,qs),
(517,-5,l),
(574,195,l),
(711,195,l),
(714,218,l),
(580,218,l),
(604,302,o),
(615,344,q),
(711,344,l),
(714,367,l),
(621,367,l),
(628,394,ls),
(647,466,o),
(661,522,q),
(718,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
58 55 54 46 45 42 40 35 34 31 10 0 8 1 76 16 1 1 1 75 49 37 19 13 4 3 73 10 9 2 8 0 8 133 7 1 0 6 1 1 2 0 1 104 5 1 2 3 3 2 87 5 1 2 2 3 95 4 1 3 2 3 79 57 56 44 43 19 17 17 17 27 17 18 17 19 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = uni20A9;
unicode = 8361;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,0,l),
(361,21,l),
(283,27,l),
(283,199,l),
(446,199,l),
(451,222,l),
(283,222,l),
(283,232,l),
(326,315,l),
(446,315,l),
(451,338,l),
(338,338,l),
(432,521,l),
(497,529,l),
(497,547,l),
(336,547,l),
(336,528,l),
(399,521,l),
(268,256,l),
(263,256,l),
(130,520,l),
(189,526,l),
(189,547,l),
(45,547,l),
(45,529,l),
(100,521,l),
(195,338,l),
(86,338,l),
(81,315,l),
(207,315,l),
(255,222,l),
(86,222,l),
(81,199,l),
(255,199,l),
(255,26,l),
(182,19,l),
(182,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
22 19 18 15 14 11 6 3 4 28 16 2 1 2 34 33 1 0 4 10 0 3 76 5 1 4 3 4 133 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 0 10 10 42 10 78 36 35 32 31 18 17 19 23 19 17 17 17 18 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 542;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni2219;
layers = (
{
layerId = m01;
shapes = (
{
pos = (120,0);
ref = periodcentered;
}
);
width = 393;
}
);
note = uni2219;
unicode = 8729;
},
{
glyphname = uni2052;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,30);
ref = slash;
},
{
pos = (-4,592);
ref = period;
},
{
pos = (193,0);
ref = period;
}
);
width = 355;
}
);
note = uni2052;
unicode = 8274;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
ref = fraction;
}
);
width = 470;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,266,l),
(325,474,l),
(299,474,l),
(299,266,l),
(110,266,l),
(110,242,l),
(299,242,l),
(299,33,l),
(325,33,l),
(325,242,l),
(522,242,l),
(522,266,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 4 3 4 133 0 1 0 1 134 5 1 3 0 0 3 87 5 1 3 3 0 95 2 1 0 3 0 79 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,242,l),
(522,266,l),
(110,266,l),
(110,242,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 632;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,394,l),
(250,256,l),
(110,394,l),
(90,374,l),
(230,237,l),
(90,99,l),
(108,80,l),
(250,218,l),
(391,80,l),
(409,99,l),
(269,237,l),
(409,374,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
8 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 499;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
pos = (240,400);
ref = period;
},
{
pos = (0,11);
ref = minus;
},
{
pos = (240,59);
ref = period;
}
);
width = 632;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(502,312,l),
(502,336,l),
(110,336,l),
(110,312,l)
);
},
{
closed = 1;
nodes = (
(502,172,l),
(502,196,l),
(110,196,l),
(110,172,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 612;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,336,l),
(348,336,l),
(400,552,l),
(376,552,l),
(324,336,l),
(119,336,l),
(119,312,l),
(319,312,l),
(291,196,l),
(119,196,l),
(119,172,l),
(285,172,l),
(223,-88,l),
(247,-88,l),
(309,172,l),
(511,172,l),
(511,196,l),
(315,196,l),
(343,312,l),
(511,312,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 7 6 7 133 0 2 1 2 134 8 1 6 10 9 2 5 0 6 5 104 4 1 0 1 1 0 87 4 1 0 0 1 95 3 1 1 0 1 79 0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(486,222,l),
(486,252,l),
(95,438,l),
(95,408,l),
(459,237,l),
(95,66,l),
(95,36,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 3 1 50 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(486,66,l),
(122,237,l),
(486,408,l),
(486,438,l),
(95,252,l),
(95,222,l),
(486,36,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = less;
unicode = 60;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,244,l),
(497,274,l),
(95,460,l),
(95,430,l),
(470,259,l),
(95,88,l),
(95,58,l)
);
},
{
closed = 1;
nodes = (
(497,-17,l),
(497,7,l),
(95,7,l),
(95,-17,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 23 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,88,l),
(122,259,l),
(497,430,l),
(497,460,l),
(95,274,l),
(95,244,l),
(497,58,l)
);
},
{
closed = 1;
nodes = (
(497,-17,l),
(497,7,l),
(95,7,l),
(95,-17,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 23 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,114,l),
(303,303,l),
(487,303,l),
(487,327,l),
(303,327,l),
(303,515,l),
(277,515,l),
(277,327,l),
(95,327,l),
(95,303,l),
(277,303,l),
(277,114,l)
);
},
{
closed = 1;
nodes = (
(102,13,l),
(494,13,l),
(494,37,l),
(102,37,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 1 2 133 0 5 0 7 0 5 7 128 3 1 1 4 1 0 5 1 0 103 8 1 7 7 6 95 0 6 6 42 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 2 133 0 5 0 7 0 5 7 128 3 1 1 4 1 0 5 1 0 103 8 1 7 6 6 7 87 8 1 7 7 6 95 0 6 7 6 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
12 12 12 15 12 15 18 17 17 17 17 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(384,292,o),
(427,323,o),
(445,341,q),
(434,353,l),
(431,351,o),
(410,334,o),
(383,319,o),
(366,319,qs),
(336,319,o),
(271,332,qs),
(263,333,o),
(195,345,o),
(171,345,qs),
(155,345,o),
(113,314,o),
(95,295,q),
(106,284,l),
(126,301,o),
(155,318,o),
(174,318,qs),
(197,318,o),
(263,306,qs),
(333,292,o),
(368,292,qs)
);
},
{
closed = 1;
nodes = (
(396,142,o),
(445,191,q),
(434,203,l),
(414,186,o),
(385,169,o),
(366,169,qs),
(335,169,o),
(272,182,qs),
(264,183,o),
(196,195,o),
(172,195,qs),
(156,195,o),
(112,163,o),
(95,145,q),
(106,134,l),
(109,136,o),
(130,153,o),
(157,168,o),
(174,168,qs),
(199,168,o),
(263,156,qs),
(335,142,o),
(369,142,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 89 values pushed */
20 1 2 1 7 1 3 0 43 6 2 5 3 44 1 6 5 32 1 7 4 5 76 0 1 0 0 3 1 0 105 0 2 8 1 3 5 2 3 105 0 6 4 7 6 89 0 5 0 4 7 5 4 105 0 6 6 7 97 9 1 7 6 7 81 24 24 0 0 24 46 24 45 41 39 36 34 28 26 0 23 0 22 35 37 34 10 6 25 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,296,o),
(413,338,q),
(402,353,l),
(384,340,o),
(355,324,o),
(342,324,qs),
(321,324,o),
(262,341,qs),
(192,361,o),
(163,361,qs),
(145,361,o),
(95,319,q),
(106,304,l),
(124,317,o),
(153,333,o),
(166,333,qs),
(187,333,o),
(246,316,qs),
(316,296,o),
(345,296,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 49 values pushed */
17 16 2 0 1 7 6 2 3 2 2 76 0 1 0 0 2 1 0 105 0 2 3 3 2 89 0 2 2 3 97 4 1 3 2 3 81 0 0 0 19 0 18 34 36 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 508;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,314,l),
(30,291,l),
(415,291,l),
(415,159,l),
(438,159,l),
(438,314,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 1 1 0 113 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 0 134 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 478;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,584,l),
(411,266,l),
(428,275,l),
(257,603,l),
(231,603,l),
(60,275,l),
(77,266,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
5 3 2 0 73 0 0 0 118 17 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 488;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,393,o),
(358,341,o),
(332,295,q),
(302,342,o),
(243,393,o),
(198,393,qs),
(143,393,o),
(80,321,o),
(80,267,qs),
(80,222,o),
(137,160,o),
(186,160,qs),
(234,160,o),
(309,214,o),
(332,256,q),
(361,209,o),
(417,160,o),
(460,160,qs),
(518,160,o),
(585,234,o),
(585,287,qs),
(585,336,o),
(520,393,o),
(474,393,qs)
);
},
{
closed = 1;
nodes = (
(424,181,o),
(374,230,o),
(342,279,q),
(365,324,o),
(432,373,o),
(471,373,qs),
(516,373,o),
(563,322,o),
(563,278,qs),
(563,255,o),
(557,229,q),
(546,208,o),
(497,181,o),
(463,181,qs)
);
},
{
closed = 1;
nodes = (
(146,180,o),
(99,236,o),
(99,278,qs),
(99,298,o),
(105,319,qs),
(112,341,o),
(164,372,o),
(195,372,qs),
(238,372,o),
(291,321,o),
(323,271,q),
(304,234,o),
(231,180,o),
(185,180,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
40 34 20 8 4 5 4 1 76 8 3 2 2 6 1 4 5 2 4 105 10 7 9 3 5 0 0 5 89 10 7 9 3 5 5 0 97 1 1 0 5 0 81 38 38 24 24 0 0 38 51 38 50 44 42 24 37 24 36 32 30 0 23 0 22 36 36 36 11 6 25 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = emptyset;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,574,l),
(425,510,l),
(375,558,o),
(296,558,qs),
(237,558,o),
(153,503,o),
(110,415,o),
(110,365,qs),
(110,293,o),
(152,242,q),
(80,171,l),
(97,151,l),
(170,223,l),
(220,180,o),
(294,180,qs),
(353,180,o),
(437,235,o),
(480,323,o),
(480,372,qs),
(480,439,o),
(442,491,q),
(507,555,l)
);
},
{
closed = 1;
nodes = (
(140,410,o),
(176,486,o),
(246,532,o),
(295,532,qs),
(362,532,o),
(403,488,q),
(173,263,l),
(140,307,o),
(140,368,qs)
);
},
{
closed = 1;
nodes = (
(446,328,o),
(411,252,o),
(343,206,o),
(295,206,qs),
(232,206,o),
(191,244,q),
(418,468,l),
(446,425,o),
(446,370,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
21 1 2 1 33 32 24 23 19 11 8 7 3 2 2 76 20 1 1 74 10 9 2 0 73 0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 39 39 41 37 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = emptyset;
unicode = 8709;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,-161,o),
(185,-122,o),
(210,-63,o),
(210,-36,qs),
(210,31,o),
(190,269,qs),
(170,507,o),
(170,573,qs),
(170,599,o),
(186,641,o),
(206,666,o),
(209,666,qs),
(220,666,o),
(297,653,o),
(313,649,q),
(316,653,o),
(321,663,o),
(321,667,qs),
(321,668,ls),
(321,670,o),
(313,679,o),
(310,681,q),
(294,685,o),
(228,692,o),
(212,693,qs),
(201,693,o),
(166,654,o),
(141,595,o),
(141,568,qs),
(141,502,o),
(161,264,qs),
(181,26,o),
(181,-41,qs),
(181,-67,o),
(165,-109,o),
(145,-134,o),
(142,-134,qs),
(131,-134,o),
(54,-121,o),
(38,-117,q),
(35,-121,o),
(30,-131,o),
(30,-135,qs),
(30,-136,ls),
(30,-138,o),
(38,-147,o),
(41,-149,q),
(57,-153,o),
(123,-160,o),
(139,-161,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 3 4 0 4 3 0 128 0 0 1 4 0 1 126 0 2 0 4 3 2 4 105 0 1 5 5 1 89 0 1 1 5 97 6 1 5 1 5 81 0 0 0 49 0 48 17 40 43 17 40 7 6 27 
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = uni2126;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni03A9;
}
);
width = 582;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = uni2206;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni0394;
}
);
width = 516;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,591,l),
(52,591,l),
(52,571,l),
(109,566,l),
(109,-84,l),
(52,-90,l),
(52,-110,l),
(200,-110,l),
(200,-90,l),
(139,-83,l),
(139,563,l),
(416,563,l),
(416,-83,l),
(355,-90,l),
(355,-110,l),
(503,-110,l),
(503,-90,l),
(446,-84,l),
(446,565,l),
(503,571,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
19 16 15 0 4 1 3 14 13 10 9 6 5 2 1 8 0 1 2 76 2 1 0 1 0 134 0 3 1 1 3 87 0 3 3 1 95 0 1 3 1 79 21 19 19 19 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,-111,l),
(390,26,l),
(371,26,l),
(367,-92,l),
(86,-84,l),
(237,232,l),
(237,239,l),
(95,565,l),
(365,570,l),
(368,465,l),
(387,465,l),
(394,591,l),
(63,591,l),
(63,573,l),
(211,236,l),
(55,-93,l),
(55,-111,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
2 1 2 0 9 1 2 4 1 0 1 5 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 0 0 2 1 0 2 103 0 3 5 5 3 87 0 3 3 5 96 0 5 3 5 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 1 2 4 2 1 114 0 4 3 2 4 3 126 0 0 0 2 1 0 2 103 0 3 5 5 3 87 0 3 3 5 96 0 5 3 5 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 103 0 3 5 5 3 87 0 3 3 5 96 0 5 3 5 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 19 17 17 19 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 460;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,0,l),
(452,780,l),
(425,791,l),
(257,28,l),
(247,28,l),
(122,421,l),
(55,412,l),
(57,391,l),
(103,385,l),
(227,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
7 2 2 0 74 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 19 20 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 502;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,-2,o),
(336,96,o),
(375,249,o),
(375,333,qs),
(375,491,o),
(260,647,o),
(136,647,qs),
(105,647,l),
(114,507,l),
(135,507,l),
(134,620,l),
(141,621,o),
(154,621,qs),
(250,621,o),
(348,471,o),
(349,324,q),
(330,334,ls),
(281,359,o),
(224,385,o),
(206,385,qs),
(133,385,o),
(56,279,o),
(56,196,qs),
(56,158,o),
(63,123,q),
(78,74,o),
(135,9,o),
(158,2,qs),
(171,-2,o),
(189,-2,qs)
);
},
{
closed = 1;
nodes = (
(140,21,o),
(83,120,o),
(83,189,qs),
(83,261,o),
(147,363,o),
(211,363,qs),
(235,363,o),
(348,301,q),
(344,231,o),
(306,103,o),
(238,21,o),
(192,21,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 13 2 6 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 1 0 1 2 114 0 3 0 1 2 3 1 105 0 0 0 5 6 0 5 105 8 1 6 4 4 6 89 8 1 6 6 4 97 7 1 4 6 4 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 2 1 0 1 2 0 128 0 3 0 1 2 3 1 105 0 0 0 5 6 0 5 105 8 1 6 4 4 6 89 8 1 6 6 4 97 7 1 4 6 4 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
30 30 0 0 30 41 30 40 36 34 0 29 0 28 33 18 37 40 9 6 26 
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni03BC;
}
);
width = 473;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,-9,l),
(547,611,l),
(519,611,l),
(216,-9,l)
);
},
{
closed = 1;
nodes = (
(253,306,o),
(316,384,o),
(316,442,qs),
(316,506,o),
(264,580,o),
(211,580,qs),
(158,580,o),
(95,502,o),
(95,444,qs),
(95,380,o),
(147,306,o),
(200,306,qs)
);
},
{
closed = 1;
nodes = (
(124,329,o),
(124,447,qs),
(124,471,o),
(137,518,o),
(149,535,q),
(170,557,o),
(213,557,qs),
(253,557,o),
(288,492,o),
(288,441,qs),
(288,416,o),
(274,368,o),
(262,351,q),
(241,329,o),
(198,329,qs)
);
},
{
closed = 1;
nodes = (
(597,-10,o),
(660,68,o),
(660,126,qs),
(660,190,o),
(608,264,o),
(555,264,qs),
(502,264,o),
(439,186,o),
(439,128,qs),
(439,64,o),
(491,-10,o),
(544,-10,qs)
);
},
{
closed = 1;
nodes = (
(468,13,o),
(468,131,qs),
(468,155,o),
(481,202,o),
(493,219,q),
(514,241,o),
(557,241,qs),
(597,241,o),
(632,176,o),
(632,125,qs),
(632,100,o),
(618,52,o),
(606,35,q),
(585,13,o),
(542,13,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 105 0 0 0 43 77 0 4 4 2 97 0 2 2 41 77 13 1 9 9 1 97 12 7 2 1 1 50 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 0 2 0 133 11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 105 0 4 4 2 97 0 2 2 41 77 13 1 9 9 1 97 12 7 2 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 0 2 0 133 0 2 0 4 5 2 4 105 11 1 5 10 1 3 6 5 3 105 0 6 0 8 9 6 8 105 13 1 9 9 1 97 12 7 2 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
43 43 31 31 16 16 4 4 43 57 43 56 51 49 31 42 31 41 37 35 16 30 16 29 24 22 4 15 4 14 37 17 16 14 8 25 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,-9,l),
(547,611,l),
(519,611,l),
(216,-9,l)
);
},
{
closed = 1;
nodes = (
(253,306,o),
(316,384,o),
(316,442,qs),
(316,506,o),
(264,580,o),
(211,580,qs),
(158,580,o),
(95,502,o),
(95,444,qs),
(95,380,o),
(147,306,o),
(200,306,qs)
);
},
{
closed = 1;
nodes = (
(124,329,o),
(124,447,qs),
(124,471,o),
(137,518,o),
(149,535,q),
(170,557,o),
(213,557,qs),
(253,557,o),
(288,492,o),
(288,441,qs),
(288,416,o),
(274,368,o),
(262,351,q),
(241,329,o),
(198,329,qs)
);
},
{
closed = 1;
nodes = (
(597,-10,o),
(660,68,o),
(660,126,qs),
(660,190,o),
(608,264,o),
(555,264,qs),
(502,264,o),
(439,186,o),
(439,128,qs),
(439,64,o),
(491,-10,o),
(544,-10,qs)
);
},
{
closed = 1;
nodes = (
(896,-10,o),
(959,68,o),
(959,126,qs),
(959,190,o),
(907,264,o),
(854,264,qs),
(801,264,o),
(738,186,o),
(738,128,qs),
(738,64,o),
(790,-10,o),
(843,-10,qs)
);
},
{
closed = 1;
nodes = (
(468,13,o),
(468,131,qs),
(468,155,o),
(481,202,o),
(493,219,q),
(514,241,o),
(557,241,qs),
(597,241,o),
(632,176,o),
(632,125,qs),
(632,100,o),
(618,52,o),
(606,35,q),
(585,13,o),
(542,13,qs)
);
},
{
closed = 1;
nodes = (
(767,13,o),
(767,131,qs),
(767,155,o),
(780,202,o),
(792,219,q),
(813,241,o),
(856,241,qs),
(896,241,o),
(931,176,o),
(931,125,qs),
(931,100,o),
(917,52,o),
(905,35,q),
(884,13,o),
(841,13,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
15 1 5 14 1 3 6 5 3 105 8 1 6 12 1 10 11 6 10 105 0 0 0 43 77 0 4 4 2 97 0 2 2 41 77 19 13 18 3 11 11 1 97 17 9 16 7 4 1 1 50 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 0 2 0 133 15 1 5 14 1 3 6 5 3 105 8 1 6 12 1 10 11 6 10 105 0 4 4 2 97 0 2 2 41 77 19 13 18 3 11 11 1 97 17 9 16 7 4 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 0 2 0 133 0 2 0 4 5 2 4 105 15 1 5 14 1 3 6 5 3 105 8 1 6 12 1 10 11 6 10 105 19 13 18 3 11 11 1 97 17 9 16 7 4 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 52 values pushed */
70 70 55 55 43 43 31 31 16 16 4 4 70 84 70 83 78 76 55 69 55 68 63 61 43 54 43 53 49 47 31 42 31 41 37 35 16 30 16 29 24 22 4 15 4 14 37 17 16 20 8 25 
CALL[ ]	/* CallFunction */";
};
width = 1054;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,-2,l),
(402,295,l),
(402,306,l),
(239,603,l),
(218,603,l),
(55,306,l),
(55,295,l),
(218,-2,l)
);
},
{
closed = 1;
nodes = (
(86,295,l),
(86,306,l),
(225,566,l),
(232,566,l),
(371,306,l),
(371,295,l),
(232,36,l),
(225,36,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
14 13 11 10 9 5 4 1 0 9 1 0 1 76 0 0 1 0 133 0 1 1 118 19 18 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(400,-162,o),
(446,-150,q),
(443,-131,l),
(409,-137,o),
(373,-137,qs),
(226,-137,o),
(75,50,o),
(75,210,qs),
(75,313,o),
(130,472,o),
(172,514,q),
(221,555,o),
(323,593,o),
(389,593,qs),
(531,593,o),
(668,429,o),
(668,276,qs),
(668,191,o),
(619,61,o),
(587,19,q),
(492,22,l),
(492,432,l),
(376,450,o),
(357,450,qs),
(346,450,o),
(303,428,o),
(254,387,o),
(236,359,q),
(202,293,o),
(202,195,qs),
(202,106,o),
(275,-10,o),
(364,-10,qs),
(369,-10,o),
(427,37,o),
(435,44,qs),
(465,69,l),
(463,7,ls),
(463,4,o),
(481,-10,o),
(483,-10,qs),
(497,-10,o),
(568,-4,o),
(604,2,q),
(648,58,o),
(696,207,o),
(696,288,qs),
(696,445,o),
(541,620,o),
(388,620,qs),
(277,620,o),
(123,517,o),
(46,340,o),
(46,229,qs),
(46,115,o),
(113,-62,o),
(251,-162,o),
(352,-162,qs)
);
},
{
closed = 1;
nodes = (
(299,17,o),
(231,103,o),
(231,207,qs),
(231,293,o),
(284,390,o),
(345,425,o),
(363,425,qs),
(381,425,o),
(463,409,q),
(463,98,l),
(446,84,o),
(447,85,qs),
(368,17,o),
(357,17,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
35 1 8 3 62 61 20 3 4 8 54 1 6 1 55 1 7 6 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 5 0 97 0 0 0 43 77 0 8 8 3 97 0 3 3 52 77 11 9 2 4 4 1 97 2 1 1 1 50 77 0 6 6 7 97 10 1 7 7 46 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 0 0 5 3 0 5 105 0 6 10 1 7 6 7 101 0 8 8 3 97 0 3 3 52 77 11 9 2 4 4 1 97 2 1 1 1 50 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
58 58 0 0 58 71 58 70 65 63 0 57 0 56 39 37 18 39 39 23 38 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 742;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,108,o),
(379,148,q),
(427,227,o),
(486,328,q),
(537,336,l),
(537,353,l),
(371,353,l),
(372,336,l),
(457,326,l),
(410,238,o),
(365,164,q),
(240,304,o),
(173,393,qs),
(135,444,o),
(135,488,qs),
(135,514,o),
(173,559,o),
(210,581,qs),
(219,587,o),
(238,587,qs),
(265,587,o),
(310,559,o),
(311,533,qs),
(315,442,l),
(331,442,l),
(337,506,o),
(337,541,qs),
(337,576,o),
(275,611,o),
(219,611,qs),
(211,611,o),
(167,580,o),
(122,539,o),
(114,523,qs),
(108,508,o),
(108,484,qs),
(108,456,o),
(130,407,o),
(151,380,qs),
(171,355,l),
(40,273,o),
(40,155,qs),
(40,78,o),
(125,-9,o),
(201,-9,qs),
(221,-9,o),
(294,15,o),
(305,31,qs),
(334,74,o),
(366,126,q),
(457,24,o),
(485,0,q),
(555,0,l),
(555,17,l),
(491,27,l)
);
},
{
closed = 1;
nodes = (
(236,13,o),
(196,13,qs),
(136,13,o),
(66,91,o),
(66,158,qs),
(66,214,o),
(126,301,o),
(185,338,q),
(265,240,o),
(352,142,q),
(287,36,o),
(269,28,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
14 1 5 3 58 56 52 49 46 45 43 4 0 9 6 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 4 5 4 3 5 128 0 5 6 4 5 6 126 0 4 4 2 97 0 2 2 43 77 0 0 0 42 77 0 6 6 1 97 0 1 1 50 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 3 4 5 4 3 5 128 0 5 6 4 5 6 126 0 4 4 2 97 0 2 2 49 77 0 0 0 42 77 0 6 6 1 97 0 1 1 50 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 4 5 4 3 5 128 0 5 6 4 5 6 126 0 2 0 4 3 2 4 105 0 0 0 42 77 0 6 6 1 97 0 1 1 50 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
47 28 35 20 45 38 17 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 580;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,0,l),
(349,591,l),
(228,591,ls),
(147,591,o),
(66,507,o),
(66,432,qs),
(66,327,o),
(155,224,o),
(251,223,qs),
(321,222,l),
(321,27,l),
(246,21,l),
(246,0,l)
);
},
{
closed = 1;
nodes = (
(498,0,l),
(498,20,l),
(439,25,l),
(439,560,l),
(498,572,l),
(498,591,l),
(411,591,l),
(411,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
16 15 2 0 1 18 17 1 0 4 2 0 2 76 0 0 1 2 1 0 2 128 3 1 1 1 41 77 4 1 2 2 42 2 78 21 17 17 36 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 592;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,-74,o),
(340,-18,o),
(351,9,qs),
(356,21,o),
(356,36,qs),
(356,63,o),
(327,110,o),
(301,133,q),
(334,169,o),
(348,201,qs),
(354,218,o),
(354,241,qs),
(354,283,o),
(293,346,o),
(237,384,qs),
(186,417,o),
(136,461,o),
(136,486,qs),
(136,504,o),
(176,545,o),
(225,576,o),
(232,576,qs),
(254,576,o),
(326,563,q),
(328,460,l),
(345,460,l),
(355,588,l),
(295,595,ls),
(239,601,o),
(234,601,qs),
(221,601,o),
(171,570,o),
(124,526,o),
(115,507,q),
(112,498,o),
(112,487,qs),
(112,458,o),
(156,409,o),
(196,382,q),
(173,367,o),
(123,320,o),
(118,308,qs),
(114,294,o),
(114,284,qs),
(114,253,o),
(162,201,o),
(206,171,qs),
(209,169,o),
(219,162,o),
(225,158,qs),
(279,121,o),
(333,68,o),
(333,36,qs),
(333,17,o),
(303,-25,o),
(265,-54,o),
(254,-54,qs),
(202,-54,o),
(127,-44,q),
(123,79,l),
(106,79,l),
(95,-65,l),
(194,-74,o),
(260,-74,qs)
);
},
{
closed = 1;
nodes = (
(266,161,o),
(232,183,qs),
(183,217,o),
(138,259,o),
(138,283,qs),
(138,305,o),
(187,351,o),
(216,369,q),
(274,331,o),
(331,275,o),
(331,238,qs),
(331,216,o),
(305,167,o),
(286,145,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */
36 1 4 2 39 1 3 4 77 69 55 24 4 0 3 4 1 1 0 1 1 5 1 5 76 0 4 2 3 2 4 3 128 0 3 0 2 3 0 126 0 0 1 2 0 1 126 0 1 6 1 5 1 5 101 0 2 2 49 2 78 0 0 0 63 0 62 41 40 38 37 33 32 34 18 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 438;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,118,o),
(613,208,o),
(681,353,o),
(681,434,qs),
(681,515,o),
(614,657,o),
(480,745,o),
(385,745,qs),
(292,745,o),
(158,655,o),
(90,509,o),
(90,427,qs),
(90,346,o),
(157,205,o),
(290,118,o),
(385,118,qs)
);
},
{
closed = 1;
nodes = (
(298,139,o),
(175,221,o),
(113,353,o),
(113,428,qs),
(113,504,o),
(176,640,o),
(299,724,o),
(385,724,qs),
(472,724,o),
(595,642,o),
(657,509,o),
(657,434,qs),
(657,358,o),
(594,223,o),
(471,139,o),
(385,139,qs)
);
},
{
closed = 1;
nodes = (
(387,257,o),
(432,263,o),
(452,267,q),
(452,285,l),
(376,281,ls),
(325,281,o),
(283,384,o),
(283,461,qs),
(283,505,o),
(313,568,o),
(352,599,o),
(364,599,qs),
(386,599,o),
(433,590,q),
(437,514,l),
(454,514,l),
(462,613,l),
(435,616,o),
(377,621,o),
(359,622,qs),
(343,622,o),
(284,569,o),
(271,540,qs),
(256,500,o),
(256,451,qs),
(256,366,o),
(313,257,o),
(374,257,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 98 values pushed */
42 1 6 4 45 1 5 6 56 1 8 7 3 76 0 5 6 7 6 5 7 128 0 0 0 2 4 0 2 105 0 4 0 6 5 4 6 105 0 7 11 1 8 3 7 8 105 10 1 3 1 1 3 89 10 1 3 3 1 97 9 1 1 3 1 81 32 32 16 16 0 0 32 59 32 58 55 53 48 46 44 43 40 38 16 31 16 30 24 22 0 15 0 14 38 12 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 771;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,283,o),
(453,337,o),
(515,440,o),
(515,509,qs),
(515,577,o),
(461,684,o),
(362,744,o),
(297,744,qs),
(242,744,o),
(142,689,o),
(80,586,o),
(80,517,qs),
(80,448,o),
(134,342,o),
(232,283,o),
(298,283,qs)
);
},
{
closed = 1;
nodes = (
(239,305,o),
(152,358,o),
(104,453,o),
(104,515,qs),
(104,578,o),
(159,672,o),
(248,722,o),
(298,722,qs),
(386,722,o),
(491,606,o),
(491,510,qs),
(491,447,o),
(436,354,o),
(347,305,o),
(297,305,qs)
);
},
{
closed = 1;
nodes = (
(286,383,l),
(286,395,l),
(259,398,l),
(259,501,l),
(299,501,l),
(359,383,l),
(402,383,l),
(402,395,l),
(373,399,l),
(321,501,l),
(321,505,l),
(343,513,o),
(369,560,o),
(369,589,qs),
(369,625,o),
(338,658,o),
(305,658,qs),
(210,658,l),
(210,645,l),
(237,641,l),
(237,398,l),
(212,394,l),
(212,383,l)
);
},
{
closed = 1;
nodes = (
(259,639,l),
(314,641,ls),
(333,641,o),
(347,613,o),
(347,585,qs),
(347,556,o),
(325,519,o),
(304,519,qs),
(259,519,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 19 values pushed */
34 33 2 9 4 42 1 6 8 51 50 45 32 31 5 5 6 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
7 1 5 6 3 6 5 114 0 0 0 2 4 0 2 105 0 4 0 9 8 4 9 105 12 1 8 0 6 5 8 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
7 1 5 6 3 6 5 3 128 0 0 0 2 4 0 2 105 0 4 0 9 8 4 9 105 12 1 8 0 6 5 8 6 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
55 54 16 16 0 0 61 59 54 62 55 62 53 52 49 48 47 46 37 35 16 30 16 29 23 21 0 15 0 14 38 13 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 595;
}
);
note = registered;
unicode = 174;
},
{
glyphname = uni2117;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,118,o),
(613,208,o),
(681,353,o),
(681,434,qs),
(681,515,o),
(614,657,o),
(480,745,o),
(385,745,qs),
(292,745,o),
(158,655,o),
(90,509,o),
(90,427,qs),
(90,346,o),
(157,205,o),
(290,118,o),
(385,118,qs)
);
},
{
closed = 1;
nodes = (
(298,139,o),
(175,221,o),
(113,353,o),
(113,428,qs),
(113,504,o),
(176,640,o),
(299,724,o),
(385,724,qs),
(472,724,o),
(595,642,o),
(657,509,o),
(657,434,qs),
(657,358,o),
(594,223,o),
(471,139,o),
(385,139,qs)
);
},
{
closed = 1;
nodes = (
(390,264,l),
(390,282,l),
(345,285,l),
(345,406,l),
(427,406,ls),
(471,406,o),
(520,471,o),
(520,518,qs),
(520,576,o),
(471,619,o),
(429,619,qs),
(283,619,l),
(283,602,l),
(317,599,l),
(317,284,l),
(283,281,l),
(283,264,l)
);
},
{
closed = 1;
nodes = (
(345,597,l),
(424,597,ls),
(461,597,o),
(492,563,o),
(492,517,qs),
(492,471,o),
(452,427,o),
(423,427,qs),
(345,427,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 101 values pushed */
35 34 2 9 4 33 1 6 5 32 1 7 6 3 76 0 0 0 2 4 0 2 105 0 4 0 9 8 4 9 103 12 1 8 0 5 6 8 5 103 0 6 0 7 3 6 7 103 11 1 3 1 1 3 89 11 1 3 3 1 97 10 1 1 3 1 81 50 49 16 16 0 0 56 54 49 57 50 57 48 47 46 45 44 42 38 36 16 31 16 30 24 22 0 15 0 14 38 13 6 23 
CALL[ ]	/* CallFunction */";
};
width = 771;
}
);
note = uni2117;
unicode = 8471;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,250,l),
(272,264,l),
(217,269,l),
(217,575,l),
(300,571,l),
(307,494,l),
(322,494,l),
(326,594,l),
(86,594,l),
(90,494,l),
(105,494,l),
(112,571,l),
(195,575,l),
(195,269,l),
(141,264,l),
(141,250,l)
);
},
{
closed = 1;
nodes = (
(471,250,l),
(471,264,l),
(428,270,l),
(440,545,l),
(444,545,l),
(457,502,o),
(490,414,qs),
(544,274,l),
(551,270,o),
(553,270,q),
(570,279,l),
(621,417,l),
(666,544,l),
(670,544,l),
(681,271,l),
(639,264,l),
(639,250,l),
(744,250,l),
(744,264,l),
(703,270,l),
(690,573,l),
(734,580,l),
(734,594,l),
(666,594,l),
(560,294,l),
(556,294,l),
(446,594,l),
(378,594,l),
(378,580,l),
(423,573,l),
(409,270,l),
(368,264,l),
(368,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
26 19 2 0 2 43 34 2 1 0 46 45 38 33 32 29 28 22 17 16 13 12 1 0 14 5 1 3 76 27 18 2 0 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
3 1 1 0 5 0 1 114 9 8 2 5 5 132 7 6 2 2 0 0 2 87 7 6 2 2 2 0 95 4 1 0 2 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
3 1 1 0 5 0 1 5 128 9 8 2 5 5 132 7 6 2 2 0 0 2 87 7 6 2 2 2 0 95 4 1 0 2 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
48 47 21 19 21 19 17 17 17 17 18 10 6 31 
CALL[ ]	/* CallFunction */";
};
width = 830;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,389,o),
(260,454,o),
(260,498,qs),
(260,540,o),
(206,602,o),
(157,602,qs),
(107,602,o),
(50,537,o),
(50,493,qs),
(50,451,o),
(104,389,o),
(153,389,qs)
);
},
{
closed = 1;
nodes = (
(116,407,o),
(72,460,o),
(72,496,qs),
(72,532,o),
(116,584,o),
(155,584,qs),
(194,584,o),
(237,532,o),
(237,496,qs),
(237,459,o),
(194,407,o),
(155,407,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 310;
}
);
note = degree;
unicode = 176;
},
{
glyphname = minute;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-60);
ref = uni02B9;
}
);
width = 176;
}
);
note = minute;
unicode = 8242;
},
{
glyphname = second;
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-60);
ref = uni02BA;
}
);
width = 286;
}
);
note = second;
unicode = 8243;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,-191,l),
(100,668,l),
(80,668,l),
(80,-191,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 133 0 1 1 46 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 180;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,308,l),
(100,668,l),
(80,668,l),
(80,308,l)
);
},
{
closed = 1;
nodes = (
(100,-191,l),
(100,184,l),
(80,184,l),
(80,-191,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 3 2 133 0 3 3 46 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 3 2 133 0 3 3 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 180;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,568,l),
(350,576,l),
(350,591,l),
(176,591,l),
(176,576,l),
(253,568,l),
(252,440,l),
(103,440,l),
(109,314,l),
(125,314,l),
(134,415,l),
(252,421,l),
(246,-144,l),
(263,-169,l),
(280,-144,l),
(274,421,l),
(392,415,l),
(401,314,l),
(417,314,l),
(423,440,l),
(274,440,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
19 18 15 14 4 4 5 1 76 7 6 5 3 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 0 1 1 0 113 0 5 5 41 77 2 1 1 1 4 95 7 6 2 4 4 44 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
3 1 0 1 0 134 0 5 5 41 77 2 1 1 1 4 95 7 6 2 4 4 44 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 20 0 20 19 17 17 20 17 17 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 526;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = uni2113;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,218,l),
(198,255,o),
(253,358,o),
(267,462,o),
(267,528,qs),
(267,581,o),
(223,637,o),
(183,637,qs),
(154,637,o),
(114,564,o),
(114,513,qs),
(114,228,l),
(86,211,o),
(45,197,q),
(48,175,l),
(83,185,o),
(114,201,q),
(114,31,ls),
(114,23,o),
(143,-10,o),
(151,-10,qs),
(174,-10,o),
(250,-1,q),
(250,16,l),
(165,18,ls),
(153,18,o),
(143,30,o),
(143,46,qs)
);
},
{
closed = 1;
nodes = (
(143,547,o),
(157,589,o),
(173,610,o),
(177,611,qs),
(180,612,o),
(187,612,qs),
(207,612,o),
(239,573,o),
(239,533,qs),
(239,468,o),
(228,372,o),
(186,281,o),
(143,247,q),
(143,515,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
28 26 15 12 10 5 0 3 4 1 1 0 2 76 0 2 0 3 0 2 3 105 0 0 1 1 0 87 0 0 0 1 97 0 1 0 1 81 30 44 18 33 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 342;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(417,108,l),
(401,108,l),
(392,7,l),
(273,1,l),
(273,421,l),
(392,415,l),
(401,314,l),
(417,314,l),
(423,440,l),
(273,440,l),
(273,568,l),
(350,576,l),
(350,591,l),
(176,591,l),
(176,576,l),
(253,568,l),
(253,440,l),
(103,440,l),
(109,314,l),
(125,314,l),
(134,415,l),
(253,421,l),
(253,1,l),
(134,7,l),
(125,108,l),
(109,108,l),
(103,-18,l),
(253,-18,l),
(253,-146,l),
(176,-154,l),
(176,-169,l),
(350,-169,l),
(350,-154,l),
(273,-146,l),
(273,-18,l),
(423,-18,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
24 23 20 19 4 6 7 6 5 2 1 4 0 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
9 1 5 4 2 4 5 114 12 1 2 3 3 2 112 0 7 7 41 77 10 1 4 4 6 95 8 1 6 6 44 77 11 1 3 3 1 96 14 13 2 1 1 42 77 0 0 0 46 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
9 1 5 4 2 4 5 2 128 12 1 2 3 4 2 3 126 0 7 7 41 77 10 1 4 4 6 95 8 1 6 6 44 77 11 1 3 3 1 96 14 13 2 1 1 42 77 0 0 0 46 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
9 1 5 4 2 4 5 2 128 12 1 2 3 4 2 3 126 11 1 3 14 13 2 1 0 3 1 104 0 7 7 41 77 10 1 4 4 6 95 8 1 6 6 44 77 0 0 0 46 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 35 0 35 34 33 32 31 30 29 28 27 19 19 17 17 17 17 17 19 19 15 8 31 
CALL[ ]	/* CallFunction */";
};
width = 526;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = uni2116;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(415,-5,l),
(415,566,l),
(472,571,l),
(472,591,l),
(324,591,l),
(324,570,l),
(385,564,l),
(385,544,l),
(388,18,l),
(382,18,l),
(358,87,o),
(343,123,qs),
(147,591,l),
(47,591,l),
(47,571,l),
(104,566,l),
(104,25,l),
(47,20,l),
(47,0,l),
(195,0,l),
(195,20,l),
(134,27,l),
(134,46,l),
(131,542,l),
(137,542,l),
(160,478,o),
(173,447,qs),
(365,-2,l),
(376,-10,o),
(379,-10,qs)
);
},
{
closed = 1;
nodes = (
(636,79,o),
(705,120,o),
(721,140,qs),
(735,159,o),
(753,237,o),
(753,277,qs),
(753,363,o),
(677,448,o),
(605,448,qs),
(591,448,o),
(526,407,o),
(505,377,q),
(493,354,o),
(479,287,o),
(479,249,qs),
(479,163,o),
(554,79,o),
(622,79,qs)
);
},
{
closed = 1;
nodes = (
(560,103,o),
(508,184,o),
(508,251,qs),
(508,307,o),
(532,376,o),
(559,398,qs),
(573,410,o),
(602,424,o),
(611,424,qs),
(665,424,o),
(724,347,o),
(724,275,qs),
(724,231,o),
(708,165,o),
(695,151,qs),
(682,135,o),
(632,103,o),
(617,103,qs)
);
},
{
closed = 1;
nodes = (
(744,0,l),
(744,23,l),
(488,23,l),
(488,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
27 26 23 22 14 13 4 7 3 1 12 7 2 7 4 19 11 8 3 0 7 3 76 28 1 0 73 10 1 6 9 1 4 7 6 4 105 2 1 1 1 41 77 0 5 5 3 97 0 3 3 52 77 0 7 7 0 95 8 1 0 0 42 0 78 48 48 30 30 69 68 67 66 48 65 48 64 57 55 30 47 30 46 44 24 21 25 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 814;
}
);
note = uni2116;
unicode = 8470;
},
{
glyphname = estimated;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,-12,o),
(475,89,q),
(462,99,l),
(422,52,o),
(345,9,o),
(296,9,qs),
(248,9,o),
(176,53,o),
(176,99,qs),
(176,206,l),
(505,206,l),
(505,236,ls),
(503,305,o),
(443,402,o),
(347,450,o),
(290,450,qs),
(227,450,o),
(127,397,o),
(70,292,o),
(70,218,qs),
(70,145,o),
(127,41,o),
(227,-12,o),
(290,-12,qs)
);
},
{
closed = 1;
nodes = (
(176,339,ls),
(176,385,o),
(243,429,o),
(290,429,qs),
(335,429,o),
(400,385,o),
(400,339,qs),
(400,236,l),
(390,236,ls),
(268,236,o),
(176,233,q)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
21 20 2 2 1 1 76 0 0 0 5 4 0 5 105 7 1 4 0 1 2 4 1 103 0 2 3 3 2 89 0 2 2 3 97 6 1 3 2 3 81 26 24 0 0 31 29 24 34 26 34 0 23 0 22 35 20 38 8 6 25 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = uni02BC;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-63,0);
ref = quoteright;
}
);
width = 62;
}
);
note = uni02BC;
unicode = 700;
},
{
glyphname = uni02BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,577,o),
(86,671,qs),
(87,673,o),
(79,687,o),
(77,687,qs),
(59,687,o),
(45,682,q),
(0,502,l),
(21,495,l)
);
},
{
closed = 1;
nodes = (
(164,577,o),
(196,671,qs),
(197,673,o),
(189,687,o),
(187,687,qs),
(169,687,o),
(155,682,q),
(110,502,l),
(131,495,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 10 values pushed */
1 1 0 0 118 24 18 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 196;
}
);
note = uni02BA;
unicode = 698;
},
{
glyphname = uni02C9;
layers = (
{
layerId = m01;
shapes = (
{
ref = macron;
}
);
width = 218;
}
);
note = uni02C9;
unicode = 713;
},
{
glyphname = uni02B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,577,o),
(86,671,qs),
(87,673,o),
(79,687,o),
(77,687,qs),
(59,687,o),
(45,682,q),
(0,502,l),
(21,495,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 8 values pushed */
0 0 0 118 18 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 86;
}
);
note = uni02B9;
unicode = 697;
},
{
glyphname = uni0308;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-165,0);
ref = dieresis;
}
);
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-39,0);
ref = dotaccent;
}
);
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-137,0);
ref = grave;
}
);
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-137,0);
ref = acute;
}
);
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-248,0);
ref = hungarumlaut;
}
);
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = caroncomb.alt;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-42,0);
ref = caron.alt;
}
);
width = 0;
}
);
note = caroncomb.alt;
},
{
glyphname = uni0302;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-204,0);
ref = circumflex;
}
);
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-204,0);
ref = caron;
}
);
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-240,0);
ref = breve;
}
);
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-168,0);
ref = ring;
}
);
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-252,0);
ref = tilde;
}
);
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-218,0);
ref = macron;
}
);
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = hookabovecomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-17,552,o),
(-2,603,q),
(0,619,l),
(0,647,o),
(-39,678,o),
(-69,678,qs),
(-91,678,o),
(-113,671,q),
(-108,651,l),
(-91,656,o),
(-78,656,qs),
(-56,656,o),
(-27,635,o),
(-27,614,qs),
(-27,594,o),
(-58,552,o),
(-88,535,q),
(-79,520,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 33 values pushed */
9 1 0 1 1 76 17 14 8 3 0 73 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 35 37 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = hookabovecomb;
unicode = 777;
},
{
glyphname = uni030F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-119,550,l),
(-230,650,l),
(-247,636,l),
(-248,622,l),
(-129,538,l)
);
},
{
closed = 1;
nodes = (
(0,550,l),
(-111,650,l),
(-128,636,l),
(-129,622,l),
(-10,538,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 7 4 2 2 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030F;
unicode = 783;
},
{
glyphname = uni0311;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-207,580,o),
(-152,613,o),
(-121,613,qs),
(-92,613,o),
(-35,579,o),
(-12,547,q),
(0,555,l),
(-19,596,o),
(-84,640,o),
(-121,640,qs),
(-157,640,o),
(-221,595,o),
(-240,555,q),
(-228,547,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
13 7 6 3 1 73 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 37 34 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0311;
unicode = 785;
},
{
glyphname = uni0312;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-31,524,o),
(-16,527,o),
(-10,529,q),
(-8,586,ls),
(-8,589,o),
(-18,596,o),
(-20,598,q),
(-15,623,o),
(0,663,q),
(-14,671,l),
(-29,645,o),
(-48,585,o),
(-48,564,qs),
(-48,535,ls),
(-48,532,o),
(-38,524,o),
(-36,524,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0313;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-19,550,o),
(0,610,o),
(0,631,qs),
(0,660,ls),
(0,663,o),
(-10,671,o),
(-12,671,qs),
(-17,671,o),
(-32,668,o),
(-38,666,q),
(-40,609,ls),
(-40,606,o),
(-30,599,o),
(-28,597,q),
(-33,572,o),
(-48,532,q),
(-34,524,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
16 8 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0313;
unicode = 787;
},
{
glyphname = uni031B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-79,406,o),
(-8,462,o),
(0,510,q),
(-21,518,l),
(-28,474,o),
(-88,421,o),
(-120,421,q),
(-118,406,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
4 3 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 21 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni031B;
unicode = 795;
},
{
glyphname = dotbelowcomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-8,-154,l),
(0,-93,l),
(-10,-82,l),
(-39,-85,l),
(-33,-154,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
2 1 2 0 74 0 0 0 118 19 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = dotbelowcomb;
unicode = 803;
},
{
glyphname = uni0324;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-126,-20);
ref = dotbelowcomb;
},
{
pos = (0,-21);
ref = dotbelowcomb;
}
);
width = 0;
}
);
note = uni0324;
unicode = 804;
},
{
glyphname = uni0326;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-19,-192,o),
(0,-132,o),
(0,-111,qs),
(0,-82,ls),
(0,-79,o),
(-10,-71,o),
(-12,-71,qs),
(-17,-71,o),
(-32,-74,o),
(-38,-76,q),
(-40,-133,ls),
(-40,-136,o),
(-30,-143,o),
(-28,-145,q),
(-33,-170,o),
(-48,-210,q),
(-34,-218,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
16 8 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0326;
},
{
glyphname = uni0327;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-111,0);
ref = cedilla;
}
);
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-68,-213,o),
(-1,-204,q),
(-1,-189,l),
(-75,-190,ls),
(-89,-190,o),
(-107,-151,o),
(-107,-125,qs),
(-107,-115,o),
(-106,-110,qs),
(-105,-103,o),
(-28,-27,o),
(-17,-16,qs),
(0,0,l),
(-9,10,l),
(-92,-55,o),
(-130,-90,q),
(-135,-108,o),
(-135,-125,qs),
(-135,-159,o),
(-104,-213,o),
(-79,-213,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
18 1 1 0 1 76 7 6 2 0 74 0 0 1 1 0 87 0 0 0 1 97 2 1 1 0 1 81 0 0 0 20 0 19 47 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = uni032E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-83,-164,o),
(-19,-119,o),
(0,-79,q),
(-12,-71,l),
(-33,-104,o),
(-88,-137,o),
(-119,-137,qs),
(-148,-137,o),
(-205,-103,o),
(-228,-71,q),
(-240,-79,l),
(-221,-120,o),
(-156,-164,o),
(-119,-164,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 34 values pushed */
10 9 3 2 4 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 13 0 12 37 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni032E;
unicode = 814;
},
{
glyphname = uni0331;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-218,-697);
ref = macron;
}
);
width = 0;
}
);
note = uni0331;
unicode = 817;
},
{
glyphname = uni0335;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,298,l),
(0,318,l),
(-198,318,l),
(-198,298,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0335;
unicode = 821;
},
{
glyphname = uni0336;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,298,l),
(0,318,l),
(-427,318,l),
(-427,298,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0336;
unicode = 822;
},
{
glyphname = uni0337;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-1,371,l),
(0,389,l),
(-9,392,l),
(-181,268,l),
(-182,251,l),
(-172,248,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0337;
unicode = 823;
},
{
glyphname = uni0338;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,505,l),
(-2,516,l),
(-17,522,l),
(-291,-62,l),
(-288,-73,l),
(-274,-79,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0338;
unicode = 824;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,620,l),
(136,634,l),
(120,648,l),
(0,549,l),
(10,537,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 137;
}
);
note = acute;
unicode = 180;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,547,o),
(221,592,o),
(240,632,q),
(228,640,l),
(207,608,o),
(152,574,o),
(121,574,qs),
(89,574,o),
(32,608,o),
(12,640,q),
(0,632,l),
(19,591,o),
(84,547,o),
(121,547,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 34 values pushed */
10 9 3 2 4 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 13 0 12 37 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 240;
}
);
note = breve;
unicode = 728;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(121,519,l),
(204,634,l),
(192,644,l),
(106,550,l),
(98,550,l),
(12,644,l),
(0,634,l),
(83,519,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 15 values pushed */
5 4 2 1 4 0 74 0 0 0 118 22 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 204;
}
);
note = caron;
unicode = 711;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,-193,o),
(90,-168,o),
(98,-159,qs),
(103,-152,o),
(111,-130,o),
(111,-120,qs),
(111,-97,o),
(63,-59,o),
(30,-54,q),
(35,8,l),
(19,10,l),
(0,-59,l),
(5,-73,l),
(41,-76,o),
(81,-102,o),
(81,-122,qs),
(81,-143,o),
(48,-168,o),
(4,-187,q),
(11,-204,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
19 8 1 50 
CALL[ ]	/* CallFunction */";
};
width = 111;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(98,613,l),
(106,613,l),
(192,519,l),
(204,529,l),
(121,644,l),
(83,644,l),
(0,529,l),
(12,519,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 15 values pushed */
7 5 4 3 4 0 73 0 0 0 118 17 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 204;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,535,l),
(39,596,l),
(29,607,l),
(0,604,l),
(6,535,l)
);
},
{
closed = 1;
nodes = (
(157,535,l),
(165,596,l),
(155,607,l),
(126,604,l),
(132,535,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 17 values pushed */
7 6 2 1 4 0 74 1 1 0 0 118 20 19 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 165;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,535,l),
(39,596,l),
(29,607,l),
(0,604,l),
(6,535,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
2 1 2 0 74 0 0 0 118 19 1 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 39;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,549,l),
(17,648,l),
(1,634,l),
(0,620,l),
(127,537,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 137;
}
);
note = grave;
unicode = 96;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,620,l),
(128,634,l),
(111,648,l),
(0,548,l),
(10,536,l)
);
},
{
closed = 1;
nodes = (
(248,620,l),
(247,634,l),
(230,648,l),
(119,548,l),
(129,536,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 6 4 1 2 50 
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,547,l),
(218,569,l),
(0,569,l),
(0,547,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 218;
}
);
note = macron;
unicode = 175;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,-213,o),
(134,-204,q),
(134,-189,l),
(60,-190,ls),
(46,-190,o),
(28,-151,o),
(28,-125,qs),
(28,-115,o),
(29,-110,qs),
(30,-103,o),
(107,-27,o),
(118,-16,qs),
(135,0,l),
(126,10,l),
(43,-55,o),
(5,-90,q),
(0,-108,o),
(0,-125,qs),
(0,-159,o),
(31,-213,o),
(56,-213,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 38 values pushed */
18 1 1 0 1 76 7 6 2 0 74 0 0 1 1 0 87 0 0 0 1 97 2 1 1 0 1 81 0 0 0 20 0 19 47 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 135;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,531,o),
(168,582,o),
(168,622,qs),
(168,663,o),
(123,704,o),
(84,704,qs),
(44,704,o),
(0,653,o),
(0,613,qs),
(0,572,o),
(45,531,o),
(84,531,qs)
);
},
{
closed = 1;
nodes = (
(53,550,o),
(22,578,o),
(22,617,qs),
(22,655,o),
(40,673,q),
(56,685,o),
(85,685,qs),
(115,685,o),
(146,657,o),
(146,618,qs),
(146,580,o),
(128,562,q),
(112,550,o),
(83,550,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 25 12 24 19 17 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 168;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,566,o),
(238,590,o),
(252,605,q),
(241,617,l),
(225,604,o),
(205,593,o),
(192,593,qs),
(177,593,o),
(133,605,qs),
(81,619,o),
(56,619,qs),
(46,619,o),
(13,595,o),
(0,580,q),
(11,568,l),
(27,581,o),
(47,592,o),
(60,592,qs),
(75,592,o),
(119,580,qs),
(171,566,o),
(196,566,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 49 values pushed */
18 17 2 2 1 7 6 2 3 0 2 76 0 2 0 3 2 89 0 1 0 0 3 1 0 105 0 2 2 3 97 4 1 3 2 3 81 0 0 0 21 0 20 34 37 34 5 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 252;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = caron.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,508,o),
(42,570,o),
(42,596,qs),
(42,627,ls),
(42,630,o),
(31,639,o),
(29,639,qs),
(23,639,o),
(8,634,q),
(6,574,ls),
(6,570,o),
(16,562,o),
(17,561,q),
(12,529,o),
(0,493,q),
(12,485,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
15 7 1 50 
CALL[ ]	/* CallFunction */";
};
width = 42;
}
);
note = caron.alt;
},
{
glyphname = uni0308.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-114,660,l),
(-106,721,l),
(-116,732,l),
(-145,729,l),
(-139,660,l)
);
},
{
closed = 1;
nodes = (
(-8,660,l),
(0,721,l),
(-10,732,l),
(-39,729,l),
(-33,660,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
7 6 2 1 4 0 74 1 1 0 0 118 20 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0308.case;
},
{
glyphname = uni0307.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-8,655,l),
(0,716,l),
(-10,727,l),
(-39,724,l),
(-33,655,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
2 1 2 0 74 0 0 0 118 19 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0307.case;
},
{
glyphname = gravecomb.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,685,l),
(-136,752,l),
(-149,736,l),
(-148,722,l),
(-8,671,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = gravecomb.case;
},
{
glyphname = acutecomb.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-3,711,l),
(0,724,l),
(-14,745,l),
(-156,681,l),
(-151,666,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = acutecomb.case;
},
{
glyphname = uni030B.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-125,715,l),
(-124,729,l),
(-139,745,l),
(-262,661,l),
(-254,648,l)
);
},
{
closed = 1;
nodes = (
(-1,714,l),
(0,728,l),
(-14,745,l),
(-141,666,l),
(-133,652,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 6 4 1 2 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030B.case;
},
{
glyphname = uni0302.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-106,736,l),
(-98,736,l),
(-12,642,l),
(0,652,l),
(-83,767,l),
(-121,767,l),
(-204,652,l),
(-192,642,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
7 5 4 3 4 0 73 0 0 0 118 17 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0302.case;
},
{
glyphname = uni030C.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-83,642,l),
(0,757,l),
(-12,767,l),
(-98,673,l),
(-106,673,l),
(-192,767,l),
(-204,757,l),
(-121,642,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
5 4 2 1 4 0 74 0 0 0 118 22 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.case;
},
{
glyphname = uni0306.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-83,658,o),
(-19,703,o),
(0,743,q),
(-12,751,l),
(-33,719,o),
(-88,685,o),
(-119,685,qs),
(-151,685,o),
(-208,719,o),
(-228,751,q),
(-240,743,l),
(-221,702,o),
(-156,658,o),
(-119,658,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
10 9 3 2 4 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 13 0 12 37 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0306.case;
},
{
glyphname = uni030A.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-44,661,o),
(0,712,o),
(0,752,qs),
(0,793,o),
(-45,834,o),
(-84,834,qs),
(-124,834,o),
(-168,783,o),
(-168,743,qs),
(-168,702,o),
(-123,661,o),
(-84,661,qs)
);
},
{
closed = 1;
nodes = (
(-115,680,o),
(-146,708,o),
(-146,747,qs),
(-146,785,o),
(-128,803,q),
(-112,815,o),
(-83,815,qs),
(-53,815,o),
(-22,787,o),
(-22,748,qs),
(-22,710,o),
(-40,692,q),
(-56,680,o),
(-85,680,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 0 2 3 0 2 105 5 1 3 1 1 3 89 5 1 3 3 1 97 4 1 1 3 1 81 12 12 0 0 12 25 12 24 19 17 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030A.case;
},
{
glyphname = tildecomb.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-46,679,o),
(-14,703,o),
(0,718,q),
(-11,730,l),
(-27,717,o),
(-47,706,o),
(-60,706,qs),
(-75,706,o),
(-119,718,qs),
(-171,732,o),
(-196,732,qs),
(-206,732,o),
(-239,708,o),
(-252,693,q),
(-241,681,l),
(-225,694,o),
(-205,705,o),
(-192,705,qs),
(-177,705,o),
(-133,693,qs),
(-81,679,o),
(-56,679,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
18 17 2 2 1 7 6 2 3 0 2 76 0 2 0 3 2 89 0 1 0 0 3 1 0 105 0 2 2 3 97 4 1 3 2 3 81 0 0 0 21 0 20 34 37 34 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = tildecomb.case;
},
{
glyphname = uni0304.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,664,l),
(0,686,l),
(-218,686,l),
(-218,664,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0304.case;
},
{
glyphname = hookabovecomb.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-17,678,o),
(-2,729,q),
(0,745,l),
(0,773,o),
(-39,804,o),
(-69,804,qs),
(-91,804,o),
(-113,797,q),
(-108,777,l),
(-91,782,o),
(-78,782,qs),
(-56,782,o),
(-27,761,o),
(-27,740,qs),
(-27,720,o),
(-58,678,o),
(-88,661,q),
(-79,646,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 1 0 1 1 76 17 14 8 3 0 73 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 35 37 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = hookabovecomb.case;
},
{
glyphname = uni030F.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,669,l),
(-123,753,l),
(-138,737,l),
(-137,723,l),
(-8,656,l)
);
},
{
closed = 1;
nodes = (
(-121,671,l),
(-248,750,l),
(-262,733,l),
(-261,719,l),
(-129,657,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 7 4 2 2 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030F.case;
},
{
glyphname = uni0311.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-207,691,o),
(-152,724,o),
(-121,724,qs),
(-92,724,o),
(-35,690,o),
(-12,658,q),
(0,666,l),
(-19,707,o),
(-84,751,o),
(-121,751,qs),
(-157,751,o),
(-221,706,o),
(-240,666,q),
(-228,658,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
13 7 6 3 1 73 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 37 34 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0311.case;
},
{
glyphname = uni0312.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-31,524,o),
(-16,527,o),
(-10,529,q),
(-8,586,ls),
(-8,589,o),
(-18,596,o),
(-20,598,q),
(-15,623,o),
(0,663,q),
(-14,671,l),
(-29,645,o),
(-48,585,o),
(-48,564,qs),
(-48,535,ls),
(-48,532,o),
(-38,524,o),
(-36,524,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0312.case;
},
{
glyphname = uni031B.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-79,534,o),
(-8,590,o),
(0,638,q),
(-21,646,l),
(-28,602,o),
(-88,549,o),
(-120,549,q),
(-118,534,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
4 3 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 21 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni031B.case;
},
{
glyphname = dotbelowcomb.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-8,-154,l),
(0,-93,l),
(-10,-82,l),
(-39,-85,l),
(-33,-154,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */
2 1 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
0 0 0 46 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
0 0 0 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 4 values pushed */
19 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dotbelowcomb.case;
},
{
glyphname = uni0324.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-134,-154,l),
(-126,-93,l),
(-136,-82,l),
(-165,-85,l),
(-159,-154,l)
);
},
{
closed = 1;
nodes = (
(-8,-154,l),
(0,-93,l),
(-10,-82,l),
(-39,-85,l),
(-33,-154,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 2 1 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 7 values pushed */
1 1 0 0 46 0 78 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 5 values pushed */
1 1 0 0 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
20 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0324.case;
},
{
glyphname = uni0326.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-19,-202,o),
(0,-142,o),
(0,-121,qs),
(0,-92,ls),
(0,-89,o),
(-10,-81,o),
(-12,-81,qs),
(-17,-81,o),
(-32,-84,o),
(-38,-86,q),
(-40,-143,ls),
(-40,-146,o),
(-30,-153,o),
(-28,-155,q),
(-33,-180,o),
(-48,-220,q),
(-34,-228,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
16 8 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0326.case;
},
{
glyphname = uni0327.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-71,-193,o),
(-21,-168,o),
(-13,-159,qs),
(-8,-152,o),
(0,-130,o),
(0,-120,qs),
(0,-97,o),
(-48,-59,o),
(-81,-54,q),
(-76,8,l),
(-92,10,l),
(-111,-59,l),
(-106,-73,l),
(-70,-76,o),
(-30,-102,o),
(-30,-122,qs),
(-30,-143,o),
(-63,-168,o),
(-107,-187,q),
(-100,-204,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
19 8 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0327.case;
},
{
glyphname = uni0328.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-68,-213,o),
(-1,-204,q),
(-1,-189,l),
(-75,-190,ls),
(-89,-190,o),
(-107,-151,o),
(-107,-125,qs),
(-107,-115,o),
(-106,-110,qs),
(-105,-103,o),
(-28,-27,o),
(-17,-16,qs),
(0,0,l),
(-9,10,l),
(-92,-55,o),
(-130,-90,q),
(-135,-108,o),
(-135,-125,qs),
(-135,-159,o),
(-104,-213,o),
(-79,-213,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
18 1 1 0 1 76 7 6 2 0 74 0 0 1 1 0 87 0 0 0 1 97 2 1 1 0 1 81 0 0 0 20 0 19 47 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0328.case;
},
{
glyphname = uni032E.case;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni032E;
}
);
width = 0;
}
);
note = uni032E.case;
},
{
glyphname = uni0331.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,-150,l),
(0,-128,l),
(-218,-128,l),
(-218,-150,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0331.case;
},
{
glyphname = uni0337.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-1,402,l),
(0,419,l),
(-9,422,l),
(-266,267,l),
(-267,251,l),
(-257,248,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0337.case;
},
{
glyphname = uni0338.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,623,l),
(-1,636,l),
(-22,642,l),
(-392,-81,l),
(-387,-91,l),
(-368,-95,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni0338.case;
},
{
glyphname = acute.loclPLK.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,772,l),
(66,783,l),
(42,789,l),
(0,655,l),
(19,649,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 77;
}
);
note = acute.loclPLK.case;
},
{
glyphname = acute.loclPLK;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(104,638,l),
(97,651,l),
(74,663,l),
(0,544,l),
(16,534,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 104;
}
);
note = acute.loclPLK;
},
{
glyphname = uni03060301;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni0306;
},
{
pos = (-42,150);
ref = acutecomb;
}
);
width = 0;
}
);
note = uni03060301;
},
{
glyphname = uni03060300;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni0306;
},
{
pos = (-67,150);
ref = gravecomb;
}
);
width = 0;
}
);
note = uni03060300;
},
{
glyphname = uni03060309;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni0306;
},
{
pos = (-63,150);
ref = hookabovecomb;
}
);
width = 0;
}
);
note = uni03060309;
},
{
glyphname = uni03060303;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-8,0);
ref = uni0306;
},
{
pos = (0,150);
ref = tildecomb;
}
);
width = 0;
}
);
note = uni03060303;
},
{
glyphname = uni03020301;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni0302;
},
{
pos = (-24,155);
ref = acutecomb;
}
);
width = 0;
}
);
note = uni03020301;
},
{
glyphname = uni03020300;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni0302;
},
{
pos = (-49,155);
ref = gravecomb;
}
);
width = 0;
}
);
note = uni03020300;
},
{
glyphname = uni03020309;
layers = (
{
layerId = m01;
shapes = (
{
ref = uni0302;
},
{
pos = (-45,155);
ref = hookabovecomb;
}
);
width = 0;
}
);
note = uni03020309;
},
{
glyphname = uni03020303;
layers = (
{
layerId = m01;
shapes = (
{
pos = (-26,0);
ref = uni0302;
},
{
pos = (0,155);
ref = tildecomb;
}
);
width = 0;
}
);
note = uni03020303;
},
{
glyphname = HT;
layers = (
{
layerId = m01;
width = 600;
}
);
note = HT;
},
{
glyphname = LF;
layers = (
{
layerId = m01;
width = 600;
}
);
note = LF;
},
{
glyphname = DLE;
layers = (
{
layerId = m01;
width = 600;
}
);
note = DLE;
},
{
glyphname = DC1;
layers = (
{
layerId = m01;
width = 600;
}
);
note = DC1;
},
{
glyphname = DC2;
layers = (
{
layerId = m01;
width = 600;
}
);
note = DC2;
},
{
glyphname = DC3;
layers = (
{
layerId = m01;
width = 600;
}
);
note = DC3;
},
{
glyphname = DC4;
layers = (
{
layerId = m01;
width = 600;
}
);
note = DC4;
},
{
glyphname = RS;
layers = (
{
layerId = m01;
width = 600;
}
);
note = RS;
},
{
glyphname = US;
layers = (
{
layerId = m01;
width = 600;
}
);
note = US;
},
{
glyphname = uniE0FF;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uniE0FF;
unicode = 57599;
},
{
glyphname = uniEFFD;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uniEFFD;
unicode = 61437;
},
{
glyphname = uniF000;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uniF000;
unicode = 61440;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Thin;
properties = (
{
key = postscriptFullName;
value = "Grenze Thin";
},
{
key = postscriptFontName;
value = "Grenze-Thin";
}
);
weightClass = 250;
}
);
kerningLTR = {
m01 = {
"@MMK_L_D" = {
"@MMK_R_A" = -25;
"@MMK_R_V" = -20;
};
"@MMK_L_F" = {
"@MMK_R_A" = -45;
};
"@MMK_L_L" = {
"@MMK_R_V" = -35;
"@MMK_R_W" = -35;
"@MMK_R_Y" = -35;
};
"@MMK_L_M" = {
"@MMK_R_A" = -10;
};
"@MMK_L_P" = {
"@MMK_R_A" = -60;
"@MMK_R_a" = -40;
};
"@MMK_L_T" = {
"@MMK_R_A" = -17;
"@MMK_R_a" = -40;
};
"@MMK_L_V" = {
"@MMK_R_A" = -60;
"@MMK_R_C" = -20;
"@MMK_R_a" = -46;
"@MMK_R_period" = -60;
};
"@MMK_L_W" = {
"@MMK_R_A" = -65;
"@MMK_R_a" = -46;
"@MMK_R_period" = -60;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -80;
};
"@MMK_L_v" = {
"@MMK_R_a" = -20;
};
"@MMK_L_w" = {
"@MMK_R_a" = -20;
};
"@MMK_L_y" = {
"@MMK_R_a" = -20;
};
seven = {
four = -13;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2021 The HK Tamsis Project Authors (https://github.com/hndikusuma/hk-tamsis), with Reserved Font Name \"HK Tamsis\".";
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Omnibus-Type";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Hendi Kusuma";
}
);
},
{
key = trademarks;
values = (
{
language = ENG;
value = "HK Tamsis is a trademark of Hendi Kusuma";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = www.hendikusuma.com;
},
{
key = designerURL;
value = www.hendikusuma.com;
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 1;
}
